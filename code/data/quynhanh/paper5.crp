0
<document>
<document>
1
<title>
<title>
2
Requirements Engineering in a Model-based Methodology for Embedded Automotive Software
Requirements Engineering in a Model-based Methodology for Embedded Automotive Software
3
</title>
</title>
4
<abstract>
<abstract>
5
<p>
<p>
6
This paper resumes the requirements engineering in a model-based methodology for embedded automotive software .
This paper examines the requirements engineering in a model-based methodology for embedded automotive software .
7
The methodology relies on two standard languages : EAST-ADL for automotive architecture description and SysML for systems modeling . 
The methodology relies on two standard languages : EAST-ADL for automotive architecture description and SysML for systems modeling . 
8
The requirements engineering in the methodology describes phases of elicitation , modeling , traceability , verification and validation . 
The requirements engineering in the methodology describes phases of elicitation , modeling , traceability , verification and validation . 
9
It is illustrated by applying on a case study – the knock controller – a part of the engine management system .
It is illustrated by applying in a case study of the knock controller – a part of the engine management system .
10
</p>
</p>
11
</abstract>
</abstract>
12
<section label=" INTRODUCTION">
<section label=" INTRODUCTION">
13
<p>
<p>
14
Modern car is now equipped with more and more functionalities dependent on embedded electronics , ranging from powertrain and chassis control to body comfort and infotainment . 
Modern car is now equipped with more and more functionalities dependent on embedded electronics , ranging from powertrain and chassis control to body comfort and infotainment . 
15
These functionalities are distributed over a networked Electronic Control Units ( ECU ) . 
These functionalities are distributed over a networked Electronic Control Units ( ECU ) . 
16
The size and complexity of software for these embedded electronics increase rapidly with its cost raising from 10% of the overall cost in 1970 to 40% in 2010 . 
The size and complexity of software for these embedded electronics increase rapidly with its cost rising from 10% of the overall cost in 1970 to 40% in 2010 . 
17
Actually , 90% of innovations in the automotive industry concerns embedded electronics and 80% among them are software \CITE .
Actually , 90% of innovations in the automotive industry concern embedded electronics and 80% among them are software \CITE .
18
A big challenge in developing automotive software concerns the quality . 
A big challenge in developing automotive software concerns its quality . 
19
Automotive system are safety-critical systems where failures may cause severe damages or loss , so software errors led directly to car recalls . 
Automotive systems are safety-critical systems whose failures may cause severe damage or loss , so software errors led directly to car recalls . 
20
According to the report \CITE , one-third of the recalls in recent year is caused by software errors . 
According to the report \CITE , one-third of the recalls in recent years are caused by software errors . 
21
More efforts are needed on software’s verification and testing .
More effort is needed on software’s verification and testing .
22
Another challenge concerns the reduction the time of development . 
Another challenge concerns the reduction the development time . 
23
The automotive market is shared by manufacturers , suppliers and tool vendors , and all needs shorten processes which favor the exchangeability among them and the reuse of software in different product lines . 
The automotive market is shared by manufacturers , suppliers and tool vendors , and all need shorten processes which favor the exchangeability among them and the reuse of software in different product lines . 
24
They also need to follow requirements along the development , from the specification to design and code , to anticipate and communicate its changes throughout teams .
They also need to follow requirements along the development , from the specification to the design and the code , to anticipate and communicate its changes throughout the team .
25
New paradigm in software development is born in this context to face these challenges . 
A new paradigm software development is formed in this context to face these challenges . 
26
In Europe , automotive actors tried to cooperate on a common base for software development .
In Europe , automotive actors cooperated to establish mutual communication standardized for software development .
27
The result of this corporation is EAST-ADL \CITE , a recently defined standard . 
The recent result of this corporation is EAST-ADL \CITE
28
EAST-ADL is an architecture description language dedicated to automotive software . 
an architecture description language dedicated to automotive software . 
29
It provides a mean to describe the functionality of a vehicle , from high level requirement to implementation details . 
It provides a means to describe the functionality of a vehicle , from high level requirements to implementation details . 
30
It focuses on structural aspect , leaving behavioral aspect for existing tools . EASTADL is based on Unified Modeling Language 2 \CITE but has automotive-specific constructs and semantics in order to make system models unambiguous , consistent and exchangeable .
It focuses on structural aspects , leaving behavioral aspects for existing tools . EASTADL is based on Unified Modeling Language 2 \CITE but has automotive-specific constructs and semantics in order to make system models unambiguous , consistent and exchangeable .
31
Model-based development ( MBD ) is a preferred approach for automotive software because it improves the specification , design , and implementation phases . 
Model-based development ( MBD ) is a preferred approach for automotive software because it improves the specification , design , and implementation phases . 
32
MBD benefits from the Systems Modeling Language ( SysML ) \CITE , another recently defined by Object Management Group ( OMG ) . 
MBD benefits from the Systems Modeling Language ( SysML ) \CITE , another recently defined by Object Management Group ( OMG ) . 
33
SysML gives a means to early represent into models the requirements and physical parametric of automotive systems . 
SysML is used to model the requirements and physical parameters of automotive systems . 
34
SysML has also the capacities of facilitate the design and verification .
SysML has also the capacities of facilitating the design and verification .
35
The research project MeMVaTEx \CITE addresses a modelbased methodology that emphasizes the requirements validation and traceability . 
MeMVaTEx research project \CITE develops a modelbased methodology that emphasizes the requirements validation and traceability . 
36
The methodology invests two languages : EAST-ADL for automotive architecture description and SysML for system modeling . 
The methodology investigates two languages : EAST-ADL for automotive architecture description and SysML for system modeling . 
37
The methodology describes step-by-step process with appropriate tools supporting each step . 
The methodology describes a step-by-step process with appropriate tools supporting each step . 
38
It aims to give a seamless solution for industrial use . 
It aims to give a seamless solution for industrial use . 
39
An automotive case study – the engine knock controller – a part of the Engine Management System ( EMS ) is used to illustrated the methodology .
An automotive case study shows that the engine knock controller – a part of the Engine Management System ( EMS ) - is used to illustrated the methodology .
40
This paper shows the requirements engineering in the methodology . 
This paper shows the requirements engineering in the methodology . 
41
It describes phases of elicitation , modeling and traceability , verification and validation , and accompanied tools .
It describes phases of elicitation , modeling and traceability , verification and validation , and accompanied tools .
42
The methodology concerns other aspects like safety , real-time , variability , or model transformation that will not be addressed here . 
The methodology concerns other aspects such as safety , real-time , variability , or model transformation that will not be addressed here . 
43
Our related works \CITE can be found on the Web site .
Our related works \CITE can be found on the website .
44
The remainder of the paper is organized as follows : Section II and Section III resume the two languages EASTADL and SysML for architecture description and system modeling .
The remainder of the paper is organized as follows : Section II and Section III discuss how EASTADL and SysML are used architecture description and system modeling .
45
Section IV describes the knock phenomenon and controller . 
Section IV describes the knock phenomenon and controller . 
46
Section V presents the requirements engineering by phases of elicitation , modeling and traceability , verification and validation . 
Section V presents the requirements engineering in three main phases : elicitation , modeling and traceability , verification and validation . 
47
We give framework tool for the engineering and some experiences from using these tools . 
We describe the framework used for engineering tools and with using these tools . 
48
Section VI concludes the paper .
Section VI concludes the paper .
49
</p>
</p>
50
</section>
</section>
51
<section label =" EAST-ADL OVERVIEWS">
<section label =" EAST-ADL OVERVIEWS">
52
<p>
<p>
53
EAST-ADL \CITE stands for Electronic Architecture and Software Tools-Architecture Description Language . 
EAST-ADL \CITE stands for Electronic Architecture and Software Tools-Architecture Description Language . 
54
The language is defined in the Embedded Electronic Architecture ( EEA ) project , one of many project from Information Technology for European Advancement ( ITEA ) . 
The language is defined in the Embedded Electronic Architecture ( EEA ) project , one of many project initiated by Information Technology for European Advancement ( ITEA ) . 
55
Important car manufactures , suppliers , tool vendors , and research institutes in Europe take part in this project to give birth EAST-ADL . 
Important car manufactures , suppliers , tool vendors , and research institutes in Europe take part in this project to give birth to EAST-ADL . 
56
This language is intended to support the development of automotive embedded software , by capturing all the related engineering information , including software , hardware , and its environment .
This language is intended to support the development of automotive embedded software by capturing all the related engineering information , including software , hardware , and its environment .
57
The language EAST-ADL reflects different views and details of the architecture and is structured in five abstraction layers as illustrated in Figure 1 .
EAST-ADL reflects different views and details of the architecture and is structured in five abstraction layers as illustrated in Figure 1 .
58
These layers are :
These layers are :
59
- Vehicle level ( VL ) describes electronic features in driver’s point of view .
- Vehicle level ( VL ) describes electronic features from the driver’s point of view .
60
- Analysis level ( AL ) gives abstract functional definition of features in system context .
- Analysis level ( AL ) gives abstract functional definition of features in system context .
61
- Design level gives ( DL ) detailed functional definition of software including elementary decomposition .
- Design level gives ( DL ) detailed functional definition of software including elementary decomposition .
62
- Implementation level ( IL ) describes reusable code and system configuration for hardware deployment .
- Implementation level ( IL ) describes reusable code and system configuration for hardware deployment .
63
- Operational level ( OL ) supports final binary software deployment .
- Operational level ( OL ) supports final binary software deployment .
64
EAST-ADL has just revised in the project ATESST \CITE .
EAST-ADL has just been revised in the ATESST project \CITE .
65
Version 2 of EAST-ADL now links directly to AUTomotive Open System Architecture ( AUTOSAR ) , another initiative from automotive industry which standardizes software architecture and interfaces for ECUs . 
Version 2 of EAST-ADL now links directly to AUTomotive Open System Architecture ( AUTOSAR ) , another initiative from the automotive industry which standardizes software architecture and interfaces for ECUs . 
66
Essentially , AUTOSAR’s scope concerns the last two Implementation and Operational levels of the EAST-ADL . 
Essentially , AUTOSAR’s scope concerns the last two Implementation and Operational levels of the EAST-ADL . 
67
The project ATESST3 tries to the harmonize EAST-ADL 2 and AUTOSAR with summaries can be found in \CITE .
The project ATESST3 tries to the harmonize EAST-ADL 2 and AUTOSAR with summaries can be found in \CITE .
68
</p>
</p>
69
</section>
</section>
70
<section label=" SYSTEMS MODELING LANGUAGE">
<section label=" SYSTEMS MODELING LANGUAGE">
71
<p>
<p>
72
Since its adoption in 1997 by Object Management Group ( OMG ) to the last version UML 2 \CITE in 2007 , UML is successfully used by software engineers for modeling their software . 
Since its adoption in 1997 by Object Management Group ( OMG ) to the last version called UML 2 \CITE in 2007 , UML is successfully used by software engineers for modeling their software . 
73
Web applications and banking transactions benefits particularly from UML . 
Web applications and banking transactions benefits particularly from UML . 
74
However , UML lacks important elements to be used by system engineers to modeling their systems , e.g. , no means exists for modeling requirements , physical constraints among components , or internal transactions between subsystems . 
However , UML lacks important elements to be used by system engineers to modeling their systems , such as a means for modeling requirements , physical constraints among components , or internal transactions between subsystems . 
75
Many specific profiles were invented , giving partly solutions for some problems .
Many specific profiles were invented , giving partly solutions for some problems .
76
System Modeling Language ( SysML ) is an OMG standard , developed with objective to fill the semantic gap between systems , software , and other engineering disciplines . 
System Modeling Language ( SysML ) is an OMG standard , developed to fill the semantic gap between systems , software , and other engineering disciplines . 
77
By definition , OMG SysML enables system engineers in different domains to analyze , specify , design , and verify their complex systems , enhancing systems quality .
By definition , OMG SysML enables system engineers in different domains to analyze , specify , design , and verify their complex systems , enhancing systems quality .
78
Technically , SysML reuses a subset of UML 2 , adding new diagrams and modifying others . 
Technically , SysML reuses a subset of UML 2 , adding new diagrams and modifying others . 
79
It includes diagrams that can be used to specify system requirements , behavior , structure , and parametric relationships , known as the four pillars of SysML . 
It includes diagrams that can be used to specify system requirements , behavior , structure , and parametric relationships , known as the four pillars of SysML . 
80
Of the four pillars , only requirements and parametric diagrams are entirely new . 
Of the four pillars , only requirements and parametric diagrams are entirely new . 
81
The Figure 2 gives the complete SysML diagrams . 
Figure 2 illustrates the complete SysML diagrams . 
82
More descriptions and applications of SysML diagrams can be found in \CITE .
More descriptions and applications of SysML diagrams can be found in \CITE .
83
The project MeMVaTEx pays particular attention on the requirement diagram . 
The project MeMVaTEx pays particular attention to the requirement diagram . 
84
This diagram represent text requirement in the model . 
This diagram represents text requirements in the model . 
85
A requirement may have links to other requirements or to modeling actefacts via a set of four new stereotyped dependencies ( see Figure 3 ) .
A requirement may have links to other requirements or to modeling actefacts via a set of four new stereotyped dependencies ( see Figure 3 ) .
86
- " derive " indicates the derivation of requirement from other requirements .
- " derive " indicates the derivation of requirement from other requirements .
87
- " refine " indicates that an element is a refinement of a textual requirement .
- " refine " indicates that an element is a refinement of a textual requirement .
88
- " satisfy " shows the satisfaction of requirement by design .
- " satisfy " shows the satisfaction of requirement by design .
89
- " verify " shows the link from a test case to the requirement it verifies .
- " verify " shows the link from a test case to the requirement it verifies .
90
With these new stereotypes , engineers can follow forward and backward any requirement from the the phase of specification , how it is broken into sub-requirements , which design blocks satisfy requirement or which parts of code are concerned . 
With these new stereotypes , engineers can keep track of any requirement from the the phase of specification in terms of how it is broken into sub-requirements and which design blocks satisfy requirement or which parts of code are concerned . 
91
With thousands of requirements may change during the development of an ordinary automotive project \CITE , the new capacity of SysML helps keeping the requirements traceability .
With thousands of requirements may change during the development of an ordinary automotive project \CITE , the new capacity of SysML helps maintaining requirements traceability .
92
New SysML stereotype introduces the link requirementtest case that is crucial for the requirements verification and validation because strict regulations in the automotive domain like IEC 61508 \CITE or the future ISO 26262 \CITE now impose that each requirement must be tested by test case . 
New SysML stereotypes introduce the link between requirements and test cases that are crucial for requirements verification and validation because under strict regulations such as IEC 61508 \CITE and the upcoming ISO 26262 \CITE , each requirement must be tested by test cases .
93
In SysML , a test case is intended to be used as a general mechanism to represent any of the standard verification methods for inspection , analysis , demonstration , or test . 
A test case is a general mechanism to represent any of the standard vertification methods for inspection , analysis , demonstration , or testing . 
94
SysML has the capability for representing test cases and attaching them to their related requirements or use cases . 
SysML can represent test cases and link them to their corresponding requirements or use cases . 
95
A test case can be an operation or a behavioral model ( Interaction , State Machine , Sequence or Activity Diagram ) .
A test case model , sus as Interaction , Slate Machine , Sequence , and Activity Diagram , can be either operational or behavioral .
96
These new capacities of SysML will be detailed through the case study in Section V .
These new capacities of SysML will be detailed through the case study in Section V .
97
</p>
</p>
98
</section>
</section>
99
<section label=" THE CASE STUDY – ENGINE KNOCK CONTROLLER">
<section label=" THE CASE STUDY – ENGINE KNOCK CONTROLLER">
100
<p>
<p>
101
In a four-stroke gasoline engine , air and vaporized fuel are drawn in in the first stroke ( intake ) . 
In a four-stroke gasoline engine , air and vaporized fuel are drawn in in the first stroke ( intake ) . 
102
In the second stroke , fuel vapor and air are compressed and ignited ( compression ) .
In the second stroke , fuel vapor and air are compressed and ignited ( compression ) .
103
Fuel combusts and piston is pushed downwards in the third stroke ( combustion ) and exhaust is driven out in the last stroke ( exhaust ) . 
Fuel combusts and piston is pushed downwards in the third stroke ( combustion ) and exhaust is driven out in the last stroke ( exhaust ) . 
104
The cycle can be seen in the left of the Figure 4 .
The cycle can be seen in the left of the Figure 4 .
105
In practice , ignition usually occurs before the end of the second stroke in order to maximizing power and fuel economy and minimize exhaust emission . 
In practice , ignition usually occurs before the end of the second stroke in order to maximize power fuel economy and minimize exhaust emission . 
106
Under some circumstances , when the temperature and pressure of the unburned air/fuel mixture exceeds a critical level , a second auto-ignition occurs as shown in the right of the Figure 4 . 
When the temperature and pressure of the unburned air/fuel mixture exceeds a critical level , a second auto-ignition occurs as shown in the right picture in Figure 4 . 
107
The two-flame crossing produces a shock wave with rapid increase in cylinder pressure . 
The two-flame crossing produces a shock wave with rapid increase in cylinder pressure . 
108
The impulse caused by the shock wave excites a resonance in the cylinder at a characteristic frequency .
The impulse caused by the shock wave excites a resonance in the cylinder at a characteristic frequency .
109
Damages to piston , ring , and exhaust valves can result if sustained heavy knock occurs .
Damages to piston , ring , and exhaust valves could ensue if sustained heavy knock occurs .
110
An appropriate anti-knock control , represented in Figure 5 , is applied to each cylinder at every engine cycle from low engine speed up to the highest engine speed . 
An appropriate anti-knock control , represented in Figure 5 , is applied to each cylinder at every engine cycle at any predetermined speed . 
111
A knock control system consists of one or several noise sensors , and a controller which acquire the noise through the sensors , and computes the correction during the combustion phases of the cylinders . 
A knock control system consists of noise sensors that monitor the noise level , and a controller that computers corrections based on the feeback from noise sensors during the in-cylinder combustion process . 
112
The controller can detect knocks using spectral analysis techniques \CITE . The controller decide to advance or retard the ignition to correct .
Spectral analysis techniques are used to allow the engine controller \CITE to detect knocks and advance or retard the ignition .
113
</p>
</p>
114
</section>
</section>
115
<section label=" REQUIREMENTS ENGINEERING IN THE CASE STUDY">
<section label=" REQUIREMENTS ENGINEERING IN THE CASE STUDY">
116
<subsection label=" The V-model">
<subsection label=" The V-model">
117
<p>
<p>
118
We use the V-model in the Figure 6 to illustrate the requirements engineering phase by phase . 
We use the V-model in the Figure 6 to illustrate the requirements engineering phase by phase . 
119
It begins with the requirement elicitation from the specification document . 
It begins with the requirements elicitation from the specification . 
120
Then requirement are represented in models from architecture level to design level down to the code . 
Then requirements are represented in models from architecture level to design level down to the code . 
121
Verification and validation ( V&V ) are present along the requirement engineering , showing V&V activities in each phase and for each requirement .
Verification and validation ( V&V ) are present along the requirements engineering , showing V&V activities in each phase and for each requirement .
122
</p>
</p>
123
</subsection>
</subsection>
124
<subsection=" Requirements elicitation">
<subsection=" Requirements elicitation">
125
<p>
<p>
126
This phase consists of a list of requirements that can be exploited during the next phases . 
This phase consists of a list of requirements that can be exploited during the next phases . 
127
System engineers , safety experts , and time are needed to build a complete and consistent list of requirement . 
System engineers , safety experts , and time are needed to build a complete and consistent list of requirements . 
128
Most of project’s failure is due to insufficient attentions in this phase , as reported in \CITE .
Most of the project’s failure is due to insufficient attentions in this phase , as reported in \CITE .
129
In MeMVaTEx project , requirements are classified by EAST-ADL levels . 
In the MeMVaTEx project , requirements are classified by EAST-ADL levels . 
130
At each level , requirements are numbered and structured in functional ( F ) and non-functional ( NF ) . 
At each level , requirements are numbered and structured in functional ( F ) and non-functional ( NF ) . 
131
Nonfunctional requirement are classified by categories such as performance ( P ) , safety ( S ) and availability ( A ) . 
Nonfunctional requirements are classified by categories such as performance ( P ) , safety ( S ) and availability ( A ) . 
132
Note that the respects of regulation in automotive domain introduce safety requirements at each level , resulting more complexity in the design and test . 
Note that the respects of regulation in automotive domains introduce safety requirements at each level , resulting more complexity in the design and test . 
133
It also led us to extent the SysML Requirement stereotype to a particular MeMVaTEx Requirement stereotype
It also led us to extend SysML Requirement stereotype to a particular MeMVaTEx Requirements stereotype
134
Table I gives some examples of requirements of the knock controller . 
Table I gives examples of requirements of the knock controller . 
135
Requirements are actually stored in tabular applications like Word or Excel .
Requirements are actually stored in tabular applications such as Word or Excel .
136
</p>
</p>
137
</subsection>
</subsection>
138
<subsection label=" MeMVaTEx stereotype">
<subsection label=" MeMVaTEx stereotype">
139
<p>
<p>
140
The SysML Requirement stereotype as defined by the standard contains a description Text , an identifier ( Id ) and links to other requirements , design element , and test case for each requirement ( see Figure 7 , left ) . 
The SysML Requirement stereotype as defined by the standard contains a description Text , an identifier ( Id ) and links to other requirements , design elements , and test cases for each requirement ( see Figure 7 , left ) . 
141
When taking into accounts other aspects of analysis , verification , and validation , this definition is not detailed enough . 
When taking into accounts other aspects of analysis , verification , and validation , this definition is not detailed enough . 
142
In order to better support the requirements engineering , we have interest in extending this SysML Requirement stereotype by adding new fields .
In order to better support the requirements engineering , we have interest in extending this SysML Requirement stereotype by adding new fields .
143
These fields are described in details in \CITE . 
These fields are described in detail in \CITE . 
144
We call the new stereotype called MeMVaTEx Requirement ( see Figure 7 , right ) .
We call the new stereotype MeMVaTEx Requirement ( see Figure 7 , right ) .
145
</p>
</p>
146
</subsection>
</subsection>
147
<subsection label=" Modeling and traceability">
<subsection label=" Modeling and traceability">
148
<p>
<p>
149
This phase consists of selecting requirements from an upper level and links it to one or many requirements from the lower levels using one of four stereotypes defined above . 
This phase consists of selecting requirements from an upper level and links them to one or many requirements from the lower levels using one of the four stereotypes defined above . 
150
Doing that correctly guarantees the bidirectional traceability from requirement to design and code . 
Doing that correctly guarantees the bidirectional traceability from requirements to design and code . 
151
We show an example of requirement modeling from the Vehicle level to design level in Figure 8 . 
We show an example of requirement modeling from the Vehicle level to design level in Figure 8 . 
152
Requirements are classified by EAST-ADL 2 levels .
Requirements are classified by EAST-ADL 2 levels .
153
In the diagram , the requirements traceability from Vehicle Level to Design Level is shown : AL-F-12 is a functional requirement at the Analysis Level . 
In the diagram , the requirements traceability from Vehicle Level to Design Level is shown : AL-F-12 is a functional requirement at the Analysis Level . 
154
It is derived from the requirement VL-F-9 at Vehicle Level , and then refined to DLF-7 at Design Level . 
It is derived from the requirement VL-F-9 at Vehicle Level , and then refined to DLF-7 at Design Level . 
155
The three requirements are respectively satisfied by KnockCorrection , EngineControl , and ThresholdCalculation blocks 
The three requirements are respectively satisfied by KnockCorrection , EngineControl , and ThresholdCalculation blocks 
156
The basic design of KnockFunction block is sketched in a Block Definition Diagram in the Figure 9 . 
The basic design of KnockFunction block is sketched in a Block Definition Diagram in the Figure 9 . 
157
It show blocks involved and its item flows . 
It show blocks involved and its item flows . 
158
Each block in the KnockFunction can be detailed by using Internal Diagram Block ( IBD ) .
Each block in the KnockFunction can be detailed by using Internal Diagram Block ( IBD ) .
159
</p>
</p>
160
</subsection>
</subsection>
161
<subsection label=" Verification and Validation">
<subsection label=" Verification and Validation">
162
<p>
<p>
163
The V&V is an important phase in software development . 
The V&V is an important phase in software development . 
164
V&V activities concern two aspects :
V&V activities concern two aspects :
165
- Verification of the realization , i.e. did we build the product right? 
- Verification of the realization , i.e. " Did we build the product right? " 
166
It is the analysis of the works that have been done , generally document analysis , code inspection and review , unit and integration testing .
It is the analysis of the works that have been done , including general document analysis , code inspection and review , unit and integration testing .
167
- Validation of the application , i.e. did we build the right product? 
- Validation of the application , i.e. " Did we build the right product? "
168
This is a test phase whose objective is to show that intended services are fulfilled . This test phase is realized on the product .
This is a test phase whose objective is to show that intended services are fulfilled . This test phase is realized on the product .
169
In MeMVaTEx project , it is needed that V&V activities must link to and test each requirement as requested by safety regulations . 
In the MeMVaTEx project , it is needed that V&V activities must link to and test each requirement as requested by safety regulations . 
170
We show a test case , represented by an activity diagram in the Figure 10 , planned for the requirement like DL-NF-1 “The capture must end when the Knock Acquisition Window Duration has elapsed " . 
For example , the test case represented by an activity diagram in Figure 10 is intended to test such requirement as . 
171
In this case , the internal structure of the capturing block and how it works may be known by the tester . 
In this case , the internal structure of the capturing block and the way it works may be known to the tester . 
172
This kind of test is called white-box testing .
This kind of test is called white-box testing .
173
There are also functional requirements such as AL-F-10 “Knock control function shall know the piston position in order to measure and correct the knock on the right cylinder ."
There are also functional requirements such as the AL-F-10 .
174
In this case , tester may have no knowledge of the internal structure of the knock control block . 
In this case , the tester may have no knowledge of the internal structure of the knock control block . 
175
This kind of test is known as black-box testing . 
This kind of test is known as black-box testing . 
176
Input data is sent to the structure and the output is compared to expected output , giving the verdict . 
Input data are sent to the structure and the output are compared to the expected output to giving the verdict . 
177
This test can be resumed in the Figure 11 .
This test in Figure 11 .
178
</p>
</p>
179
</subsection>
</subsection>
180
<subsection label=" Framework tools">
<subsection label=" Framework tools">
181
</p>
</p>
182
Tools are listed in refer to the V-model . 
Tools are listed in reference to the V-model . 
183
On the left branch , requirement management ( RM ) tools like Telelogic DOORS \CITE , IBM RequisitePro \CITE , or TNI Reqtify \CITE are used in projects with large number of requirement . 
On the left branch , requirements management ( RM ) tools like Telelogic DOORS \CITE , IBM RequisitePro \CITE , or TNI Reqtify \CITE are used in projects with a large number of requirements . 
184
They have the capacities of managing and tracing requirement and support team’s corporation .
They have the capacities managing tracing requirement , and support the team’s corporation .
185
Major modeling tools such as Telelogic Rhapsody \CITE , IBM Rational \CITE , or ARTiSAN Studio \CITE support UML/SysML and have the capacities to import specific profiles . It can also export models into an interchangeable format .
Major modeling tools such as Telelogic Rhapsody \CITE , IBM Rational \CITE , or ARTiSAN Studio \CITE support UML/SysML and have the capacities to import specific profiles . It can also export models into an interchangeable format .
186
</Fig>
</Fig>
187
Simulink is a prime tool at the implementation level .
Simulink is a prime tool at the implementation level .
188
Simulink gives the most details descriptions of a functional block . 
Simulink gives the most details descriptions of a functional block . 
189
Simulink and its tool suite can generate code and test cases , and verify the design by simulation .
Simulink and its tool suite can generate code and test cases , and verify the design by simulation .
190
On the right branch , the validation can be reinforced by running software on simulator ( software-in-the-loop , SIL ) or by injecting code on dedicated hardware then running simulation ( hardware-in-the-loop , HIL ) \CITE . 
On the right branch , the validation can be reinforced by running software on simulator ( software-in-the-loop , SIL ) or by injecting code on dedicated hardware then running simulation ( hardware-in-the-loop , HIL ) \CITE . 
191
Finally , a prototype testing validates the product . 
Finally , a prototype testing validates the product . 
192
The validation is enterprise and proprietary solution
The validation is an enterprise and proprietary solution .
193
In the MeMVaTEx project , there are about many hundreds requirements for the knock controller . 
In the MeMVaTEx project , there are about many hundreds of requirements for the knock controller . 
194
It can be managed using only Office applications like Word and Excel . 
It can be managed using only Office applications like Word and Excel . 
195
The use of RM like Reqtify or DOORS is planned for future use when the number of requirements is big enough .
The use of RM such as Reqtify or DOORS is planned for future use when the number of requirements is big enough .
196
Modeling is done using ARTiSAN Studio . 
Modeling is done using ARTiSAN Studio . 
197
For particular purpose , we need EAST-ADL profile and MARTE \CITE , an-other UML profile for real-time modeling . 
For this particular purpose , we need the EAST-ADL profile and MARTE \CITE , an-other UML profile for real-time modeling . 
198
These profiles are imported into ARTiSAN Studio . 
These profiles are imported into ARTiSAN Studio . 
199
ARTiSAN can connect to RM tools to import requirements from or export traceability or requirement tables as seen in Figure 13 .
ARTiSAN can be connected to RM tools to import requirements and export traceability or requirement tables as seen in Figure 13 .
200
At implementation level , ARTiSAN introduces an integration with Simulink models that will give systems engineers the ability to define and simulate function block diagrams in Simulink and export them into a SysML model in ARTiSAN for ongoing development and maintenance .
At the implementation level , ARTiSAN introduces an integration with Simulink models that will give systems engineers the ability to define and simulate function block diagrams in Simulink and export them into a SysML model in ARTiSAN for ongoing development and maintenance .
201
For now , test cases are generated manually and the use of many validation tools is under consideration .
For now , test cases are generated manually and the use of many validation tools is under consideration .
202
</p>
</p>
203
</subsection>
</subsection>
204
</section>
</section>
205
<section label=" CONCLUSION">
<section label=" CONCLUSION">
206
<p>
<p>
207
Actual context in developing software for embedded electronics raises challenges of managing the complexity of software while still guaranteeing the quality and productivity .
The actual context in developing software for embedded electronics raises challenges of managing the complexity of software while still guaranteeing the quality and productivity .
208
Automotive industry introduces many standards as a base from which automotive actors will compete on implementing software using proper process and methodology . 
The automotive industry introduces many standards as a base from which automotive actors will compete on implementing software using proper processes and methodologies . 
209
This paper presents requirements engineering in a model-based methodology proposed by the project MeMVaTEx .  
This paper presents requirements engineering in a model-based methodology proposed by the MeMVaTEx project .  
210
in order facilitate the requirements validation and traceability . 
In order to facilitate the requirements validation and traceability . 
211
The methodology is structured by EAST-ADL abstraction levels and benefits from the systems modeling SysML . 
The methodology is structured by EAST-ADL abstraction levels and benefits from the SysML systems modeling . 
212
By a case study , we show the engineering of requirement through different phases and suggest tools for each phase .
By conducting a case study , we demonstrate the engineering of requirements through different phases and suggest tools for each phase .
213
Software using these standards is planned to be implemented in real car from 2010 \CITE . 
Software using these standards is planned to be implemented in real cars from 2010 \CITE . 
214
Processes and tools for software may change or emerge by then . 
Processes and tools for software may change or emerge by then . 
215
MeMVaTEx methodology is not definitive but open for changes and evolution before a seamless solution is reached .
MeMVaTEx methodology is not definitive but open for changes and evolution before a seamless solution is reached .
216
</p>
</p>
217
</section>
</section>
218
</document>
</document>
