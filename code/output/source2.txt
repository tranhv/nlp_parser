This paper analyzes the effects of structural variation of sentences on parsing performances .
We examined the performances of both shallow and deep parsers for two sentence constructions : imperatives and questions .
The target parsers are adapted to the sentences for these constructions extracted from fiction and query texts .
The analysis of the experimental results will illustrate the necessity for handling various sentence constructions by fundamental improvement of parsers such as re-construction of feature designs .
Parsing is a fundamental natural language processing task and essential for various NLP applications .
Recent research on parsing technologies has achieved high parsing accuracies on the same domains as the training data , but once we move to unfamiliar domains , the performances decrease at unignorable levels .
To address this problem , previous work has mainly focused on adapting lexical or syntactic preferences to the target domain , that is , on adding lexical knowledge or adjusting probabilistic models for the target domain using available in-domain resources \CITE .
Behind their approaches , there seems to be an assumption that grammatical constructions are not largely different among domains or do not affect parsing systems , and therefore the same parsing system can be applied to a novel domain .
However , there are some cases where we cannot achieve as high parsing accuracies as parsing the Penn Treebank just by re-training or adaptation .
For example , the parsing accuracy for the Brown corpus is significantly lower than for the WSJ portion of the Penn Treebank , even when re-training the parser with much more in-domain training data than other successful domains .
This research attempts to identify the cause of these difficulties , and focuses on two types of sentence constructions which were not extensively studied in the recent parsing research : imperatives and questions .
In these constructions , words in some syntactic positions disappear or the orders of words change .
We analyze how such sentences affect the parsing behavior and then attempt to clarify the difficulties in parsing imperatives and questions .
In order to do so , we prepare an annotated corpus for each of the two sentence constructions by borrowing sentences from fiction and query domains .
In the experiments , parsing accuracies of two shallow dependency parsers and a deep parser are examined for imperatives and questions , as well as the accuracies of a part-of-speech tagger for them .
A conventional supervised adaptation technique was applied to these parsers and to the POS tagger .
Since domain adaptation has been an extensive research area in parsing research \CITE , a lot of ideas have been proposed , including un- / semi-supervised approaches \CITE and supervised approaches \CITE .
Their main focus was on adapting parsing models trained with a specific genre of text ( in most cases Penn Treebank WSJ ) to other genres of text , such as biomedical research papers and broadcast news .
A major problem tackled in such a task setting is the handling of unknown words and domain-specific ways of expressions .
However , parsing imperatives and questions involves a significantly different problem ; even when all words in a sentence are known , the sentence has a very different structure from declarative sentences .
Compared to domain adaptation , structural types of sentences have gained little attention to date .
A notable exception is the work on QuestionBank \CITE .
The work pointed out low accuracy of state-of-the-art parsers on questions , and proposed supervised parser adaptation by manually creating a treebank of questions .
The question sentences are annotated with phrase structure trees in the Penn Treebank scheme , although function tags and empty categories are omitted .
QuestionBank was used for the supervised training of an LFG parser , and achieved a significant improvement in parsing accuracy .
They collected question sentences from TREC 9-12 competitions , and annotated these sentences with POSs and CCG lexical categories .
They reported a significant improvement in CCG parsing without phrase structure annotations .
Our work further extends \CITE and \CITE , while covering a wider range of sentence constructions .
Although QuestionBank and the resource of \CITE are claimed to be a corpus of questions , they are biased because the sentences come from QA queries .
For example , such queries rarely include yes / no questions and tag questions .
In our work , sentences are collected from the Brown corpus , which includes a wider range of types of questions and imperatives .
In the experiments , we will additionally use QuestionBank for comparison .
We examined the performance of two dependency parsers and a deep parser on the target text sets .
All parsers assume that the input is already POS-tagged .
We use a tagger in \CITE .
The MST parser and Malt parser are dependency parsers that produce non-projective dependency trees , using the spanning tree algorithm \CITE and transition-based algorithm \CITE respectively .
Although the publicly available implementation of each parser also has an option to restrict the output to be a projective dependency tree , we used the non-projective version because the dependency structures converted from the question sentences in the Brown corpus included many non-projective dependencies .
We used pennconverter \CITE to convert a PTB-style treebank to dependency trees .
For the evaluation of the output from each of the MST and Malt parser , we used the labeled attachment accuracy excluding the punctuations .
The Enju parser \CITE is a deep parser based on the HPSG formalism .
It produces an analysis of a sentence that includes the syntactic structure ( i.e. , parse tree ) and the semantic structure represented as a set of predicate-argument dependencies .
We used a toolkit distributed with the Enju parser for training the parser with a PTB-style treebank .
The toolkit initially converts the PTB-style treebank into an HPSG treebank and then trains the parser on it .
The HPSG treebank converted from the test section was used as the gold-standard in the evaluation .
As the evaluation metrics of the Enju parser , we used labeled and unlabeled precision / recall / F-score of the predicate-argument dependencies produced by the parser .
This section explains how we collected the treebanks of imperatives and questions , which were used in the experiments in Section \REF .
Penn Treebank 3 contains treebanks of several genres of texts .
While the Wall Street Journal ( WSJ ) treebank has extensively been used for parsing experiments , we use the treebank of the Brown Corpus in our experiments .
Because the Brown Corpus portion includes texts of literary works , it is expected that it inherently contains a larger number of imperatives and questions than the WSJ portion .
The Brown Corpus portion of Penn Treebank 3 is annotated with phrase structure trees as in the Penn Treebank WSJ .
Interrogative sentences are annotated with the phrase label " SBARQ " or " SQ " , where " SBARQ " represents wh-questions , while " SQ " denotes yes / no questions .
Imperative sentences are annotated with the phrase label " S-IMP " .
We extracted those sentences annotated with these phrase labels .
Imperatives and questions appear not only at the top level but also appear as embedded clauses .
We extracted such embedded questions and imperatives as well .
When they are embedded in another imperative or question , we only extracted the outermost one .
Extracted sentences are post-processed so that they have natural sentence forms : first characters are capitalized , and question marks or periods are added when appropriate .
As a result , we extracted 750 imperative sentences and 1 ,241 question sentences from 24 ,243 sentences .
Examples of extracted sentences are shown in Figure \REF .
The number of sentences for each section is shown in Table \REF .
Although we also applied a similar method to the WSJ portion , we could obtain only 115 imperatives and 432 questions .
We will not use this data in the experiments .
As we will describe below , we additionally use QuestionBank in experiments .
However , an advantage of using the Brown treebank is that it includes annotations of function tags and empty categories . Therefore , we can apply the Penn Treebank-to-HPSG conversion program of Enju \CITE , which relies on function tags and empty categories .
Hence , we will show experimental results on Enju only with the Brown data .
It should also be noted that , a constituency-to-dependency converter , pennconverter \CITE , provides more accurate conversion when function tags and empty categories are available ( See footnote 6 ) .
QuestionBank consists of question sentences as well as a small number of imperative and declarative sentences .
We extracted 3 ,859 sentences that are annotated with " SBARQ " or " SQ " .
During experiments , we found several annotation errors that caused fatal errors of treebank conversion .
We therefore corrected annotations of twelve sentences manually .
We plan to make these corrections publicly available .
Examples of the annotation errors include brackets enclosing empty words and undefined or empty tags .
We also found and corrected obvious inconsistencies in the corpus : character " ' " replaced by " $<$ " ( 737 sentences ) , token " ? " tagged not with " . " but with " ? " ( 2 ,051 sentences ) , and phrase labels annotated as POS ( one sentence ) .
We examined performances of the three parsers and the POS tagger for Brown imperatives and questions , and QuestionBank questions .
By observing the effects of parser or tagger adaptation to each domain , we would like to see the difficulties in parsing imperative and question sentences .
We also examined the portability of sentence construction properties between two similar domains : questions in Brown and QuestionBank .
We made experimental datasets for five domains : Wall Street Journal ( WSJ ) , Brown overall sentences , Brown imperatives , Brown questions , and QuestionBank questions .
WSJ ( 43 ,948 sentences )
- Divided into three parts for training ( Section 02 - 21 , 39 ,832 sentences ) , development test ( Section 22 , 1 ,700 sentences ) , and final test ( Section 23 , 2 ,416 sentences ) .
Brown overall ( 24 ,243 sentences )
- Randomly divided into three parts for training ( 19 ,395 sentences ) , development set ( 2 ,424 sentences ) , and final test ( 2 ,424 sentences )
Brown imperatives ( 750 sentences )
- divided into two parts : one for ten-folds cross validation test ( 65 $\times$ 10 sentences ) and the other for error analysis ( 100 sentences )
Brown questions ( 1 ,241 sentences )
- divided into two parts : one for ten-folds cross validation test ( 112 $\times$ 10 sentences ) and the other for error analysis ( 141 sentences )
QuestionBank questions ( 3 ,859 sentences )
- from the top of the corpus divided into three parts for final test ( 1 ,000 sentences ) , training ( 2 ,560 sentences ) , and analysis ( 299 sentences )
In order to adapt each parser or POS tagger to a target domain , we trained the parser on combined training data for the target domain and for the original parser .
For a domain which contains only small training data , we replicated the training data for certain times and just utilized the concatenated replicas for training .
POS tagger
- For Brown overall , we trained the model with the combined training data for the target domain and for the original model .
For Brown imperatives / questions and QuestionBank , we replicated the training data for certain times and utilized the concatenated replicas and WSJ training data for training .
For POS tagger , the number of replicas of training data was determined among 1 , 2 , 4 , 8 , 16 , 32 , 64 , and 128 , by testing these numbers on development test sets in three of ten datasets of cross validation .
MST and Malt parser
- For Brown overall and QuestionBank questions , we trained the model on combined data for the target domain and for the original model .
For Brown imperatives and questions , we replicated the training data for ten times and utilized the concatenated replicas and WSJ training data for training .
Enju parser
- We used a toolkit in the Enju parser \CITE
Table \REF shows the POS tagging accuracies for the target domains .
When we applied WSJ tagger to other domains , the tagging accuracy more or less decreased .
Among them , for Brown overall sentences , the accuracy did not decrease much from WSJ .
However , for imperatives and questions , the POS tagger accuracy decreased significantly .
The table shows the adaptation could improve the tagging accuracy to some extent , while the table also shows that the improved accuracy for the imperatives and questions could not reach eventhe accuracy of adapted tagger for Brown overall .
Figure \REF shows the POS tagging accuracy for the target domains given by changing the size of the target training data .
This graph shows that for both types of sentences , first 300 training sentences improved the accuracy rapidly , and after that , the effect of adding training corpus declined .
In order to recover the tagging accuracy of the WSJ tagger for WSJ ( 97 .53\% in Table \REF ) , it would not seem to be enough only to prepare much more training data .
Especially , the problem would be more serious for imperatives .
We then explored the tagging errors in each domain in order to observe what types of errors the WSJ tagger gave and what types of errors were solved or still unsolved by the adapted taggers .
Table \REF , \REF , and \REF show the most frequent tagging errors given by the WSJ tagger / adapted tagger for Brown questions , Brown imperatives , and QuestionBank respectively .
In the tables , we could find that the major errors of the WSJ tagger for the Brown domains were the mis-tagging to verbs , that is , " VB \SPEC " .
We then analyzed why each of such errors had occurred .
For Brown imperatives , the WSJ tagger gave two major tagging errors : " VB \SPEC NN( P ) " and " VB \SPEC VBP " .
These two types of errors would respectively come from the following differences in sentence constructions between WSJ declarative and the Brown imperative sentences .
Firstly , declarative sentences normally begin with noun phrases while imperative sentences normally begin with verb phrases .
The WSJ tagger was trained on the domain mainly consisting of declarative sentences , and the training was based on N-gram sequences of words or POSs . The tagger therefore preferred to give noun phrase-derived tags to the beginning of a sentence .
Secondly , main verbs in imperative sentences take base forms while main verbs in declarative sentences take the forms according to tense .
The problem is that , for present tense except for third person singular , verbs in the declarative sentences always take the same appearances as the base forms , while the tags are different : VBP and VB .
The WSJ tagger mainly based on declarative sentences therefore prefer to give VBP tags to main verbs .
After adapting the tagger to Brown imperatives , the N-gram model of tagger would have learned that the first word in a sentence tends to be a verb , and the main verb tends to take base form ( VB ) .
Table \REF shows that the above two types of errors did decrease to some extent . However , we can also observe that not a few mis-tags to verbs were still left after the adaptation .
When we observe each of the left errors around VB , we found that several errors still occurred even in simple imperative sentences such as " VB \SPEC NN " for " Charge " in " Charge something for it . " , and that some errors tended to occur after to-infinitive phrase or conjunction , such as " VB \SPEC NN " for " subtract " in " To find estimated net farm income , subtract . . . "
The former type of errors might be solved by increasing the training data , while the latter type of errors would not be easily solved with the model based on word N-gram which cannot detect the existence of long phrases .
We also analyzed the errors in Brown questions and QuestionBank , and again found that the WSJ tagger seems to make many errors due to the fact that the tagger was trained on a corpus mainly consisting of declarative sentences .
After the adaptation , while some of the errors such as special usage of wh-words , i.e. , " WDT \SPEC WP " , were corrected , we found that some kinds or errors related to the global change of sentence structures still remained .
In order to give correct tags to words both in imperatives and questions , we might have to consider richer information than only N-gram based features , such as long distance dependencies or phrases .
Table \REF shows the parsing accuracies of MST( first order ) , MST( second order ) , Malt , and Enju parser for WSJ , Brown overall , Brown imperatives and Brown questions .
Figure \REF shows the parsing accuracies against the training data size of the four parsers for WSJ , Brown imperatives , Brown questions , and QuestionBank .
Note that , since training MST parser ( second order ) on Brown overall , Brown questions , and QuestionBank could not be completed in our experimental environments , the parsing accuracies represented by the bracketed hyphens in Table \REF could not be measured and we could not draw full graphs of second order MST for Brown questions and QuestionBank in Figure \REF .
When we adapted the parser model ( see fifth column in Table \REF ) , the parser could give two to four points higher accuracies for each of the Brown domains than the WSJ parser .
For the QuestionBank , 25 to 35 points accuracy improvements were observed .
Figure \REF shows that , the improvements increased according to the size of the training data , and the tendencies would not seem to converge .
This would suggest that lower accuracies than the WSJ parser for WSJ would be still brought by the lack of training data .
In Figure \REF , when we focus on the QuestionBank where we could use much more training data than Brown questions , the parser accuracies were approaching the accuracies of WSJ parser for WSJ or exceeded the accuracy .
However , we have no more training data for Brown imperatives and questions . We should prepare more training data or explore approaches to enable us to sufficiently adapt parsers with small training data .
In order to capture the outline of the adaptation effects , we observed error reduction for the Malt parser .
Table \REF and \REF show the recall errors on labeled dependencies which were observed more than ten times for 100 analysis sentences of each domain .
For each dependency shown in the first column , the second and third columns show the number of parsing errors by the WSJ parser with gold tags and the adapted parser with gold tags .
Since ROOT dependencies , that is , heads of sentences would be critical to construction of sentences , we mainly focus on that type of errors .
For Brown imperatives and questions , we could observe that the reduction of ROOT dependency was prominent .
When we focus on this type of errors , we could find that the WSJ parser could often make mistakes in parsing sentences which began or ended with the names of persons who were talk to .
For example in Brown imperatives , for the sentence " See for yourself , Miss Zion . " , the WSJ parser regarded the person name " Zion " as ROOT , and the main verb " See " as modifiers of the name .
The adapted parser could then correctly give ROOT to the main verb .
We could also often find that the WSJ parser could often make mistakes in parsing sentences containing quotation , exclamation , and question marks , such as " " Hang on " !! " " or " Why did you kill it " ? ? " or " " " " .
For such sentences , the WSJ parser regarded the first " ! " or " ? " as ROOT , and " Hang " or " did " as the modifier of the marks .
We thought that this kind of errors would partly come fromthe Brown corpus itself . The exclamation or question marks should be inside the quotation , while the Brown corpus usually put the marks outside .
However , the adapted parser could take in such doubtful construction and gave ROOT to the main verbs as the corpus required .
On the other hand , we also observed some still unsolved errors . We would show the two kinds of major errors among them .
First , Brown imperatives and questions , include many conversation sentences , and therefore rather flexible constructions could be observed especially for imperatives , such as " Lift , don't shove lift! " , " Come out , come out in the meadow! " , etc.
The parsing models based on the plausibility of constructions could hardly capture such sentences .
Second , when the different constructions of sentences were in one sentence , such as , the case where to-infinitive phrases or subordinate clauses precede imperatives and questions , the parser would often be confused .
For example , for the imperative sentence " To find estimated net farm income , subtract estimated annual farming expenditures . . . " , both of the WSJ and adapted parsers regarded " find " as ROOT , because the parsers regarded the words following " find " as a that-clause complement for the " find " , like " To find [ ( that ) estimated net farm income , subtract estimated annual farming . . .] " .
It would be difficult for the parsers to know where the main clause in such complex sentences .
This type of errors would hardly be solved only by increasing the training data .
Imperatives or questions sentences consist not only of pure imperative or question clause , but also of other constructions of phrases or clauses .
The parser would parse such complex sentences without partition into each construction , and therefore it would sometimes be confused .
Both of Brown questions and QuestionBank are in the domain of question .
In this section , we examined whether the parser adapted to one domain would be portable to the other domain .
QuestionBankdoes not give function tags , and therefore in training and evaluation of the parsers , abstracted dependencies were extracted from the corpus .
Therefore , the parser adapted to one domain could not give correct dependency labels on such functions for the other domain .
However , we would be able to expect that sentence constructions would be basically common and portable between two domains , which would contribute to give correct boundary for phrases and therefore the correct dependencies in phrases would be introduced by the adaptation .
Table \REF shows the parsing or tagging accuracies of each parser and the POS tagger for Brown questions and QuestionBank .
the difference from Table \REF was that the parsers and the tagger were adapted to another question domain .
The table shows that the parsers adapted to Brown questions improved the parsing accuracies for QuestionBank , while the parsers adapted to QuestionBank decreased .
Table \REF could explain the result .
With Brown questions , we could learn wh-questions which QuestionBank mainly contain , while with QuestionBank , we could not we could not learn yes-no questions which more than half of Brown corpus contain .
A question domain contains various types of questions and gives various sentence constructions .
In order to parse questions correctly , we should capture each of them correctly .
This type of problem would not be noticed so much when we were working mainly on declarative sentences .
Through the experiments on various parsers we observed that simple supervised adaptation methods are insufficient to arrive at theparsing accuracy comparable to that of declarative sentences .
This observation holds both for POS tagging and syntactic parsing , and itindicates that we need fundamental improvement of parsers , such as re-constructing feature designs or changing parsing models .
Following the present work , future work should include investigating parsing frameworks that are robust for sentences with various sentence constructions , and / or methods that can effectively adapt a parser to different sentence constructions including imperatives , questions , and more .
While word segmentation is a necessary step to process languages like Chinese and Japanese , its effects on Statistical Machine Translation ( SMT ) have not been discussed intensively in such languages .
In this paper , we investigate the effects of word segmentation methods on SMT , by comparing evaluation results of translation outputs while varying word segmentation methods .
Additionally , meta-evaluations of evaluation metrics are also provided to investigate validity of the metrics .
The experiments revealed that supervised morphological analyzers were competitive , and considerably better than an unsupervised analyzer and a heuristic segmentation method .
However , a character-based segmentation has achieved 10 .27 positive and 1 .95 negative differences in word-based and character-based BLEU , depending on corpus sizes and domains .
For this result we discuss the problem of the comparability of evaluation metrics and the possibility of better word segmentation than popular supervised morphological analyzers .
Several natural languages like Chinese and Japanese do not have to put spaces between words in their written forms .
In order to process such languages , we need to tokenize each sentence .
This process is called word segmentation .
Since the process is fundamental and indispensable , we need to explore how word segmentation affects Natural Language Processing applications .
Therefore , we investigate how Japanese word segmentation affects on SMT between English and Japanese , by comparing various word segmentation methods and evaluation metrics .
The word segmentation methods includes both standard Japanese morphological analyzers and several heuristic methods .
We also examine an unsupervised morphological analyzer and its results .
In addition , we focus on the meta-evaluation of the current evaluation metrics and find whether the metrics are consistent or not , when we vary word segmentation methods .
Al-Haj and Lavie ( 2012 ) compared 12 heuristic word segmentation methods based on outputs of a standard Arabic POS tagger , and found the optimum combination in terms of BLEU on English-Arabic SMT .
They acquired the 2 .3 score improvement from the worst to the best combinations .
Wang et al.
( 2010 ) suggested a new short unit word segmentation standard in Chinese which defines a more frequent string subset as a word .
For instance , They separated one word " 全球化 globalization " into two words " 全球 global " and " 化 -lization " .
By this standard , they obtained 1 .0 BLEU score improvement within Chinese-Japanese SMT .
Though , they have not discussed about BLEU is a good metric for such an evaluation of word segmentation .
In addition , comparison of morphological analyzers are necessary because different analyzers produce different outputs to SMT .
Therefore , we conduct several translation tasks between English and Japanese .
We measure the qualities of Japanese morphological analyzers and compare them with other word segmentation methods .
We also investigate consistencies of evaluation metrics by comparing results .
This work aims to empirically compare representative word segmentation methods in terms of SMT quality .
The following experiments are designed in order to answer these questions :
- How a variety of word segmentation methods ( supervised morphological analysis , unsupervised segmentation , and heuristic methods ) affect SMT evaluation metrics , depending on corpus sizes and domains .
- Whether or not SMT evaluation metrics provide a consistent measure while varying word segmentation methods .
We setup word segmentation methods , corpora , and evaluation metrics as three parameters of our experiments to see the effects of Japanese word segmentation on SMT .
As shown in Table 1 , the following word segmentation methods output delimiters ( " | " represents a delimiter ) for a given input character sequence .
The most popular method for Japanese word segmentation is to apply a morphological analyzer to obtain morpheme-based segmentation .
It is , however , not clear which analyzer works better for the SMT task than the other analyzers .
Therefore , we use four representative morphological analyzers and compare them :
- KyTea predicts word segmentation delimiters by pointwise prediction ( Neubig et al. , 2011 ) , using linear Support Vector Machine or logistic regression .
- MeCab regards word segmentation as a sequence labeling problem .
It uses Conditional Random Field for learning ( Kudo et al. , 2004 ) .
- JUMAN also regards word segmentation as a sequence labeling , but it decides the minimum cost paths without machine learning , from segmentation and association costs in human annotated lexicons and automatically generated Web lexicons .
The accuracy of supervised morphological analyzers KyTea , MeCab , and JUMAN is reported to be over 98\% for news text .
On the other hand , the unsupervised method latticelm achieved 66 .6% accuracy ( Mochihashi et al. , 2009 ) for human annotated news text , while the method does not have any answers of word definitions .
Therefore , it is not possible to compare such a result with the supervised results . Even though , it is fair to compare it with SMT contribution point of view .
Furthermore , their policies about word segmentation definitions are very much different .
While MeCab can change its definitions by external lexicons and JUMAN has its own internal standard , KyTea is based on the short unit standard of Balanced Corpus of Contemporary Written Japanese , which is considered one of the shortest definitions of Japanese words .
For example , if we are given a string " 見れば( if someone see ) " , MeCab separates it into two words " 見れ | ば " and JUMAN keep the same string , but KyTea outputs it as three words " 見 | れ | ば " where every character is a word .
In the case of latticelm , as it has no supervised definition of words , it uses the expectation maximized length of words for every word depending on training data .
We also investigate such morphological analysis accuracy and word definition problems in our experiments .
Chang et al.
( 2008 ) suggested that word segmentation consistency and granularity can be important factors for SMT .
Therefore , we introduce two heuristic methods for Japanese word segmentation .
One is segmentation by character category ( CAT ) , and the other is segmentation by characters ( CHAR ) .
CAT puts a word boundary when character categories change .
Character categories in Japanese include : Kanji ( Chinese character ) , Hiragana , Katakana , Latin alphabet , numeral digit , multi-byte alphabet , multi-byte digit , and other tokens .
The CHAR method considers every Unicode character as a word as proposed by Xu et al.
( 2004 ) .
We use two news corpora : Reuters corpora ( REUTERS ) and Japanese-English News Article Alignment Data ( JENAAD ) ( Utiyama and Isahara , 2003 ) .
Another corpus we use in the experiments is a Wikipedia corpus , Japanese-English Bilingual Corpus of Wikipedia 's Kyoto Articles 2 .01 ( WIKIPEDIA ) .
From these corpora , we prepared three data sets as explained below .
In the case of REUTERS , we have used all 56 ,282 sentences .
Then , we split the data into three parts : the first 1 ,000 as the test , the next 500 as the development , and the rest 55 ,282 as the training data .
In this data , we have combined JENAAD and REUTERS news corpora to get one news corpus .
We have used all 56 ,282 and 150 ,000 sentences respectively .
For each corpus , we divide it into the first 1 ,000 , the next 500 , and the rest for test , development , and training .
We have gathered 2000 , 1000 , and 203 ,782 sentences for test , development , and training , respectively , in total .
Firstly , since the WIKIPEDIA corpus is a multi-category XML dataset , we have sorted them by the DOCID in the ascending order and by the document categories LTT , EPR , FML , BDS , CLT , BLD , GNM , SCL , ROD , SNT , PNM , HST , RLW , and SAT .
Secondly , we parsed it by xml .etree .ElementTree .parse of Python 2 .7 .2 , and obtained 477 ,036 sentence pairs without parsing errors .
Thirdly , sentence pairs that include a character " | " in English or Japanese are removed because it caused a problem with Moses .
Finally , we obtained 477 ,012 sentence pairs in total .
In order to adjust the balance of the domains , we have sampled the data twice : First we extract the first line for every 477 lines .
After this , we have merged the remaining 476 ,012 lines and from this extract the first line for every 952 lines .
Finally , we have obtained 1 ,000 test , 500 development , and 475 ,512 training data .
We have launched two word-based evaluation methods : BLEU ( Papineni et al. , 2002 ) with 4-gram setting and RIBES ( Isozaki et al. , 2010a ) , which has been reported to have a much higher correlation to human evaluation than BLEU within English-Japanese translation tasks ( Sudoh et al. , 2011 ) .
Currently , the most popular way to evaluate Statistical Machine Translation is to use word-based evaluation metrics such as BLEU and RIBES .
However , these word-based evaluation metrics have a problem on independency of word segmentation evaluations .
If we do not have segmented reference and test data , we cannot evaluate outputs by word-based evaluation metrics .
For example , in the case of English-Japanese translations , we must tokenize reference data to evaluate SMT outputs .
On the other hand , in the case of Japanese-English translations , we must tokenize test data to evaluate the outputs .
As a result , we need to tokenize every sentence by word segmentation before evaluation , and it is hard to independently evaluate the effects of word segmentation on training data .
It is also possible to detokenize SMT outputs first , and then tokenize them by the shared word segmentation .
However , our preliminary experiments showed that the results obtained with this method were not independent from word segmentation of training data .
And the best results were obtained when we use the same word segmentation as the training data .
Hence , this problem remains if we keep our word-based evaluations .
In order to manage such a problem , we use one character-based metric BLEU in Characters ( De-noual and Lepage , 2005 ) with 4-gram .
As this method evaluates the character-level information , outputs are not required to be segmented and it is free from word segmentation variations .
We have conducted English and Japanese machine translation in both directions by the following steps :
1Apply the Head-Finalization ( Isozaki et al. , 2010b ) to English text in the case of English-Japanese translation .
2Run Japanese word segmentation methods and a normalization script which was introduced by the NTCIR-9 PATMT task .
3Tokenize and lowercase English text by Moses' tokenizer and lowercase scripts .
4Create language models from target languages' training data , with SRILM 1 .5 .12 .
5Create translation models with Giza++ 1 .0 .5 ( 2011-09-24 ) .
6Decode source test data with Moses ( 2010-08-13 ) .
7Compute evaluation scores of the outputs .
We used Enju 2 .4 .2 ( Miyao and Tsujii , 2005 ) and Head Finalization ( Isozaki et al. , 2010b ) to preprocess English data .
This method enabled more accurate translations within English-Japanese translations than the conventional settings .
We have applied the following Head Finalization rules from ( Su-doh et al. , 2011 ) :
- Reverse each phrase 's word orders when the phrase does not end with a head .
- Exclude coordination from reversing
- Convert plural nouns to singular forms
- Remove articles " a " , " an " , and " the "
- Insert pseudo-particles _va0 , _va1 , and _va2 .
For the pseudo-particles , we use the following insertion rules ( arg1 and arg2 are swapped when the head verb 's voice is passive ) :
- Add _va0 after the arg1 entry of the sentence head verb
- Add _va1 after arg1 entries of other verbs
- Add _va2 after arg2 entries of all verbs
Table 2 and Table 3 show the English-Japanese and Japanese-English evaluation results .
The best scores in each evaluation metrics are highlighted for each data set .
All evaluation metrics have been used in both directions between English and Japanese , to measure consistency and sufficiency of the metrics in the language pair .
In this case , the evaluation scores created by BLEU and RIBES are not comparative due to the differences of Japanese word definitions between the outputs of word segmentation methods .
Furthermore , the CHAR scores in BLEU and BLEU in Characters should be regarded as almost same while small changes have been introduced due to statistical errors and the differences in the methods how to treat space characters .
We found that the three supervised morphological analyzers KyTea , MeCab , and JUMAN were much higher than latticelm and CAT , and were competitive .
For instance , on REUTERS in Table 2 , BLEU scores were ranged from 27 .88 to 29 .53 , while latticelm was 15 .28 and CAT was 22 .10 .
The unsupervised morphological analyzer latticelm and one of heuristic methods CAT were worse than our expectations .
These two were the worst or the second worst results in all settings .
The results of CHAR were counterintuitive and yet to be discussed .
It was relatively much better than the supervised morphological analyzers in BLEU .
Besides , it was almost competitive in RIBES and BLUE in Characters .
For example , CHAR achieved the best 38 .42 score in BLEU on REUTERS , but the second best KyTea was 29 .53 .
In the case of BLEU in Characters on REUTERS , CHAR achieved 38 .61 , while the worst supervised result was KyTea 's 39 .82 .
In this case , the evaluation scores are lower than English-Japanese translations in general .
It is because Japanese-English translations are conducted without Head-Finalization .
Again , the supervised morphological analyzers KyTea , MeCab , and JUMAN were competitive .
All supervised analyzers were better than the unsupervised and the both heuristic methods .
On the other hand , the unsupervised morphological analyzer latticelm and one of heuristic methods CAT were competitive to the supervised analyzers in RIBES .
For example , latticelm was 62 .51 and KyTea was 62 .90 on REUTERS .
In this case , CHAR was not competitive to the supervised analyzers in total .
The results were the worst scores in BLEU and RIBES on REUTERS and JENAAD+REUTERS . The only one exception was in the case of the best 56 .55 BLEU in Characters on REUTERS .
We found the results of the supervised morphological analyzers are better in both English-Japanese and Japanese-English experiments .
And the differences in the word definition of KyTea , MeCab , and JUMAN were not remarkable , especially in English-Japanese translations , although the word definition of KyTea is much shorter than MeCab and JUMAN .
This result implies that phrase-based SMT can output sufficiently reasonable word / phrase alignments that can treat different word definitions in most cases .
On the other hand , the unsupervised morphological analyzer latticelm and one of our heuristic methods CAT were very much worse than the supervised morphological analyzers .
The experiments demonstrated an unexpected result for CHAR .
It was good at English-Japanese but not at Japanese-English translations .
We consider the possible reasons for this result :
- The Head Finalization of English-Japanese lead better phrase alignments .
- Since CHAR treat a character as a word , the best combination of its phrase alignments were the best suited for the SMT decoding .
On the other hand , we observed the following issues from our error analysis :
- Uncommon named entities were almost wrongly translated .
( For example , チェコ Czech was produced instead of チェコスロバキア Czechoslovakia . )
- Long sentences were translated worse than the other word segmentation outputs .
The reasons of the CHAR results are yet to be analyzed in details .
However , this result indicates that there is a possibility of better word segmentation than popular supervised morphological analyzers and CHAR word segmentation .
We are planning to conduct further investigation in future .
The current evaluation metrics we pursued in this paper were not sufficient to discuss more accurately about the relative advantages and disadvantages of word segmentation , since they did not produce consistent scores as explained below :
- There were many contradictory figures among evaluation metrics .
There was a case that BLEU was high , while other metrics were low .
Moreover , there is also a case that RIBES and BLEU in Characters were incompatible with each other .
For example , on WIKIPEDIA in Table 2 , while CHAR was relatively the highest and greatly better than the supervised morphological analyzers in RIBES , MeCab achieved the best score and notably better than CHAR in BLEU in Characters .
- If we compare every column in a row , there were tendencies that the best and the worst corpora were the same for every evaluation metrics .
In Table 2 , REUTERS was the best and WIKIPEDIA was the worst in terms of BLEU , but also JENAAD+REUTERS was the best and WIKIPEDIA was the worst in terms of RIBES .
- Even when we compare every row in a column , there were no tendencies .
For instance , in terms of BLEU in Characters , CHAR , JUMAN , and MeCab achieved the best scores in Table 3 .
This work focused on how the difference of word segmentation affects SMT outputs , the quality of the unsupervised word segmentation on SMT , and the meta-evaluation of the current evaluation metrics .
In summary , we found that the representative morphological analyzers were competitive and much better than both unsupervised analyzer and one of our heuristic methods .
After all , a heuristic word segmentation method CHAR achieved relatively good word-based BLEU scores and competitive character-based BLEU results , compared to the supervised analyzers .
Additionally , as we could not always obtain consistent scores from the current evaluation metrics , they were not sufficient to discuss more accurately about the relative advantages and disadvantages of word segmentation .
We also suggested it is possible to implement more optimized word segmentation on SMT .
On Contribution of Syntactic Dependencies to Word Sense Disambiguation
Traditionally , many researchers have addressed word sense disambiguation ( WSD ) as an independent classification problem for each word .
However , problems with their approaches are the disregard of the interdependencies of word senses , and the limited applicability to those word senses for which training instances are served .
In this paper , we propose a supervised WSD model based on the syntactic dependencies of word senses .
Particularly , we assume that there exist strong dependencies between the sense of a syntactic head and those of its dependents .
We describe these dependencies on the tree-structured conditional random fields ( T-CRFs ) , and obtain the most appropriate assignment of senses optimized over the sentence .
Also , we define these sense dependencies in combination with various coarse-grained sense tag sets , so that our model can even work for words that do not appear in the training data , and these combined features help relieve the data sparseness problem .
In experiments , we show the appropriateness of considering the sense dependencies , as well as the advantage of the combination of fine- and coarse-grained tag sets .
The performance of our model is shown to be comparable to those of state-of-the-art WSD systems .
We also present an in-depth analysis on the effectiveness of the sense dependency features with intuitive examples .
Word sense disambiguation ( WSD ) is one of the fundamental problems in computational linguistics .
The task of WSD is to resolve the inherent polysemy of words by determining the appropriate sense( s ) for each polysemous word in a given text .
It is considered to be an intermediate , but necessary step toward many NLP applications including machine translation and information extraction , which require the knowledge of word senses to achieve better performance .
One major obstacle to large-scale and precise WSD is the data sparseness problem caused by the fine-grainedness of the sense distinction .
In order to resolve this problem , several semi-supervised approaches have been explored in recent years .
Some researchers have addressed directly the scarcity of the training data , and explored the methods to obtain more tagged instances , by the co-training and self-training .
Other researchers have employed useful global information , such as the domain information extracted from unannotated corpora .
Although the use of the global information has succeeded in dramatically increase the performance of WSD , there are much room left to examine the effectiveness of local or syntactic information .
One of such information yet to be explored is the interdependencies of word senses .
Although the use of local and syntactic information has been common in WSD , traditional approaches to WSD are based on the individual classification framework for each word , in which each word 's sense is treated independently , regardless of any interdependencies nor cooccurrences of word senses .
As a result , the resulting sense assignment may not semantically consistent over the sentence .
To solve this problem is of great interest from both practical and theoretical perspectives .
In this thesis , we present a WSD model that naturally handles all content words in a sentence .
We focus on the use of the interdependency of word senses , so that we can directly address the issue of semantic ambiguity of a whole sentence arose from the interaction of each word 's sense ambiguity .
Specifically , we assume that there exist strong sense dependencies between a syntactic head and its dependents in the dependency tree , rather than between neighboring words in the sentence .
We confirm the appropriateness of this assumption by showing the superiority of the tree-structured models over the linear-chain models .
Furthermore , we combine these sense dependency features with various coarse-grained sense tag sets .
This is to relieve the data sparseness problem caused by the explosion of the number of features , which is roughly squared by the combination of two word senses .
The combined features also enable our model to work even for those words that do not appear in the training data , which the traditional individual classifiers cannot handle .
As a machine learning method , we adopt the tree-structured conditional random fields ( T-CRFs ) .
We solve WSD as a labeling problem to a sentence described as a dependency tree , where the vertices correspond to words and the edges correspond to the sense dependencies .
In this model , the intensities of the sense dependencies are described as the weights of edge features .
T-CRFs also enable us to incorporate various sense tag sets all together in a simple framework .
In our experiments , three interesting results are found : the interdependency of word senses contribute to the improvement of WSD models , the combined features with coarse-grained sense tags work effectively , and the tree-structured model outperforms the linear-chain model .
These results are confirmed on three data sets ( the SemCor corpus and the Senseval-2 and -3 English all-words task test sets ) and on two sense inventories ( WordNet synsets and supersenses ) .
Our final model is shown to perform comparably with state-of-the-art WSD systems .
The rest of the paper is organized as follows : In Section 2 , we describe background topics related to WSD .
In Section 3 , we describe current problems of WSD , and related works .
In Section 4 , we describe our model with intuitive examples , and the machine learning method we use .
In Section 5 , 6 , and 7 , we present our experimental setup and results , and an in-depth analysis on the contribution of the sense dependency features .
Finally , in Section 8 , we present concluding remarks .
The WordNet is a broad-coverage machine-readable dictionary ( MRD ) for English , which contains about 150 ,000 words .
It also serves as an ontology , in which various kinds of meta data , relations among words and senses , and well-organized hierarchical classification of word senses are defined .
In this paper , we always refer to the WordNet version 2 .0 unless otherwise noted .
The statistical information of the WordNet 2 .0 is shown in Table 1 and 2 .
In the WordNet , nouns and verbs are organized in hierarchical structures with IS-A ( hypernym-hyponym ) relationships among words , as shown in Figure 1 .
Nouns have a far deeper structure than verbs , while that of verbs is transversely developed .
All nouns and verbs except some top-level concepts are classified into primitive groups called supersenses , which we describe later .
Figure 1 shows the WordNet hierarchical structure for the first sense ( financial bank ) of a noun bank , where each line shows a synset with the list of words headed by its supersense label , and an arrow denotes that two synsets are in an IS-A relation .
The synset {group#1 , grouping#1} is a broad semantic category that governs the supersense noun group .
The lower synsets {social group#1} , {organization#1 , organisation#3} , and {institution#1 , establishment#2} are the more specific synsets , which in this paper we call the first , second , and third general synsets .
Note that since the organizations of adjectives and adverbs are far different from those of nouns and verbs , we use this hierarchical information for only nouns and verbs .
A supersense is a coarse-grained semantic category , with which each noun or verb synset in WordNet is associated .
Noun and verb synsets are associated with 26 and 15 categories , respectively .
The coarse-grained sets of sense labels are easily recognizable , and enable us to build a high-performance and robust tagger with small training data .
Hence , we can expect them to act as a good smoothing feature for WSD , which would make up for the sparseness of features associated with finer-grained senses .
The effectiveness of using supersenses for WSD has recently been shown by several researchers ( e.g. , , and ) .
The lists of supersenses are shown below .
- Noun supersense : act , animal , artifact , attribute , body , cognition , communication , event , feeling , food , group , location , motive , object , quantity , phenomenon , plant , possession , process , person , relation , shape , state , substance , time , Tops
- Verb supersense : body , change , cognition , communication , competition , consumption , contact , creation , emotion , perception , possession , social , stative , weather
Since the data sparsity has been a significant problem in WSD , the sense frequency information is necessary to achieve good performance .
In this section , we introduce two kinds of the sense frequency information .
A sense ranking is the ranking of a sense of a word in the WordNet .
Since senses of a word are ordered according to frequency , the sense ranking acts as a useful feature offering a preference for frequent senses .
It is also important as a back-off feature , which enables our model to output the first ( most frequent ) sense when no other features are active for that word .
The first sense classifier is known as a strong baseline in WSD , which can be even considered to be a good alternative to WSD .
In our experiment , our first sense classifier achieved the accuracies 65 .3% for the Senseval-2 English all-words task data , and 63 .4% for the Senseval-3 English all-words task data .
Since the sense ranking in the WordNet is based on the word frequency in the SemCor , this baseline performs far better on the SemCor : 75 .9% for the brown1 section and 74 .3% for the brown2 section .
Alternatively , we can consider incorporating the first sense of each word as a feature .
Instead of uniformly predicting the distribution of sense frequencies according to their sense ranking , it can capture the conditional probability of each sense over the first sense .
It is considered to be a good feature that reflects the sense frequency information when sufficient training data is available for every sense .
For this reason , we use this first sense feature instead of the ranking feature , for the supersense-based evaluation .
For the unsupervised WSD , the use of sense dependencies has been a common method .
introduces an unsupervised graph-based algorithm , and showed a significant superiority of the sequence labeling model over the individual label assignment .
built a model based on various word semantic similarity measures and graph centrality algorithms , which also used the graph structure incorporating the word-sense dependencies .
Thus , the effectiveness of sense dependencies for the unsupervised WSD has been shown by several researches .
On the other hand , the traditional approach to the supervised WSD is to solve an independent classification problem for each word .
This approach has been developed along with the researches based on the lexical sample task in the Sensevals .
However , as we described in Section 1 , this approach cannot deal with the interdependencies among word senses , and may output a semantically inconsistent assignment of senses .
Recently , with the growing interest on the all-words task , a few supervised WSD systems have incorporated the sense dependencies .
SenseLearner and SuperSenseLearner incorporate sequencial sense dependencies into the supervised WSD frameworks .
They no longer treat each word sense individually , assuming the sense dependencies between adjacent words .
also took a sequencial tagging approach for the disambiguation of WordNet supersenses .
However , the dependencies they considered are rather simple ones between the adjacent words , and between either WordNet synsets or supersenses .
Note additionally that they do not mention how and how much they contribute to the improvement of supervised WSD .
One interesting model related is the exponential family model proposed by , which captures the occurrences and co-occurrences of words and senses in a joint probability distribution .
Although they focused on the use of the co-occurrences of word senses rather than the dependencies , they clarified the contribution of sense co-occurrences to the supervised WSD .
In this context , it is of an interest if the sense dependencies on a syntactic structure , rather than on a linear chain , works effectively or not .
To the extent of our knowledge , there exists no model that considers the interdependencies of word senses on a syntactic tree .
Also , despite the approaches described above , the contribution of sense dependencies for the supervised WSD has not explicitly examined thus far .
These questions are clarified by our research .
In Section 1 , we presented one of the most significant problems in WSD - the data sparsity .
This problem may even be magnified when we consider the interdependencies of word senses , since the number of features is roughly squared by the combination of two word senses .
In order to relieve this problem , we use the hierarchical information in the WordNet , including the superordinate words and supersenses , which we describe in Section 2 .1 and 2 .2 .
The use of the hierarchical information has been motivated by several researches .
For example , a WSD system by , which was ranked second in the Senseval-3 , consists of two models : the first model applied to words seen in the training data , and the second model that performs a generalized disambiguation process for words unseen in the data by using the hierarchical information in the WordNet .
The fine granularity of the WordNet synsets is not just a major obstacle to high-performance WSD , but is sometimes too fine-grained even for a human to disambiguate .
This is reflected in the low inter-annotator agreement of sense tagging ( typically around 70% ) , which implies that WSD models are unlikely to perform better than this accuracy .
Also , this fine-grainedness is reported to be not appropriate for many NLP applications .
For example , reported that coarse-grained sense distinctions are sufficient for several NLP applications .
Especially , the use of the supersenses has recently been investigated by , and receiving much attention in the WSD field .
In this case , the inter-annotator agreements are turned out to reach around 90% .
For this reason , we use as our sense inventory the WordNet supersenses as well as the synsets .
In Section 3 , we described two problems in the WSD field .
One is the independent classification of each word 's sense regardless of the sense dependencies among words .
The other is the scarcity of the training data arose from the fine granularity of the sense distinction .
We address these problems by the combination of two methods .
The first is the use of the syntactic dependencies of word senses on a dependency tree .
Particularly , we assume that there exist strong dependencies of word senses between a head and its dependents in the dependency tree , rather than between neighboring words in the sentence .
Even though some models so far have considered the dependencies between adjacent words , no one has focused on the syntactic dependencies of word senses .
Thus , to the extent of our knowledge , our model is the first WSD model that incorporates the sense dependencies based on a syntactic tree .
The second is the combination of various coarse-grained sense tag sets with the WordNet synsets .
This enables our model to work for unseen words in the training data , and is expected to relieve the data sparseness problem .
In our experiment , these tag sets are used in two ways .
One way is to use them directly as the sense inventory instead of a finer sense inventory .
In our supersense-based model , we use the supersenses as the sense inventory , and each word sense is disambiguated at the granularity level of this tag set .
This method serves us much more training instances for each coarser sense , while we can no longer distinguish finer senses .
The other is to use them in combination with finer sense tag sets .
In our synset-based model , three coarse-grained label sets are incorporated in combination with the fine-grained WordNet synsets .
Although the sense disambiguation is still based on the finer senses , the coarser sense tags will help the discrimination of the finer senses , serving generalized information for each fine-grained sense .
This approach has been taken in several hierarchical WSD methods , but never combined with the sense dependencies as we use .
The process of WSD is summarized as below .
At the beginning , we parse target sentences with a dependency parser , and compact the outputted trees in order to capture informative dependencies among words , as described in Section 4 .3 .
Then , the WSD task is regarded as a labeling task on the tree structures .
By using T-CRFs , we can model this as the maximization of the probability of word sense trees , given scores for vertices and edges .
In the training phase , all vertex features and edge features are extracted using the gold-standard senses , and the weight vectors for them are optimized over the training data .
Finally , in the testing phase , all possible combinations of senses are evaluated for each sentence , and the most probable sense assignment is selected by evaluating the equation 3 .
Conditional Random Fields ( CRFs ) are graph-based probabilistic discriminative models proposed by .
CRFs are the state-of-the-art methods for sequence labeling problems in many NLP tasks .
CRFs construct a conditional model / MATH from a set of paired observations and label sequences .
The conditional probability of a label sequence / MATH conditioned on a data sequence / MATH is given by / MATH	 , where / MATH and / MATH are the feature vectors for an edge and a vertex , / MATH and / MATH are the weight vectors for them , / MATH and / MATH are the set of components of / MATH associated with an edge / MATH and a vertex / MATH , and / MATH is the partition function which constrains the sum of all the probabilities to be 1 .
Tree-structured CRFs ( T-CRFs ) are different from widely used linear-chain CRFs in that the random variables are organized in a tree structure ( acyclic graph ) .
Hence , we can consider them appropriate for modeling the syntactic dependencies of word senses , which cannot be represented by linear structures .
In this model , the optimal label assignment / MATH for an observation sequence / MATH is then calculated by / MATH , where / MATH denotes a vertex corresponding to a word while / MATH denotes the vertex corresponding to its parent in the dependency tree .
If we interpret / MATH as the vertex associated with the preceding word in a sentence , it reduces to a linear-chain CRF .
Although T-CRFs are relatively new models , they have already been applied to several NLP tasks , such as semantic role labeling and semantic annotation , proving to be useful in modeling the semantic structure of a text .
Our model is the first application of T-CRFs to WSD .
In this section , we introduce a method to build graph structures on which CRFs are constructed .
First , we describe how to construct a tree used in the tree-structured model .
Let us consider the synset-level disambiguation of the following sentence .
( i ) - The man destroys confidence in banks .
At the beginning , we parse this sentence with the Sagae and Tsujii 's dependency parser , which outputs parsed trees in the CoNLL-X dependency format .
The left-hand side of Figure 2 shows the parsed tree for Sentence ( i ) , where each child-parent edge denotes a directed dependency of words , and the labels on the edges denote the dependency types .
This dependency tree describes dependencies among all words in a sentence , including content words and function words .
However , some of these dependencies are not informative for our WSD task , because our task does not focus on the disambiguation function words .
For example , on the right-hand side of Figure 2 , the dependencies among confidence-in-bank are splitted into the two dependencies confidence-in and in-bank ; Hence our model cannot capture the direct dependency between confidence and bank .
One way to resolve this problem is to use higher-order ( semi-Markov ) dependencies , but this may drastically increase the computational cost .
For this reason , for the synset-based model , we convert the outputted dependency tree into a tree of content words , as exemplified on the right-hand side of Figure 2 .
In this process , the function words are removed from the tree , and their parent and child vertices are directly connected with the dependency labels of the uppermost edge in the original tree .
Then , on the right-hand side of Figure 2 , we can see that the dependency between confidence and bank is now described as a direct edge .
Thus , by the compaction of the trees , our model can capture more useful dependencies among word senses .
Note that for the supersense-based model , we further convert the tree into a tree of nouns and verbs , because supersenses are defined for only these two parts of speech .
The inclusion of removed words and dependency relation labels are performed in the same manner as in the synset-based model , and the tree on the right hand side of Figure 2 in this case remains unchanged because the sentence does not contain any adjectives nor adverbs .
For the linear-chain models , we do not need to parse a sentence .
At first , we connect every adjacent words with an edge , and build a linear chain .
Next , as the same reason for the tree-structured case , we remove from the graph those words that we do not need to disambiguate , in order to capture the direct dependencies between content words ( or nouns and verbs in the supersense-based model ) .
Thus , the process of the tree compaction is performed in the same manner , as described in Figure 3 .
In this section , let us present an intuitive illustration of how our model works .
Here , we focus on three words destroy , confidence , and bank in Sentence ( i ) , and for simplicity consider only two major senses for each word as described in Table 3 , so that the number of possible sense assignments is in this case / MATH .
After an appropriate compaction of the dependency tree , relationships among destroy , confidence , and bank , are represented as direct connections .
Now , our objective is to determine the correct assignment of senses to these words , given the trained weight vector for features .
We conduct this by evaluating the scores for all possible assignment of senses .
Let us start from the dependency between confidence and bank .
The first intuition would be that confidence( n )#2 is strongly related to a group or an institution ( financial bank ) but not related to natural landscape ( river bank ) , while confidence( n )#1 depends mostly on persons and not on other entities .
Because bank does not have a " person " meaning , the weight of confidence( n )#2-bank( n )#1 is expected to be higher than other possible sense bigrams .
A similar argument can be made for the dependency between destroy and confidence .
We can assume that destroy( v )#1 is usually associated with real objects , whereas destroy( v )#2 can take either a real entity or an abstract thing as its direct object .
Given confidence does not have an " object " meaning , the weights of destroy( v )#2-confidence( n )#1 and destroy( v )#2-confidence( n )#2 would be the largest among others .
Finally , given all scores for these sense dependencies , we can evaluate the overall score for the sentence , and see / MATHdestroy( v )#2 , confidence( n )#2 , bank( n )#1 / MATH is the most probable assignment of senses .
Practically , specific bigrams of synsets such as confidence( n )#2-bank( n )#1 and destroy( v )#2-confidence( n )#2 may not appear in the training data .
In this case , sense bigrams combined with coarser sense labels work effectively .
For example , if there exist synset bigrams such as destroy( v )#2-affection( n )#1 in the training data , the model can still perform the disambiguation process properly by considering a generalized synset-supersense bigram destroy( v )#2-noun .feeling .
The detailed description of sense bigrams are given in Section 4 .7 .
Using the information in the WordNet , we make use of four sense labels for each word : a synset / MATH , two general synsets / MATH and / MATH , and a supersense / MATH , which we introduced in Section 2 .
These labels represent word senses at various levels , and to be combined with the vertex and edge features .
We hereinafter distinguish each sense label by putting one of the prefixes WS , G1 , G2 , and SS , as in WS :bank#1 and SS :noun .group .
The examples of these sense labels are shown in Table 4 .
In our model , we combine the synset and supersense labels with the vertex features , and all four sense labels with the edge features .
We denote the set of sense labels for vertex features by / MATH , and the one for edge features by / MATH .
Each of these sense labels is combined with the contextual information in the vertex features , whereas all possible combinations of two sense labels comprise the edge features .
We implement as vertex features a set of typical contextual features widely used in a lot of supervised WSD models .
Most of these features are those used by with the exception of the syntactic features .
In order to see whether the sense dependency features are certainly effective or not , we include as vertex features the word forms , lemmas , and parts of speech of both the parent and the child words in the dependency tree .
These features provide the syntactic information of the parent and child words , but are not semantically disambiguated .
Therefore , if the sense bigram features work effectively over these features , it clearly shows that there exist instances that cannot be disambiguated without considering the interdependency of word senses .
The list of vertex features also includes the information of both the preceding and following words , which in the linear-chain model plays the same role as the parent and child information in the tree-structured model .
Below is the list of contextual information used for the vertex features in the synset-based model .
We refer to these features as / MATH .
- Word form ( WF ) : word form as it appears in a text .
- Global context ( GC ) : bag-of-words within a 60-word window .
- Local PoS ( LP ) : / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , and / MATH , where / MATH in / MATH denotes the relative position to the target word .
- Local context ( LC ) : / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , and / MATH , where / MATH denotes the word at the relative position / MATH , and / MATH the n-gram from the relative position / MATH to / MATH .
- Syntactic context ( SC ) : word forms , lemmas , and parts of speech of the parent and child words .
Using this contextual information and the set of vertex labels / MATH , we construct a set of features on a vertex / MATH by / MATH .
Additionally , we include the sense ranking feature ( see Section 2 .3 for detail ) .
Note that this feature is not combined with any sense labels nor contextual information .
For the supersense-based model , we use vertex features based on , which includes some features from the named entity recognition literature such as the word shape features along with the standard feature set for WSD .
As the sense frequency information , we use the first sense feature .
Unlike in the synset-based model , we do not incorporate the syntactic information of the parent and child words , since it has been reported not to improve the performance .
We design a set of edge features that represents the inter-word sense dependencies .
For each edge , we define the sense bigram features / MATH .
Moreover , in addition to these simple bigrams , we define two kinds of combined bigrams : the sense bigrams with dependency relation labels ( e.g. WS :confidence#2-( NMOD )-WS :bank#1 ) , and the sense bigrams with removed words in between ( e.g. WS :confidence#2-in-WS :bank#1 ) .
Consequently , the number of features for each edge is / MATH .
In this section , we introduce corpora we use for the evaluation .
SemCor is a corpus , in which all content words are annotated with the WordNet synsets , and consists of balanced 352 files from the Brown Corpus .
It is divided into three parts : brown1 , brown2 , and brownv sections .
In brown1 and brown2 , all content words ( nouns , verbs , adjectives , and adverbs ) are semantically annotated , while in brownv only verbs are annotated .
Also , we use two data sets from the Senseval ( International Workshop on Evaluating Word Sense Disambiguation Systems ) exercises : the Senseval-2 English all-words task test set , consisting of three articles from the Wall Street Journal , and the Senseval-3 English all-words task test set , consisting of two articles from the Wall Street Journal and a fiction excerpt from the unannotated portion of the Brown corpus .
As the data sets for evaluation , we use the brown1 and brown2 sections ( denoted as SEM ) of SemCor , and the Senseval-2 and -3 all-words task test sets ( denoted as SE2 and SE3 , respectively ) .
We use the converted versions annotated with WordNet 2 .0 synsets .
Note that these data sets are different from the originals in that multi-word expressions are already segmented .
However , on the other hand , our model cannot output any answers to multi-word expressions that have no directly corresponding WordNet synsets , because we treat expression as one unit in the process of WSD .
For example , the multi-word expression tear-filled is treated as one instance but not tagged with any WordNet synsets in the converted corpus , while in the original corpus it is tagged with two WordNet synsets for tear and filled .
For this reason , we exclude such instances beforehand , and evaluate our models focused on expressions that have corresponding synsets in the WordNet .
The resulting statistics of the data sets are shown in Table 5 .
The evaluation of our model is performed by splitting these corpora into training , development , and test sets .
At first , all files in SEM are sorted according to their file names and distributed into five data sets in order ( denoted as SEM-A , SEM-B , SEM-C , SEM-D , and SEM-E ) , so that each set has almost the same distribution of domains .
Furthermore , each of these five data sets is again split into two sets : SEM-A1 , SEM-A2 , / MATH , SEM-E1 , and SEM-E2 , also according to the order of file names .
Our evaluation is based on a 5-fold cross validation scheme .
In the training phase , four sets ( e.g. SEM-A , SEM-B , SEM-C , SEM-D ) in the SEM are used for training .
Next , for the evaluation on SemCor , one half of the rest ( e.g. SEM-E1 ) is used for development and the other half ( e.g. SEM-E2 ) is used for evaluation .
For the evaluation on the Senseval data sets , all instances of the rest ( e.g. SEM-E ) is used for development and one of the Senseval data sets ( SE2 or SE3 ) is used for evaluation .
Lastly , for the comparison with state-of-the-art models , our model is trained on the whole set of SEM , and SE2 and SE3 are used for development and evaluation respectively .
All sentences are parsed by the Sagae and Tsujii 's dependency parser , and the T-CRF model is trained by using Amis .
During the development phase , we tune the Gaussian parameter / MATH for the / MATH regularization term .
As the evaluation measure , we use the standard recall measure , which is equivalent to the precision as we output answers to all instances .
The synset-based evaluation is performed based on the WordNet synsets .
We evaluate the outputs of our system for all instances that are semantically tagged in the data sets .
Each target word is either a noun , verb , adjective , or adverb .
For the supersense-based evaluation , we follow most of the experimental setup in .
As they noted , in the WordNet , there is semantically inconsistent labeling of supersenses such that top level synsets are tagged as the supersense noun .Tops rather than the specific supersense they govern .
For example , nouns such as peach and plum are tagged as noun .plant but their hypernym plant itself belongs to noun .Tops .
For this reason , we adopted the modification of noun supersenses in the same way as , substituting noun .Tops labels with more specific supersense labels when possible , and left some general nouns with noun .TopsoteNouns which are left with noun .Tops are : entity , thing , anything , something , nothing , object , living thing , organism , benthos , heterotroph , life , and biont . .
The evaluation is based on these modified labels .
We ignore the adjective and adverb instances in the evaluation .
Table 6 is the list of models we use for the evaluation , where FS and SR correspond to the first sense and sense ranking features respectively , and non-dependency denotes models that do not incorporate sense dependency features ( i.e.
only the vertex features ) .
In this section , we focus on the contribution of the sense dependencies .
Table 7 shows the comparisons between the tree-structured models with sense dependencies ( dependency models ) and the models without sense dependencies ( non-dependency models ) .
In this section , each figure shows the mean recall ( equivalent to the precisions ) averaged over the five trials of the cross validation , the " Diff . " rows show the differences between the dependency models and the non-dependency models , and / MATH and / MATH denote the statistical significance of / MATH and / MATH respectively .
We can see from Table 7 that with the sense frequency information , the tree-structured models ( statistically ) significantly outperformed the non-dependency models on all the data sets .
These improvements seem small in terms of figures ; However , considering for instance the No-Dep-SS-FS model outperforms the Baseline-SS-FS model only by 0 .37% on SEM , the further improvement of 0 .21% is considerable because this means our dependency model could handle 57% more instances over the first sense baseline .
Note that , without the sense frequency information , the synset-based tree-structured model ( Tree-WS ) performed poorer than the non-dependency model ( NoDep-WS ) on all the data sets , whereas the supersense-based model ( Tree-SS ) exhibited the robustness regardless of the existence of the sense frequency information .
These results suggest that for the synset-based model , in which most synsets do not have enough instances in the training data , the combination with sense-frequency information is necessary in order to avoid the data sparseness problem .
Similarly , Table 8 shows the comparisons between the linear-chain dependency models and the non-dependency models .
In the supersense-based evaluation , although the differences are slightly smaller than in the tree-structured models , we confirmed that the sense dependencies with the first sense features work effectively , with the overall improvements of 0 .29% , 0 .20% , and 0 .30% for the three data sets .
However , without the first sense features , no statistically significant improvement nor deterioration is observed .
In the synset-based evaluation , the overall trend is almost same as in the tree-structured case .
However , by the incorporation of the sense dependencies , the improvements with the sense ranking features are even smaller , and the deteriorations without them are even larger than in the tree-structured case .
These results seem to suggest that the sense dependencies on the tree structures are more robust than those on the linear chains .
In this section , let us focus on the difference between the tree-structured models and the linear-chain models .
In the results shown in Table 9 , although some of the differences are marginal , we can see that the tree-structured models outperformed the linear-chain models , focusing on the statistically significant differences .
These results suggest that although both the dependency trees and the linear chains capture useful dependencies of word senses , the dependencies on the tree structures capture more important information .
Table 10 shows the contributions of the coarse-grained labels .
Whereas Tree-WS-SR and Tree-WS use all four sense labels for the edge features ( / MATH ) , Tree-WS-SR' and Tree-WS' only use the synset labels ( / MATH ) , so that we can see the contribution of the coarse-grained sense labels .
Although the improvements are marginal , we can see that the coarse-grained sense labels did consistently improve the performance on all the data sets , relieving the data sparseness problem .
Since synset-based models can directly be used as supersense taggers by a simple conversion of senses , we compared the performance of the synset-based model with that of the supersense-based model .
Interestingly , when evaluated at the supersense level , the synset-based models considerably outperformed the supersense-based models , with the overall improvements of 0 .69% with the sense frequency information and 1 .41% without it , as shown in Table fcomp-ws-ss-tree .
These results suggest that even though the granularity of the supersenses is sufficient for many NLP tasks , they are too coarse-grained to capture enough information for WSD models ; Therefore , even for the supersense-based disambiguation , we can improve the performance by considering finer-grained senses .
Table 12 shows the comparison of our model with the state-of-the-art WSD systems .
The evaluation here is performed with the Senseval official scorer .
Our model Tree-WS-SR outperformed the two best systems in the Senseval-3 ( Gambl and SenseLearner ) , but lagged behind PNNL by 1 .6% .
However , considering that all systems in Table 12 except for Simil-Prime utilize other sense-annotated corpora in addition to SemCor , such as the Senseval data sets or example sentences in the WordNet , and our model cannot handle multi-word expressions that do not exist in the WordNet as noted in Section 5 .1 , we can conclude that the performance of our T-CRF model is comparable to that of state-of-the-art WSD systems .
Table 13 shows the list of the 15 largest-weighted sense dependency features in the tree-structured , synset-based model ( Tree-WS ) .
The list includes features associated with verb-noun relations ( e.g. SS :verb .consumption-SS :noun .food ) and noun-noun relations ( e.g. SS :noun .communication-SS :noun .communication ) , which we will describe in detail with several examples .
Hereinafter , / MATH denotes / MATH in Equation 3 , and / MATH denotes the exponential of / MATH .
We call a feature either with a positive lambda or with an alpha larger than 1 as an excitatory feature , while that either with a negative lambda or an alpha smaller than 1 as an inhibitory feature .
Also , Table 14 shows the 15 largest-weighted sense dependency features in the linear-chain , synset-based model .
When compared to the outputs of the tree-structured model , we can see that the linear-chain model captures more successive noun-noun dependencies , while the tree-structured model captures more adjective-noun and verb-object dependencies .
Thus , although the difference of the recalls is small , we can assume that the sense dependency features in the tree-structured model and those in the linear-chain model have different contributions to the results .
The simultaneous use of both is of an interest from practical and semantical perspectives ; However , since it makes our model no longer a tree , the implementation is not straightforward .
Hence , this is left as one of our future works .
In this section , we present instance-based analyses based on the first 100 instances for which the answer of the dependency model Tree-WS-SR differs from that of the non-dependency model NoDep-WS-SR in the first trial on SemCor .
We extracted only the largest-weighted edge feature for each instance , assuming that this feature had the largest contribution to the result .
These instances consist of 54 positive instances , for which Tree-WS-SR output the correct answer while NoDep-WS-SR did not , and 46 negative instances , for which Tree-WS-SR did not output the correct answer while NoDep-WS-SR did .
Table 15 and 16 shows the count of each edge type for these instances .
For both positive and negative instances , the verb-noun dependencies are the dominant dependencies , corresponding to 48% of all the instances .
One noteworthy point is that more number of noun-noun dependencies are found in the positive instances than in the negative instances , which might suggest that noun-noun dependencies are particularly likely to capture useful dependencies and contribute to positive instances .
First of all , let us present two instances in which the verb-noun dependencies worked effectively .
The first sentence is
From this earth , then , while it was still virgin God took dust and fashioned the man , the beginning of humanity .
The verb take has surprisingly as many as 42 senses in the WordNet .
But , fortunatelly , the first six senses belong to different supersenses , and our dependency model succeeded in outputting the correct sense take#4 ( SS :verb .contact , take physically ) by making use of the strong dependency SS :verb .contact-SS :noun .substance ( / MATH ) , given dust#1 belongs to noun .substance .
The second instance is also a positive instance from the SEM-A data set .
For a serious young man who plays golf with a serious intensity , Palmer has such an inherent sense of humor that it relieves the strain and keeps his nerves from jangling like banjo strings .
Here , has is an ambiguous verb that has 19 senses in the WordNet .
The correct sense here is have( v )#2 ( SS :verb .stative , have as a feature ) .
Given sense of humor#1 belongs to the supersense noun .attribute , the correct sense was output by the strong verb-object dependency G1 :have( v )#2-( OBJ )-SS :noun .attribute ( / MATH ) .
While this verb-object dependency had a large excitatory weight , the corresponding verb-subject dependency had an inhibitory weight ( G1 :have( v )#2-( SBJ )-SS :noun .attribute ( / MATH ) ) , which means the dependency relationlabel also contributed to the result .
Note also that this long dependency cannot be described by linear-chain models .
Next , let us show a typical negative example , where a verb-subject dependency worked inappropriately .
The repeated efforts in Christian history to describe death as altogether the consequence of human sin show that these two aspects of death cannot be separated .
The correct sense for show here is show#2 ( verb .cognition , establish the validity ) , but the model output show#3 ( verb .communication , prove evidence for ) affected by the long dependency WS :testify( v )#2-( SBJ )-SS :noun .act ( / MATH ) between efforts and show .
This subject information seems to be not adequate for the disambiguation of show .
Next we focus on the noun-noun dependencies .
The first example is a negative instance .
Philadelphia permitted him to seek a better connection after he had refused to reconsider his decision to end his career as a player .
The noun career has two meanings : the particular occupation for which you are trained ( career#1 ) and the general progression of your working or professional life ( career#2 ) .
From the phrase career as a player , we can assume that the correct sense of career can be either of two senses , and possibly there is a preference for career#2 , as captured by the largest-weighted dependency WS :career%1%2-( NMOD )-SS :noun .person ( / MATH ) between career and player .
Although there was originally the preference for the correct sense career#1 by the sense frequency features , the noun-noun dependency thus contributed to the wrong answer career#2 .
The determining clue for this instance seems to be the verb-object dependency end-career , which was not captured by our model .
Among the ten positive instances of the noun-noun dependencies , four instances were contributed by the noun-of-noun dependencies .
Since dependencies of this type were not observed in the negative instances at all , they seem to particularly contribute to the positive instances .
Let us consider the following example .
The embarrassment of these theories over the naturalness of death is an illustration of the thesis that death cannot be only a punishment , for some termination seems necessary in a life that is lived within the natural order of time and change .
Although the correct sense time#5 ( noun .Tops , the continuum of experience in which events pass from the future through the present to the past ) is not a frequent sense , our model correctly output the correct sense by using the dependency SS :noun .object-of-WS :time%1%5 ( / MATH ) , given natural order#1 belongs to the supersense noun .object .
Another interesting result observed is that the noun-noun dependencies in coordination relations work remarkably strongly .
In the following sentence , three words nails , levels , and T squares are in a coordination relation .
He also bought a huge square of pegboard for hanging up his tools , and lumber for his workbench , sandpaper and glue and assorted nails , levels and T squares and plumb lines and several gadgets that he had no idea how touse or what they were for .
Here , the correct sense for nail is nail#2 ( noun .artifact , a thin pointed piece of metal ) and that for level is level#5 ( noun .artifact , indicator of the horizontal ) .
The relatively low frequency of these senses prevent our model from outputting the correct senses in an ordinal way .
However , the dependency model could capture the fact that two words in a coordination relation are quite likely to belong to the same semantic group ( SS :noun .artifact-( COORD )-SS :noun .artifact ( / MATH ) ) , and hence succeeded in the correct disambiguation of these three words .
More generally , we have observed that the coordination features for an edge that connects the same supersense all have positive weights .
In this paper , we proposed a novel approach to the all-words WSD , focusing on the use of syntactic dependencies of word senses , and investigated the contribution of these dependencies to WSD .
Our proposals were twofold : to apply tree-structured CRFs to the dependency trees , and to use the combined bigrams of fine- and coarse-grained senses as edge features .
In our experiments , the sense dependency features were shown to work effectively for WSD , with 0 .29% , 0 .64% , and 0 .30% improvements of recalls for SemCor , Senseval-2 , and Senseval-3 data sets respectively .
Despite the small improvements in terms of overall figures , these improvements indeed correspond to 25%-57% improvements over the first sense baseline .
The dependency tree structures was shown to be appropriate for modeling the dependencies of word senses , by the results that the tree-structured models outperformed the linear-chain models .
In the analysis section , we presented an in-depth analysis of the observed instances , and saw that the noun-noun dependencies particularly contribute to the positive instances .
Also , the combination of coarse-grained tag sets with the sense dependency features were proved to be effective .
However , our experiments on the other hand showed that even when combined with the coarse-grained tag sets , the sense dependency features do not improve the performance unless combined with proper sense frequency information , due to the data sparseness problem .
The supersense-based WSD models , on the contrary , exhibited the robustness regardless of the existence of the sense frequency information , while they are defeated by the synset-based models in recalls .
These results show the importance of fine-grained and coarse-grained sense information , and that the combination of both enables us to build a precise and robust WSD system .
The performance of our tree-structured model was comparable to that of the state-of-the-art WSD systems .
Although our model was based on a simple framework and trained only on the SemCor corpus , the results we gained were promising , suggesting that our model still has a great potential for improvement .
Our next interest is to combine our framework with the recently-developed semi-supervised frameworks .
The combination of the local and syntactic dependencies with the global information is expected to further the WSD research .
Generating short summary videos for rushes is a challenging task due to difficulty in redundancy elimination and determination of important objects and events being placed in the summary .
Redundancy elimination is difficult since repetitive segments , which are takes of the same scene , usually have different lengths and motion patterns .
This makes approaches using one keyframe for shot representation failed in doing clustering .
In addition , even repetitive segments can be determined precisely , the summary generated by concatenating together selected segments still has longer duration than the upper limit .
It is questionable to select a sub-segment so that it conveys information of the scene as much as possible .
In this paper , we introduce two approaches to these problems .
In the first approach , one keyframe is used for shot representation in doing clustering; and sub-segments are selected using motion information for generating the summary .
Meanwhile , in the second approach , all frames of a shot are used for clustering; and a simple skimming method is used to select sub-segments .
Experimental results on the TRECVID 2008 dataset and comparison between the two approaches are reported .
With the availability of multimedia databases growing at an exponential rate , users are increasingly requiring assistance in accessing digital video contents .
Video summarization is a significant research that helps to meet these needs by developing a condensed version of a full length digital video with the most important contents \CITE .
Summary videos can help users to browse and navigate large video archives efficiently and effectively .
Generating summary videos for BBC rushes \CITE is a challenging task due to difficulty in redundancy elimination and determination of important objects and events being placed in the summary .
Since the length of the summary is limited to 2\% duration of the original video , there is a trade-off between recall and usability ( e.g user friendly through smooth presentation , being easy to understand ) .
High recall , i.e many objects and events ( called scenes ) are included in the summary , usually reduce the number of frames for each scene .
For example , the maximum duration for the summary of a 30 minute length video is 36 seconds ( \MATH ) .
If the summary consists of 20 scenes , the average duration for each scene is 1.8 seconds .
For the event such as " `Woman attacks man on bench on left and runs off with large bag .
" ', with this length constraint , it is difficult to present it in a pleasant tempo and rhythm .
On the contrary , smooth presentation of events consumes a lot number of frames , that decrease the recall .
In general , generating summary videos consists of the following steps :
Video segmentation : This step decomposes the original video into segments , such shots or sub-shots .
Each segment should be aligned such that it is a part of a scene .
Redundancy elimination : This step groups segments that belong to the same take into clusters .
Only one representative segment is used for the final summary video .
The others are discarded .
Junk elimination : This step removes color bars , clapboards , all black or all white frames that are unnecessary for the final summary video .
Summary generation : This step selects frames from representative segments of clusters and concatenate to form the final summary video .
While the steps of video segmentation and junk elimination are easy to handle , the steps of redundancy elimination and summary generation are difficult .
For example , as for redundancy elimination , the question is how to represent a segment into a feature vector and how to compute the similarity between two segments having different length and motion pattern .
In the other case , assume that we have selected appropriate segments , the total length of these segments are usually larger than that of the final summary .
The question is how to determine the important part of the selected segment such that it conveys information of the scene as much as possible .
In this paper , we present two approaches for handling these difficult steps .
The first approach represents each segment by one key-frame and groups similar segments by doing clustering on these key-frames .
Then the portion of each segment that has high motion is used to include into the final summary .
Meanwhile , the second approach uses another strategy for redundancy elimination .
Specifically , for each segment , a set of frames are extracted by sampling at a certain time interval ( e.g 5 frames ) .
The clustering process is performed on the frames of all segments .
Then , the segments that share a large enough number of frames with respect to their size are merged into one cluster .
In order to generate the final summary , with each representative segment , the middle part is selected with the skim rate of 2 frames .
This paper is organized as follows : section \REF introduces details of the first approach; , while section \REF presents details of the second approach .
Section \REF describes experimental results on the TRECVID 2008 dataset .
Finally , section \REF and section \REF conclude the paper .
From the definition , all rushes are unedited; therefore it must consist of hard cut only .
The shot boundary detection algorithm in \CITE is used to determine shot boundary and partition the input video into shots .
A local color histogram is extracted by dividing a video frame into \MATH blocks .
The \MATH distance is used to compute the distance between each blocks of frames \MATH and \MATH .
Next , these values are sorted into an ascending order .
The sum of the middle eight of these 16 values are used to define a cut between frames \MATH and \MATH if these values exceed a threshold \MATH .
However , this algorithm cannot distinguish between hard cut and the large objects motion .
To overcome this problem , motion-based features are computed for each video frame using the Lucas-Kanade point-based tracking functions provided in the OpenCV toolkit\footnote{http : //opencvlibrary.sourceforge.net / } .
The magnitude is computed from the motion vector for each frame .
Therefore , if the algorithm detected a cut between frames \MATH and \MATH , whose magnitude is larger than a threshold \MATH , these cuts are rejected since they are motions from large objects .
Finally , the short shots with less than 25 frames ( 1 second ) are removed .
The sub-shot segmentation algorithm in \CITE is used to divide shots into smaller units .
A first frame of the shot is chosen as the base frame \MATH and next frame \MATH for comparison .
The \MATH distance used to compute the distance of frame sequence until the sum of the sorted value of lower eight is larger than a threshold \MATH .
The frames from \MATH to \MATH , then , form a sub-shot and frame \MATH is used as the next base frame .
Finally , the short sub-shots with less than 25 frames are removed .
We employ a keyframe extraction algorithm proposed in \CITE to extract the representative keyframes from each sub-shot .
In this approach , cosine distance is used to measure the difference between neighboring frames in each sub-shot .
Keyframes are selected at the midpoints between two consecutive high curvature points where the high curvature points are detected from the curve of the cumulative frame difference .
The characteristics of color bars are vertically averaged , and the color histograms for each block in the same column should be similar .
We employ the algorithm proposed in \CITE by using \MATH distance to compute histogram differences between any two neighboring blocks in each column .
Next , we sort these values into an ascending order .
If the value of the \MATH is smaller than threshold \MATH , then these sub-shot is defined as a color bar sub-shot .
From the properties of single color image , a dominant color in its global histogram is large .
If the value of the \MATH of global color histogram is larger than threshold \MATH , then these sub-shots are defined as a single color sub-shot .
In rushes videos , there are many types of clapper boards , appearance but the same type of clapper boards is often used in the same movie .
The clapper boards have many types , such as scale , rotation , and illumination changes .
The NDK algorithm , proposed in \CITE , is invariant to image scaling , translation , rotation , illumination changes , and affine or 3D projection .
A set of 80 example keyframes of clapper boards are extracted from the development set and used as a set of queries .
Next , we extract the keypoints of the keyframes given from section \REF and match them with the query .
If a result of the NDK algorithm returns a match between a keyframe with a query then we define the sub-shot is a clapper board sub-shot .
The unused keyframes containing of story units for generate video summary are removed .
However , rushes videos containing of repetitive story , such as retake scenes , are unedited .
To create the efficiently of rushes videos , the repetitive contents must be eliminated .
Generally , a group of continuous contents often share some properties .
From this characteristic , clustering technique can be used to separate the data into groups of similar contents .
Each group , called cluster , consists of contents that are similar between themselves and dissimilar to contents of other groups .
GreedyRSC , proposed in \CITE , is used to find clusters with high precision and the number of clusters is automatically determined .
To do the clustering on keyframes , three different features , including mean , variance , and skewness , are extracted from local color histogram .
These values are used to represent the keyframes content and defined as follows :
Figure \REF shows an example of clustering result .
So far , we completely remove the unused contents from rushes video and reduce repetition of the story contents .
The objective of rushes summarization at TRECVID 2008 is to generate short summaries ( the upper limit of the duration of summary is 2\% of the original video ) , less repetitive of content , and must have many objects and events as possible .
To reach this objective , the important keyframes should be selected to generate summary video .
To generate summary , we first compute its maximum duration in seconds \MATH ,
where \MATH is the maximum duration for the summary .
Second , we compute quota length for each cluster based on the cluster size \MATH .
Third , merge consecutive sub-shots in each cluster into shots and compute the priority of each shot based on priority of shot weighted duration and shot weighted average motion magnitude using the following equation : \MATH</p>
Next , these \MATH values are sorted into descending order and the first shot is selected .
Forth , sort sub-shots in the selected shot in descending order based on the average motion magnitude .
Select sub-shots from top to bottom until the quota length for that shot is reached .
Fifth , for each selected sub-shot , extract 25 frames ( 1 second ) around the middle to generate the final summary .
This system is adopted with some modifications from the system developed for the same task last year \CITE .
Specifically , the original video is decomposed into segments , which are shots with hard cut transition .
These segments are further decomposed into fragments so that each fragment represents a portion of a scene .
In order to reduce the computation time , we only extract a subset of frames from the original video by sampling at a five frame interval ( i.e extract frames 0th , 5th , 10th , and so on ) .
For each frame , we use grid color moments with the same configuration as in \CITE for feature representation .
The segment boundary , which is located at hard cut transition , is determined by using a loose threshold on the Euclidean distance between two consecutive frames .
Meanwhile , the fragment boundary is determined by using a strict threshold to detect dramatic motion .
Instead of selecting one keyframe to represent one fragment as many other systems do , we use all frames of each fragment for redundancy elimination .
We use GreedyRSC \CITE to do clustering on the set of all sampled frames extracted from the original video .
The number of clusters is determined automatically by this method .
Frames that belong to the same cluster are assigned the same label .
By this discretization process , we can cast one fragment as one string whose characters are labels of its frames .
We compute the similarity value between two fragments by counting the number of shared characters between two strings and being normalized to the size of each string .
If this value is larger than a threshold , these two segments are merged into one cluster .
We found that this approach is more effective than the approach using one keyframe for one fragment since the more number of keyframes is used , the more information is available to make right decision .
We select junk frames such as color bar frames , single color ( black or white ) frames to form the reference junk frame set .
To check whether a fragment is a junk , we compare the frames of this fragment to the frames of the reference junk frame set .
The similarity between two frames is the Euclidean distance between two grid color moment feature vectors .
We empirically select thresholds for each type of junk .
If the similarity between one frame in the input fragment and one frame in the reference junk frame set is lower than the predefined thresholds, the input fragment is considered as junk and all fragments of the cluster containing junk fragment are eliminated .
In our system, we only check fragments that are located at two ends of the original video for reducing computation time .
However, by using the clustering result, junk fragments that are not checked against the reference junk frame set are also removed .
For each cluster, we merge adjacent fragments into longer fragments and select the longest fragment as the representative fragment to be included in the final summary .
Since the length of these fragments is still larger than the maximum length of the final summary, we employ a simple strategy to shrink these fragments as follows .
First, we assign a quota, which is the maximum duration, for each fragment by dividing the maximum duration for the summary to the number of clusters .
Second, for each fragment, we extract the portion which is expanded from the central of the fragment .
This portion covers a duration twice as much as the fragment quota by selecting frames with sampling rate of 2 frames .
Specifically, we select frames \MATH, \MATH, ..., \MATH, \MATH, ..., \MATH, \MATH, where \MATH is the middle frame of the fragment, and \MATH is half of number of frames computed from the quota\MATH and frame rate ( 25fps ) \MATH :
We have tested our approaches with 40 videos of TRECVID 2008 test set .
Table \REF shows a comparison between these approaches for the measures used in evaluation of this task \CITE .
The system NII-2 achieves higher recall ( IN ) than the system NII-1 since NII-1 only uses one keyframe for each sub-shot and has shorter duration ( DU ) for summary videos .
However, NII-1 has a better score in quality .
The summary videos generated by NII-1 have fewer duplications ( RE ), are presented in a smoother way ( TE ) and are easy to judge for inclusions ( TT ) .
In terms of efficiency, NII-2 is much better .
The clapper board detection process using NDK consumes around half of processing time of NII-1 but performance is low due to large variations of clapper boards in videos ( see Figure \REF ) .
The comparable performance in junk elimination of both systems suggests that simple methods are more favorable .
In addition, by using simple features and sampling frames in the original video, NII-2 significantly speeds up the processing time ( computed from the time taking the input video to the time picking the summary video ) to quasi real-time .
Practical summarization systems usually have good balance between fraction of inclusions and user-friendliness .
In Table \REF, we show performance of such systems .
The 14 systems listed in this table have IN score larger than the median ( 0.45 ); and other scores such as RE and TE larger than half of maximum score ( 2.5 ) .
Compared to other systems listed in this list, our system NII-2 is one of the fastest systems .
Compared to the other systems participating in this task of TRECVID 2008, NII-1 has good performance in measures such as DU and TT ( see Figure \REF and Figure \REF; while NII-2 achieves good performance in measure IN ( see Figure \REF ) .
One of most difficult steps is redundancy elimination .
Lack of discriminative representation of segments and robust clustering methods is the main reason \CITE .
Two typical cases that usually happen in clustering result are fragmentation and outliers .
Fragmentation is the case that samples of one cluster are put into several different clusters .
Outliers are irrelevant and noisy samples in one cluster due to poor determination of cluster boundary .
Therefore, it is necessary to develop robust methods for detection of repetitive segments .
Using all frames of one segment instead of using one keyframe as proposed in NII-2 is one of the efforts toward this direction .
Although the result is not very high as expected, we still believe that this approach is promising .
We have presented two different approaches for generating short summary for rushes video .
In the first approach, NII-1, redundancy elimination is done by doing clustering on the set of keyframes extracted from sub-shots .
With each representative segment of each cluster, the portion that has high degree of motion is selected to form the summary .
This approach achieves good performance in usability score but low performance in recall .
In the second approach, NII-2, all frames of each sub-shot are used to compute the similarity among sub-shots in clustering process .
With each representative segment of each cluster, the middle part is selected to form the summary with skipping rate of 2 frames .
This approach achieves good performance in recall and reasonable performance in usability score .
Compared to other systems participating in TRECVID 2008 summarization task, NII-2 is among best systems that have good balance between recall and usability .
Face Retrieval Improvement by Learning Visual Consistency
Searching persons is one of the essential tasks required by users for image and video search engines .
However , the current search engines have limited capabilities for this task since they usually rely on texts associated with image and video which are likely to return many irrelevant results .
In this paper , we propose a method to effectively retrieve relevant faces for one person by learning visual consistency from results retrieved from text correlation based search engines .
This problem is challenging because ( i ) no any label is provided leading to be difficult to use supervised-based ranking methods .
( ii ) current face recognition techniques are still unmatured with wild-face databases even with supervised learning methods .
In the proposed method , we treat the problem as a classification problem which input faces are classified as 'personX' ( the queried person ) or 'non-personX' and the faces are ranked based on their relevant score that is inferred from the classifier 's probability output .
In order to train this classifier , we use a bagging-based framework to combine results from multiple weak classifiers which are trained using different subsets .
These training subsets are extracted and labeled automatically from the rank list produced from the classifier trained from the previous step .
In addition , outliers detection methods are used to produce the rank list for initialization .
Experimental results on various face sets retrieved from the caption of news photos show that the retrieval performance is improved after each iteration leading the final performance outperforms the baseline algorithms .
With the rapid growing of digital technology , large image and video databases are available easier than ever to users .
Therefore , effective and efficient tools are strongly needed for indexing and retrieving based on visual contents .
One of the typical examples for this application is to search a specific person by providing his or her name .
Usually , most of current search engines use text associated with images or videos as a significant clue to return the results .
However , since it is not necessary faces and names appear simultaneously and are aligned ( as shown in Figure \REF ) , the main drawback of this approach is existence of many irrelevant results that makes the retrieval performance very low .
Therefore it is necessary to improve the retrieval performance by taking into account visual information from the retrieved faces .
This problem is challenging due to the following reasons :
-Large variations in face appearance due to pose changes , illumination conditions , occlusions and facial expressions make face recognition difficult even with state of the art techniques \CITE .
-The fact the retrieved face set consists of faces of several persons while no any label is given makes supervised learning methods as well as unsupervised learning methods such as \MATH -means inapplicable .
In this paper , we propose a method to solve the mentioned problem .
The main idea is to learn visual consistency assumed to exist among the results returned from current text-based search engines .
The method consists of two stages .
In the first stage , we explore local density of faces to identify potential candidates for relevant faces .
This stage is stemmed from the observation that faces relevant to the queried person tend to form dense clusters while irrelevant faces are very sparse since they look different from each other .
We use an outliers detection method for this purpose .
The output is a rank list in which faces having larger number of neighbors within a distance are predicted as relevant ones and therefore are put on the top .
Since the above ranking method is based on the number of neighbors , it is sensitive to the chosen distance .
It is necessary to use the second stage to improve the rank list .
We model this problem as a classification problem which input faces are classified as personX ( the queried person ) or non-personX ( the irrelevant person ) .
The faces are ranked based on their relevant score that is inferred from the classifier 's probability output .
Since annotation data is not available , the rank list from the previous step is used to assign labels for a subset of faces .
This subset then is used to train a classifier using a supervised method such as support vector machines ( SVM ) .
The trained classifier is used to re-rank faces in the original input set again .
This step is repeated a number of times to get the final rank list .
Since automatically assigning labels from the rank list is not reliable , the trained classifiers are weak .
In order to get the final strong classifier , we employ the idea of ensemble learning \CITE in which weak classifiers trained on different subsets are combined to improve stability and classification accuracy of single classifiers .
This stage is effective for improving the rank list due to the following reasons :
-Supervised learning methods such as SVM have strong theoretical background in finding optimal decision boundary even with existence of noisy data .
Furthermore , with recent studies \CITE SVM classifiers can provide probability outputs that are suitable for ranking .
-Bagging framework helps to leverage noises in the unsupervised labeling process .
Our contribution is two-fold :
-We propose a general framework to boost the face retrieval performance from the results retrieved from text correlation based search engines by learning visual consistency .
It integrates seamlessly current existing data mining methods such as outliers detection , supervised learning and unsupervised learning based on bagging for a practical problem .
Our framework requires few parameters and works stably .
-We demonstrate feasibility of using tolerance of supervised learning methods when working with noisy datasets combined with ensemble learning to improve the final performance .
There are several approaches proposed for general object classification rather than for face retrieval .
For example , as described in \CITE , objects are retrieved by an image search engine and then are re-ranked by learning visual consistencies from the retrieved objects .
Compared to the problem of face retrieval based recognition , the problem of object classification is easier since classification of different object types such as airplane and non-airplane only needs to handle inter-variations between different categories while discriminating personA and personB requires to handle both intra-variations and inter-variations of the same category .
Furthermore , in order to work in unsupervised mode , these approaches need a method to collect negative samples ( e.g. non-airplane ) which are inapplicable in our problem .
Working closely to our problem , in \cite{Ozkan06CVPR} , a graph based approach was proposed \CITEin which a graph is formed by faces as nodes and weights of edges linked between nodes are the similarity of faces .
By assuming that the number of faces of the queried person are larger than that of other persons , and these faces tend to form the most similar subset among the set of retrieved faces , this problem is considered equal to the problem of finding the densest subgraph of a full graph whose solution is available .
Although , experimental results showed effectiveness of this method , it is still questionable whether the densest subgraph intuitively describes most of relevant faces of the queried person .
Furthermore , choosing an optimal threshold to convert the initial graph into a binary graph is difficult and rather ad hoc due to the curse of dimensionality .
In another work \CITE , a clustering-based approach was proposed to associate names and faces in news photos .
To solve the problem of ambiguity between several names and one face , a modified \MATH -means clustering process was used in which faces are assigned to the closest cluster ( each cluster corresponding to one name ) after a number of iterations .
Although the result was impressive , it is not easy to apply for our problem since a large number of irrelevant faces ( more than 12% ) are eliminated manually before doing clustering .
This paper is organized as follows : Section \REF introduces our proposed framework .
Section \REF introduce briefly typical outliers detection methods .
Experiments and results are described in section \REF .
Finally , section \REF concludes the paper .
Given a set of faces returned by any text-based correlation search engine , our method performs a ranking process summarized as follows :
-Step 1 : Detect eye positions , and then perform face normalizations .
-Step 2 : Compute an eigenface space and project the input faces into this subspace .
-Step 3 : Estimate ranks of faces using an outliers detection method mentioned in \REF .
-Step 4 : Train a ensemble classifier \MATH using this rank list by Bag-Rank-SVM .
-Step 5 : Use the classifier \MATH to estimate the probability of faces in the original set .
Rank these faces using their probability score .
-Step 6 : Repeat steps from 4 and 5 $T$ times and return ranked faces produced by the last classifier \MATH to users .
Steps from 1 and 2 are typical for any face processing system and described in details in \REF .
Step 3 used to find initial ranks for faces is described in \REF .
We use a simple outliers detection method for this step .
The Bag-Rank-SVM algorithm is described as follows :
-Step 1 : Select a set \MATH including \MATH top ranked faces and then randomly select a subset \MATH from \MATH .
Label faces in \MATH as positive samples .
-Step 2 : Select a set \MATH including \MATH bottom ranked faces and then randomly select a subset \MATH from \MATH .
Label faces in \MATH as negative samples .
-Step 3 : Use \MATH and \MATH to train a weak classifier \MATH using LibSVM \CITE with probability outputs .
-Step 4 : Repeat steps from Step 1 to Step 3 \MATH times .
-Step 5 : Return \MATH .
Since it is not guaranteed top \MATH and bottom \MATH of faces in the rank list are correctly correspondent to faces of the queried person \MATH and faces of non person \MATH as shown in Figure \REF , selecting randomly subsets to train weak classifiers and then combining these classifiers might help to reduce risk of using noisy training sets .
In our framework , outliers detection methods are used to initialize the rank list that is then used to label a subset of samples for training SVM classifiers .
We introduce here two common outliers detection methods including distance-based outliers detection( DBO ) \CITE and local outliers factor based method ( LOF ) \CITE .
Adapting the definition \CITE , given a set of objects \MATH , an object \MATH is considered as an outliers if there are fewer than \MATH neighboring objects in \MATH lying within a distance \MATH .
The outliers detection process is summarized as follows :
-Step 1 : Compute the distance between every pair of data objects .
-Step 2 : For each object , compute \MATH which is the number of neighboring objects lying within a distance \MATH .
-Step 3 : Rank objects based on their scores \MATH .
In our experiments , the distance between two objects is Euclidean distance between two faces and is computed in the eigen-subspace ( described in section \REF ) .
Figure \REF shows two examples of good and bad performance using this method for ranking relevant faces .
According to the method described in \CITE , the local outliers factor of an object \MATH is computed by the following steps and then used to rank faces :
-Step 1 : For each data object \MATH compute \MATH ( the distance to the \MATH nearest neighbor ) and \MATH ( all points in a \MATH sphere ) .
- Step 2 : Compute reachability distance for each data object \MATH with respect to data object \MATH as : \MATH , where \MATH is distance from data object \MATH to data object \MATH .
-Step 3 : Compute local reachability density of data object \MATH as inverse of the average reachability distance based on the \MATH ( minimum number of data objects ) nearest neighbors of data object \MATH .
-Step 4 : Compute LOF of data object \MATH as average of the ratios of the local reachability density of data object \MATH and local reachability density of \MATH nearest neighbors .
We used the dataset described in \CITE for our experiments .
This dataset consists of approximately half a million news pictures and captions from Yahoo News over a period of roughly two years .
Using a robust face detector , 44 , 773 faces were detected and normalized to the size of 86\MATH86 pixels .
After eliminating faces whose facial features are poorly detected by a rectification process and faces whose associated names are not extracted properly from corresponding captions , 30 , 281 faces were kept .
Figure \REF shows an example of a news photo and its caption .
We selected sixteen celebrities who are government leaders such as George W . Bush ( US ) , Vladimir Putin ( Russia ) , Ziang Jemin ( China ) , Tony Blair ( UK ) , Junichiro Koizumi ( Japan ) , Roh Moo-hyun ( Korea ) , Abdullah Gul ( Turkey ) , and other key persons such as John Paul II ( the Former Pope ) , Kofi Annan and Hans Blix ( UN ) . These persons are selected since their appearances are highly frequent in the dataset \CITE .
For each person , variations of his name are collected . For example , George W . Bush , President Bush , U . S . President , etc are variations of U . S . President Bush .
We indexed image captions and then used this index to retrieve faces associated with the captions containing names of the queried person .
The faces retrieved from different names of each person are merged into a set used for our ranking process .
Figure \REF shows faces retrieved when searching Mr . Kofi Annan .
Figure \REF shows the distribution of retrieved faces from this method and the corresponding number of relevant faces for these ten persons .
In total , 3 , 907 faces are retrieved in which 2 , 094 faces are relevant .
On average , the precision is 52.49% .
We used an eye detector to detect eye positions of detected faces .
These eye positions were used to align faces to a predefined canonical pose .
To compensate for illumination effects , the subtraction of the bestfit brightness plane followed by histogram equalization was applied .
This normalization process is shown in Figure \REF .
We then used PCA \CITE to reduce the number of dimensions of the feature vector for face representation .
Eigenfaces were computed from the original face set returned by the text based query method .
The number of eigenfaces was selected so that 97% of the total energy are retained \CITE .
We evaluated the retrieval performance with measures that are popularly used in information retrieval such as precision , recall and average precision .
Given a queried person , assuming that \MATH is the total number of faces returned , \MATH is the number of relevant faces , \MATH is the number of relevant faces , we calculate recall and precision as follows :
Precision and recall only evaluate the quality of an unordered set of retrieved faces .
To evaluate ranked lists , the average precision is used .
The average precision is computed by taking average of the interpolated precision measured at the 11 recall levels of 0.0 , 0.1 , 0.2 , ... , 1.0 .
The interpolated precision \MATH at a certain recall level \MATH is defined as the highest precision found for any recall level \MATH :
In addition , to evaluate performance of multiple queries , we used mean average precision that is the mean of average precisions computed from queries .
We show in Figure \REF the retrieval performance of outliers detection methods and the baseline method using text correlation .
In the baseline method , faces are sorted by the time that the associated news article is published .
It indicates that DBO-based method outperforms the others .
The baseline method performs the worst .
LOF-based method tends to be less sensitive when the threshold is changed .
This suggests that the input face sets are quite dense .
We studied effect of choosing number of times \MATH in the Bag-Rank-SVM algorithm .
We used DBO as the method for making the initial rank list from which 30 training subsets were generated and used for training SVM classifiers using linear kernel with probability output .
To select one subset , we set \MATH and \MATH which means 20% of highest ranked faces are used for \MATH and 30% of lowest ranked faces are used for \MATH .
The subsets \MATH and \MATH are generated by randomly selecting with replacement 70% samples of \MATH amd \MATH .
Figure \REF shows performance of single classifiers and ensemble classifiers .
It suggests that the performance does not change significantly after 5 iterations .
In addition , the performance of the ranking process is improved when using the ensemble classifier .
We set the number of iterations for the Bag-Rank-SVM algorithm being 5 and set the number of iterations of the outer loop $T=30$ to see how much the final performance changes .
As shown in Figure \REF , the performance does not change so much after 5 iterations .
From these experiments , \MATH and \MATH are suitable values for the proposed method .
The performance of different methods shown in Figure \REF indicates that our proposed method outperforms the distance-based outliers detection method and has comparable performance with the supervised method using 5% annotation data .
As shown in Figure \REF , \REF , \REF , our proposed method produces better results in terms of average precision in which relevant faces are put on the top of the returned list .
We present a method to effectively rank faces retrieved by text-based correlation methods when searching a specific person .
Using the rank list estimated from the previous steps , we automatically select a subset of positive and negative samples to train a classifier using SVM with probability outputs .
This classifier is used to rank input faces for the next step .
Since labels of training sets are still noisy , the classified trained by these datasets are weak .
By combining multiple weak classifiers in a bagging framework , the final strong classifier is constructed and produce good results .
To get initial rank for the first step , we propose to use common outliers detection method .
Experiments on a large number of persons with thousands of retrieved images show effectiveness of the proposed method .
Face detection , tracking , and recognition for broadcast video
Human face processing techniques for broadcast video including face detection , tracking and recognition have long been a topic that attracts much research interest due to its crucial value in various applications including video structuring , indexing , retrieval , summarization , etc.
The main reason is human face provides rich information for people 's appearance such as a government leader in a news video , a pitcher in a sport video or a hero in a movie , and is the basis for interpreting facts .
This article describes state-of-the art techniques for face detection , tracking and recognition with application to broadcast video .
Face detection which is the task of localizing faces in an input image is fundamental for any face processing system .
The extracted faces can then be used for initializing of face tracking or automatic face recognition .
An ideal face detector should possess the following characteristics :
- Robustness : it should be capable of handling appearance variations of pose changes , size , illuminations , occlusions , complex background , facial expressions , low resolutions , etc.
- Fastness : it should be fast for real-time processing which is an important factor in processing large video archives .
- Simplicity : The training process should be simple .
For example , the training time is short , the number of parameters is small and training samples are collected without costly .
Many approaches have been proposed for building fast and robust face detectors \CITE .
Among them , those using advanced learning methods such as neural network , support vector machines and boosting are the best .
Typically , detecting faces in an image includes the following steps :
- Window scanning : in order to detect faces at multiple locations and sizes , a fixed window size ( e.g. 24x24 pixels ) is used to extract image patterns at every location and scale .
The number of patterns extracted from one 320x240 frame image is large , approximately 160 ,000 in which only a small number of patterns containing face .
- Feature extraction : given an image pattern , features are extracted .
The most popular feature type is Haar wavelet since it is very fast to compute using the integral image \CITE .
Other feature types can be listed including pixel intensity \CITE , local binary patterns \CITE and edge orientation histogram \CITE .
- Classification : the extracted features is passed through a classifier which is trained beforehand to classify the input pattern associated with these features as a face or a non-face .
- Merging overlapping detections : since the classifier is insensitive to small changes in translation and scale , there might be multiple detections around each face .
In order to return one final detection per face , it is necessary to combine overlapping detections into a single detection .
Since the number of processed patterns is large while the vast majority of them are non-face , a single classifier based systems such as neural network \CITE and support vector machines \CITE are usually slow .
To overcome this problem , a combination of simple-to-complex classifiers has been proposed \CITE leading to the first real-time robust face detector in the world .
In this structure , fast and simple classifiers are used as filters at the earliest stages to quickly reject a large number of non-face patterns and slower yet more accurate classifiers are then used for classifying face-like patterns .
In this way , the complexity of classifiers can be adapted corresponding to the increasing difficulty in the input patterns .
Training classifiers usually consists of several steps :
- Training set preparation : Supervised learning methods require a large number of training samples to obtain accurate classifiers .
The training samples are patterns that must be labeled as face ( positive sample ) or non-face ( negative sample ) in advance .
Face patterns are manually collected in images containing faces and then are scaled to the same size and normalized to a canonical pose which eyes , mouth and nose are aligned .
Then these face patterns can be used to generate other artificial faces by randomly rotating the images ( about their center points ) up to 10 degree , scaling between 90% and 110% , translating up to half a pixel , and mirroring to enlarge the number of positive samples \CITE .
Collecting non-face patterns are usually done automatically by scanning through images which contain no faces .
The accurate classifier described in \CITE requires about five thousand original face patterns and hundreds of million non-face patterns extracted from 9 ,500 non-face images .
In \CITE a smaller number of training samples can be used to build a robust face detector by using edge orientation histogram feature .
- Learning method selection : Basically , in the ideal case with proper settings , advanced learning methods such as neural network , support vector machines and AdaBoost produce similar performance .
However , in practice , it is difficult to find these proper settings .
Using neural network requires the design of layers , nodes , etc.hich is complicated .
Therefore , it is preferable to use support vector machines since the number of parameters is only two if using RBF kernel and many tools are available .
Another learning method which has been used widely in many object detection systems is AdaBoost and its variants .
The advantage of AdaBoost is it can be used for both selecting features and learning the classifier .
Face tracking is the process of locating a moving face or several ones in time using a camera , as illustrated in Figure 1 .
Face is first initialized manually or by a face detector .
Face tracker then analyses subsequent video frames and outputs the location of the initialized face within these frames by estimating the motion parameters of the moving face .
Different from face detection , the outcome of which is the position and scale of one single face in one single frame , face tracking enables the information acquisition of multiple consecutive faces within consecutive video frames .
More important , these faces have the same identity .
Although frame-based face detection techniques have demonstrated success on real images , the current ability on detecting faces from video is still primitive .
The detector responses can decrease due to different reasons including occlusions , lighting conditions and face pose .
Without any additional information , these responses can easily be rejected even if they indicate the presence of a face .
It is therefore important to incorporate the temporal information in a video sequence to provide more complete video segments displaying the person of interest , which is always named as face tracking .
One of the main applications of face tracking is person retrieval from broadcast video , for example : intelligent fast-forwards " , where the video jumps to the next scene containing a certain person / actor ; or retrieval of different TV interventions , e.g. interviews , shows , etc. , of a given person in a video or a large collection of TV broadcast videos .
In [5] , a person retrieval system for feature-length movie video is proposed using straightforward face tracking .
At run time a user outlines a face in a frame of the video , and the face tracks within the movie are then ranked according to the similarity to the outlined query face in the manner of Google .
Since one face track corresponds to one identity , the workload of intra-shot face matching is greatly reduced , which is not available in frame-based face detection .
In addition , face tracking provides multiple examples of the same character 's appearance to help with inter-shot face matching .
Face tracking also finds applications in the area of face-name association , the objective of which is to label television or movie footage with the identity of the person present in each frame of the video .
Everingham et al [8] proposed an automatic face-name association system .
This system uses a face tracker similar with [5] to extract a few hundred tracks of a particular character each in a single shot .
Based on the temporal information obtained from the face tracker , textual information for TV and movie footage including subtitles and transcripts is employed to assign the character 's name to each face track .
For instance , shots containing a particular person can be retrieved by a keyword like " Bush " or " Julia Roberts " instead of an outlined query face as used in [5] .
Besides broadcast video , face tracker also has important applications in the video used in humanoid robotics , visual surveillance , human-computer interaction ( HCI ) , video conferencing , face-based biometric person authentication , etc.
Choosing a face tracker can be a difficult task due to the variety of face trackers available .
The application provider will have to decide which face tracker is best suited to his / her individual needs and , of course , the type of video that he / she wants to use as the target .
Generally speaking , the important issues that should be addressed include speed , robustness and accuracy .
Can the system run in real time ? Similar with many other processing tools for broadcast video , speed is not the most critical issue because offline processing is permitted in most cases of video structuring and indexing .
However , a real-time face tracker will become necessary if the target archive is established from too large quantities of videos , e.g. 24-hour continuous video recording that needs daily structuring .
On the other hand , the speed of the tracker is critical in most cases of applications for non-broadcast video , e.g. HCI .
It should be noted that there is always a tradeoff between speed and performance-related issues including robustness and accuracy .
Can the system cope with varying illumination , facial expression , scale , pose , camerawork , occlusion and large head motion ? A number of illumination factors , e.g. light sources , background colors , luminance levels , and media , impact greatly on the change in appearance of a moving face , for instance , when tracking a person who are moving from indoor to outdoor environment .
Face tracking also tends to fail under large facial deformations of eyes , nose , mouth , etc. due to facial expression variation .
Different from non-broadcast video , e.g. video used for HCI , faces appearing in broadcast video varies from large close-up faces to small faces taken by a long-shot .
Small face scale always leads to low resolution and will reject most face trackers designed by computer vision researchers .
Pose variation , i.e. head rotations including pitch , roll and yaw , is another influencing factor , which can cause disappearance of part of the face .
In some cases , the variation of scale and pose might be caused by camerawork change .
Disappearance of part of the face is also apt to happen due to occlusion by other objects , and motion information may be distracted by alternate motion of them .
Moreover , the task of face tracking becomes even more difficult when the head are moving fast relative to the frame rate so that the tracker fails to arrive in time " .
How accurate is the tracking ? The first factor that affects the accuracy might be the false face detections generated when initializing the tracker by a face detector .
This problem is difficult to solve due to a fixed threshold .
Lowering the threshold of the face detector reduces false rejections but increases the number of false detections , and vice versa .
The drifting or the long sequence motion problem is another factor that might affect the accuracy .
This problem always happens due to the imperfect motion estimation technique .
A tracker might accumulate motion errors and eventually lose track of the face , for instance , when tracking faces that change from a frontal view to a profile position .
Face tracking can be considered as an algorithm that analyses the video frames and outputs the location of moving faces within the video frame .
For each tracked face , three steps are involved that are initialization , tracking and a stopping procedure , as illustrated in Figure 2 .
Most of the developed methods use a face detector as the initialization of their tracking process .
An always ignored but existing difficulty of this step lies in the control of false face detections described above .
Another problem is the difficulty in handling the appearance of new non-frontal faces .
Although there have been literatures in profile or intermediate pose face detector , this kind of work suffers from the false-detection problem far more than frontal face detector .
To alleviate these two problems , Chaudhury et al [1] used two face probability maps instead of a fixed threshold to initialize face tracker , one for frontal views and one for profiles .
All local maxima in these maps are chosen as the face candidates , the face probabilities of which are propagated throughout the temporal sequence .
Candidates whose probabilities either go to zero or remain low over time are determined as non-face and eliminated .
The information from two face probability maps is combined to represent intermediate head pose .
Their experiments showed that the proposed probabilistic detector improved the accuracy over traditional face detector and is able to handle the head movement covering a range of �90 degrees out-of-plane rotation ( yaw ) .
After initialization , one should choose what features to track before tracking the face .
The exploitation of color is one of the common choices in order to be invariant to facial expression , scale and pose change [4 , 9] .
However , color-based face trackers often depend on a learning set dedicated to the type of processed videos and are not guaranteed to be easily expendable to unknown videos with varying illumination conditions or different races .
Also , color is susceptible to occlusion by other head-like objects .
Another two choices are key-point [5 , 8] and facial features [3 , 6 , 10] , e.g. eyes , nose , mouth , etc. , both of which are more robust to varying illumination and occlusion .
Although the generality of key-point allows for tracking different kinds of objects , without any face-specific knowledge its discriminant power between target and clutter might be in peril under tough conditions , e.g. strong background noise .
Facial features enable to track higher-level information from a human face but are weak in low video quality .
Most facial-feature-based face trackers [6 , 10] are only tested by using non-broadcast video , e.g. webcam video , and their application potentiality to broadcast video is questionable .
Note that these different cues described above may be combined .
An appearance-based or featureless tracker matches an observation model of the entire facial appearance with the input image , instead of choosing a few features to track .
One example of appearance-based face tracker is [1] that has been introduced above .
Another example is proposed by Li et al [9] , which uses a multi-view face detector to detect and track faces of different poses .
Besides the face-based observation model , a head model is also included to represent the information of head rear .
It is based on the idea that head can be considered as the object of interest instead of face because face is not always present in the tracking process .
An extended particle filter is proposed to fuse these two interrelated information so as to handle the occlusion due to out-of-plane head rotation ( yaw ) that is more than �90 degrees .
During the tracking procedure , face tracking systems usually employ a motion model that describes how the image of the target might change for different possible motions of the face to track .
Examples of simple motion models are as follows .
Based on the assumption that face can be considered as a planar object , the corresponding motion model can be a 2D transformation , e.g. affine transformation or homography , of an image of the face , e.g. the initial frame [3 , 6] .
Some researchers assume the face as a rigid 3D object , thus the motion model defines its aspect depending on its 3D position and orientation [10] .
However , face is actually both 3D and deformable .
Some system try to model face in this sense , and the image of deformable faces can be covered with a mesh , i.e. a sophisticated geometry and texture face model [2 , 7] .
The motion of the face is defined by the position of the nodes of the mesh .
Generally if the quality of the video is high , more sophisticated motion model is used , more accurate result the face tracker generates .
For instance , a sophisticated geometry and texture model might suffer from false face detections and drifting less than a simple 2D transformation model .
But note that most 3D-based and mesh-based face trackers require relatively clear appearance , high resolution , and limited pose variation of the face , e.g. out-of-plane head rotations ( roll and yaw ) that are far less than �90 degrees .
Both of these requirements are always unavailable in the case of broadcast video .
Therefore , most 3D-based and mesh-based face trackers are only tested by using non-broadcast video , e.g. webcam video [2 , 7 , 10] .
Finally , the stopping procedure is rarely discussed .
This constitutes a major deficiency of face tracking algorithms that are generally not able to stop a face track in case of tracking error , i.e. drifting .
Arnaud et al [3] proposed an approach that uses a general object tracker for face tracking and a stopping criterion based on the addition of an eye tracker to alleviate drifting .
Two positions of tracked eyes are compared with tracked face position .
If none of the two eyes are in the face region , it will be determined as drifting and the tracking process will be stopped .
Besides , most mesh-based trackers and top-down trackers are considered to be able to avoid drifting .
Face tracking has attracted much attention from researchers in communities including multimedia content analysis , computer vision , etc. because of its wide application .
However , while most attempts have been made on face tracking for videos with high quality by computer vision researchers , only a limited number of face trackers are designed for broadcast video .
This is because the current ability of face tracking still depends on relatively clear appearance , high resolution , and limited pose variation of the face , which are unavailable in broadcast video .
On the other hand , currently proposed face trackers are still evaluated by using different types of videos and different criteria .
A general evaluation criterion , in terms of speed , robustness and accuracy , is needed for performance comparison between face trackers of different purposes .
Unsupervised Face Annotation by Mining the Web
Searching for images of people is an essential task for image and video search engines .
However , current search engines have limited capabilities for this task since they rely on text associated with images and video , and such text is likely to return many irrelevant results .
We propose a method to retrieve relevant faces for one person by learning the visual consistency among results retrieved from text-correlation-based search engines .
The method consists of two steps .
In the first step , each candidate face obtained from a text-based search engine is ranked by a score that measures the distribution of visual similarities among the faces .
Faces that are possibly very relevant or irrelevant are ranked at the top or bottom of the list .
The second step improves this ranking by treating this problem as a classification problem in which input faces are classified as 'person-$X$' or 'non-person-$X$' ; and the faces are re-ranked according to their relevant score inferred from the classifier 's probability output .
To train this classifier , we use a bagging-based framework to combine results from multiple weak classifiers trained using different subsets .
These training subsets are extracted and labeled automatically from the rank list produced from the classifier trained from the previous step .
In this way , the accuracy of the ranked list increases after a number of iterations .
Experimental results on various face sets retrieved from captions of news photos show that the retrieval performance improved after each iteration , with the final performance being higher than those of the existing algorithms .
With the rapid growth of digital technology , large image and video databases have become more available than ever to users .
This trend has shown the need for effective and efficient tools for indexing and retrieving based on visual content .
A typical application is searching for a specific person by providing his or her name .
Most current search engines use the text associated with images and video as significant clues for returning results .
However , other un-queried faces and names may appear with the queried ones ( as shown in Figure xx ) , and this significantly lowers retrieval performance .
One way to improve the retrieval performance is to take into account visual information present in the retrieved faces .
This task is challenging for the following reasons :
-Large variations in facial appearance due to pose changes , illumination conditions , occlusions and facial expressions make face recognition difficult even with state-of-the-art techniques\CITE ( see an example in Figure xx ) .
-The fact that the retrieved face set consists of faces of several people with no labels makes supervised and unsupervised learning methods inapplicable .
We propose a method to solve the above problem .
The main idea is to assume that there is visual consistency among the results returned from text-based search engines ; and then learn this visual consistency through an interactive process .
This method consists of two stages .
In the first stage , we explore the local density of faces to identify potential candidates for relevant faces and irrelevant faces .
This stage reflects the fact that the facial images of the queried person tend to form dense clusters , whereas irrelevant facial images are sparse since they look different from each other .
For each face , we define a score to measure the density of its neighbor set .
This score is used to form a ranked list , in which faces having high density scores are considered relevant and are put at the top of the list .
The above ranking method is weak since dense clusters have no guarantee of containing relevant faces .
Therefore , a second stage is necessary to improve this ranked list .
We model this problem as a classification problem in which input faces are classified as person-\MATH ( the queried person ) or non-person-\MATH ( the un-queried person ) .
The faces are ranked according to a relevancy score that is inferred from the classifier 's probability output .
Since annotation data is not available , the rank list from the previous step is used to assign labels for a subset of faces .
This subset is then used to train a classifier using supervised methods such as support vector machine ( SVM ) .
The trained classifier is used to re-rank faces in the original input set .
This step is repeated a number of times to get the final ranked list .
Since automatically assigning labels from the ranked list is not reliable , the trained classifiers are weak .
To get the final strong classifier , we use the idea of ensemble learning \CITE in which weak classifiers trained on different subsets are combined to improve the stability and classification accuracy of single classifiers .
The learned classifier can be further used for recognizing new facial images of the queried person .
The second stage improves the ranked list and recognition performance for the following reasons :
-Supervised learning methods , such as SVM , provide a strong theoretical background for finding the optimal decision boundary even with noisy data .
Furthermore , recent studies \CITE suggest that SVM classifiers provide probability outputs that are suitable for ranking .
-The bagging framework helps to leverage noises in the unsupervised labeling process .
Our contribution is two-fold :
-We propose a general framework to boost the face retrieval performance of text-based search engines by visual consistency learning .
The framework seamlessly integrates data mining techniques such as supervised learning , and unsupervised learning based on bagging .
-Our framework requires only a few parameters and works stably .
We demonstrate its feasibility of a practical web mining application .
A comprehensive evaluation on a large face dataset of many people was carried out and it confirmed that our approach is promising .
There are several approaches for re-ranking and learning models from web images .
Their underlying assumption is that text-based search engines return a large fraction of relevant images .
The challenge is how to model what is common in the relevant images .
One approach is to model this problem in a probabilistic framework in which the returned images are used to learn the parameters of the model .
For examples , as described in \CITE , [Reference numbers generally should not be grammatically part of the sentence .
It is better to use the authors�f names .]objects retrieved by an image search engine are re-ranked by extending the constellation model .
Another proposal , described in \CITE , uses a non-parametric graphical model and an interactive framework to simultaneously learn object class models and collect object class datasets .
The main contribution of these approaches are probabilistic models that can be learned with a small number of training images .
However , these models are complicated , since they require several hundred parameters for learning , and they are susceptible to over-fitting .
Furthermore , to obtain robust models , a small amount of supervision is required to select seed images .
Another study \CITE proposed a clustering-based method for associating names and faces in news photos .
To solve the problem of ambiguity between several names and one face , a modified \MATH-means clustering process was used in which faces are assigned to the closest cluster ( each cluster corresponding to one name ) after a number of iterations .
Although the result was impressive , it is not easy to apply it to our problem since it is based on a strong assumption that requires a perfect alignment in the case that the news photo only has one face and its caption only has one name .
Furthermore , a large number of irrelevant faces ( more than 12\% ) have to be manually eliminated before clustering .
A graph-based approach was proposed by \CITE , in which a graph is formed by faces as nodes , and the weights of edges linked between nodes are the similarity of faces , is closely related to our problem .
Assuming that the number of faces of the queried person is larger than that of others and that these faces tend to form the most similar subset among the set of retrieved faces , this problem is considered equal to the problem of finding the densest subgraph of a full graph ; and therefore can be solved by taking an available solution .[It might be unclear as to what " available solution " you are talking about .
You might want to give more detail here .] Although , experimental results showed the effectiveness of this method , it is still questionable whether the densest subgraph intuitively describes most of relevant faces of the queried person and it is easy to extend for the ranking problem .
Furthermore , choosing an optimal threshold to convert the initial graph into a binary graph is difficult and rather ad hoc due to the curse of dimensionality .
The good point of the methods \CITE is they are fully unsupervised .
However , the bad point is no model is learned to predict new images of the same category .
Furthermore , they perform hard categorization on input images that is [It is not clear if " hard categorization " is inapplicable or if the " input images " are inapplicable .]in applicable for re-ranking .
The balance of recall and precision was not addressed .
Typically , these approaches tend to ignore the recall to obtain high precision .
This leads the number of collected images is reduced .
Our approach combines a number of advances over the existing approaches .
Specifically , we learn a model for each query from the returned images for purposes such as re-ranking and predicting new images .
However , different from the methods in \cite{xx} , we used an unsupervised method to select training samples automaticallyCITE .
This unsupervised method is different from the one in \CITE in its way of modeling the distribution of relevant images .
We use density-based estimation rather than the densest graph .
Given a set of images returned by any text-based search engine for a queried person ( e.g. 'George Bush' ) , we perform a ranking process and learning of person |\MATH 's model as follows :
-Step 1 : Detect faces and eye positions , and then perform face normalizations .
-Step 2 : Compute an eigenface space and project the input faces into this subspace .
-Step 3 : Estimate the ranked list of these faces by Rank-By-Local-Density-Score .
-Step 4 : Improve this ranked list by Rank-By-Bagging-ProbSVM . //I found not hits for " rank-by-bagging-probSVM " on the Internet . You might want to double check to see if this is a standard term . The same is true for " rank-by-local-density score " . If this is your own term , you might want to specify this at some point .
Steps 1 and 2 are typical for any face processing system , and they are described in section \REF .
The algorithms used in Step 3 and Step 4 are described in section \REF and section \REF .
Figure \REF illustrates the proposed framework .
Among the faces retrieved by the text-based search engines for a query of person-\MATH , as shown in Figure \REF , relevant faces usually look similar and can form the largest cluster .
One approach to re-rank these faces is to do clustering based on visual similarity .
However , to get ideal clustering result is impossible , since these faces are high dimensional data and the clusters are in different shapes , sizes and densities .
Instead , in \cite{xx} , a graph based approach was proposed CITEin which the nodes are faces and edge weights are the similarities between two faces .
With the observation that the nodes ( faces ) of the queried person are similar to each other and different from other nodes in the graph , the densest component of the full graph ? the set of highly connected nodes in the graph ? will correspond to the face of the queried person .
The main drawback of this approach is it needs a threshold to convert the initial weighted graph to a binary graph .
Choosing this threshold in high dimensional spaces is difficult since different persons might have different optimal thresholds .
We use the idea of density-based clustering described in \CITE to solve this problem .
Specifically , we define local density score ( LDS ) of a point \MATH( i.e. a face ) as the average distance to its k-nearest neighbors :
where \MATH is the set of \MATH - neighbors of \MATH , and \MATH is the similarity between \MATH and \MATH .
Since faces are represented in high dimensional feature space , and face clusters might have different sizes , shapes and densities ; we do not use directly the Euclidean distance between two points in this feature space for \MATH .
Instead , we use another similarity measure defined by the number of shared neighbors between two points .
The efficiency of this similarity measure for density-based clustering methods was described . //There is no period here , so it is not clear if there should be a period or there should be more to this sentence that is not here . If the sentence does end here , you might want to go into more detail about who or what " described " this .]
A high value of \MATH indicates a strong association between \MATH and its neighbors .
Therefore , we can use this local density score to rank faces .
Faces with higher scores are considered to be potential candidates that are relevant to person-\MATH , while faces with lower scores are considered as outliers and thus are potential candidates for non-person-\MATH .
Algorithm 1 : Rank-By-Local-Density-Score Step 1 : For each face p , compute LDS( p , k ) , where k is the number of neighbors of p and is the input of the ranking process .
Step 2 : Rank these faces using LDS( p , k ) ( The higher the more relevant ) .
One limitation of the local density score based ranking is it could not handle the case that faces of another person have strong association in \MATH-neighbor set ( for example , many duplicates ) .
Therefore , another step is proposed to handle this case .
As a result , we have a model that can be used for both re-ranking current faces and predicting new incoming faces .
The main idea is to use a probabilistic model to measure the relevancy of a face to person-\MATH , \MATH .
Since the labels are not available for training , we use the input rank list found from the previous step to extract a subset of faces lying at the top and bottom of the ranked list to form the training set .
After that , we use SVM with probabilistic output \CITE implemented in LibSVM \CITE to learn the person-\MATH model .
This model is applied to faces of the original set and the output probabilistic scores are used to re-rank these faces .
Since it is not guaranteed that faces lying at two ends of the input rank list correctly correspond to the faces of person-\MATH and faces of non person-\MATH , we adopt the idea of bagging framework \CITE in which randomly selecting subsets to train weak classifiers , and then combining these classifiers help reduce the risk of using noisy training sets .
The details of Rank-By-Bagging-ProbSVM-InnerLoop method , improving an input rank list by combining weak classifiers trained from subsets annotated by that rank list are described in Algorithm 2 .
Step 1 : Train a weak classifier hi .
Step 1 .1 : Select a set Spos including p% top ranked faces and then randomly select a subset S?pos from Spos .
Label faces in S?pos as positive samples .
Step 1 .2 : Select a set Sneg including p% bottom ranked faces and then randomly select a subset S? neg from Sneg .
Label faces in S? neg as negative samples .
Step 1 .3 : Use S?pos and S? neg to train a weak classifier hj using LibSVM [8] with probability outputs .
Step 2 : Compute ensemble classifier Hi = Pij=1 hj .
Step 3 : Apply Hi to the original face set and form the rank list Ranki by using the output probabilistic scores .
Step 4 : Repeat steps from Step 1 to Step 3 until Dist2RankList( Ranki?1 ,Ranki ) <= ? .
Step 5 : Return Hi = Pij=1 hj .
Step 1 : Rankcur = Rank-By-Bagging-ProbSVM-InnerLoop( Rankprev ) .
Step 2 : dist = Dist2RankList( Rankprev ,Rankcur ) .
Step 3 : Rankfinal = Rankcur .
Step 4 : Rankprev = Rankcur .
Step 5 : Repeat steps from Step 1 to Step 4 until dist <= ? .
Step 5 : Return Rankfinal .
Given an input ranked list , Rank-By-Bagging-ProbSVM-InnerLoop is used to improve this rank list .
We repeat the process a number of times whereby the ranked list output from the previous step is used as the input ranked list of the next step .
In this way , the iterations significantly improve the final ranked list .
The details are described in Algorithm 3 .
To determine the number of iterations of Rank-By-Bagging-ProbSVM-InnerLoop and Rank-By-Bagging-ProbSVM-OuterLoop , we use the \MATH distance \CITE , which is a metric that counts the number of pairwise disagreements between two lists .
The larger the distance , the more dissimilar the two lists are .
The \MATH distance between two list \MATH and \MATH is defined as follows :
Since the maximum value of \MATH is \MATH where \MATH is the number of members of the list , the normalized Kendall tau distance can be written as follows :
Using this measure for checking when the loops stop means that if the ranked list does not change significantly after a number of iterations , it is reasonable to stop .
We used the dataset described in \CITE for our experiments .
This dataset consists of approximately half a million news [pictures / photos?] and captions from Yahoo News collected over a period of roughly two years .
This dataset is better than datasets collected from image search engines such as Google that usually limit the total number of returned images to 1 ,000 .
Furthermore , it has annotations that are valuable for evaluation of methods .
Note that these annotations are used for evaluation purpose only .
Our method is fully unsupervised , so it assumes the annotations are not available at running time .
Only frontal faces were considered since current frontal face detection systems \CITE can work in real time and have accuracies exceeding 95\% .
44 ,773 faces were detected and normalized to the size of 86\MATH86 pixels .
We selected fifteen government leaders , including George W. Bush ( US ) , Vladimir Putin ( Russia ) , Ziang Jemin ( China ) , Tony Blair ( UK ) , Junichiro Koizumi ( Japan ) , Roh Moo-hyun ( Korea ) , and Abdullah Gul ( Turkey ) , and other key individuals , such as John Paul II ( the Former Pope ) and Hans Blix ( UN ) , because their images frequently appear in the dataset \CITE .
The variations in each person 's name were collected .
For example , George W. Bush , President Bush , U.S. President , etc. , all refer to the current U.S. president .
We performed simple string search in captions to check whether a caption contains one of these names .
The faces extracted from the corresponding image associated with this caption were returned .
The faces retrieved from the different name queries were merged into one set and used as input for ranking .
Figure \REF shows the distribution of retrieved faces from this method and the corresponding number of relevant faces for these fifteen individuals .
In total , 5 ,603 faces were retrieved in which 3 ,374 faces were relevant .
On average , the accuracy was 60 .22\% .
We used an eye detector to detect the positions of the eyes in the detected faces .
The eye detector , built with the same approach as in \CITE , had an accuracy of more than 95\% .
If the eye positions were not detected , predefined eye locations were assigned .
The eye positions were used to align faces to a predefined canonical pose .
To compensate for illumination effects , the subtraction of the bestfit brightness plane followed by histogram equalization was applied .
This normalization process is shown in Figure \REF .
We then used principle component analysis \CITE to reduce the number of dimensions of the feature vector for face representation .
Eigenfaces were computed from the original face set returned by the text-based query method .
The number of eigenfaces used to form the eigen space was selected so that 97\% of the total energy was retained \CITE .
The number of dimensions of these feature spaces ranged from 80 to 500 .
We evaluated the retrieval performance with measures that are commonly used in information retrieval , such as precision , recall , and average precision .
Given a queried person and letting \MATH be the total number of faces returned , \MATH the number of relevant faces , and \MATH the total number of relevant faces , recall and precision can be calculated as follows :
Precision and recall only evaluate the quality of an unordered set of retrieved faces .
To evaluate ranked lists in which both recall and precision are taken into account , the average precision is usually used .
The average precision is computed by taking the average of the interpolated precision measured at the 11 recall levels of 0 .0 , 0 .1 , 0 .2 , . . . , 1 .0 .
The interpolated precision \MATH at a certain recall level \MATH is defined as the highest precision found for any recall level \MATH :
In addition , to evaluate the performance of multiple queries , we used mean average precision , which is the mean of average precisions computed from queries
The parameters of our method include :
-\MATH : the fraction of faces lying at the top and bottom of the ranked list that are used to form a positive set \MATH and negative set \MATH for training weak classifiers in Rank-By-Bagging-ProbSVM-InnerLoop .
We empirically selected \MATH ( i .e 40\% samples of the rank list were used ) since larger \MATH will increase the number of incorrect labels and smaller \MATH will cause over-fitting .
In addition , \MATH consists of \MATH samples that are selected randomly with replacement from \MATH .
This sampling strategy is adopted from the bagging framework \CITE .
The same setting was used for \MATH .
-\MATH : the maximum Kendall tau distance \MATH between two rank lists \MATH and \MATH .
This value is used to determine when the inner loop and the outer loop are stopped .
We set \MATH for balance between accuracy and processing time .
Note that smaller \MATH requires more number of iterations making the system 's speed slower .
-\MATH : the kernel type is used for SVM .
The default is linear kernel that is defined as : \MATH .
We have tested other kernel types such as RBF or polynomial , the performance did not change so much .
Therefore , we used the linear kernel for simplicity .
We performed a comparison between our proposed method with other existing approaches .
Text Based Baseline ( TBL ) : Once faces corresponding with images whose captions contain the query name are returned , they are ranked by the time order .
This is very naive method in which no prior knowledge between names and faces is used .
Distance-Based Outlier ( DBO ) : We adopted the idea of distance-based outliers detection for ranking \CITE .
Given a threshold \MATH , for each point \MATH , we counted the number of points \MATH so that \MATH , where \MATH is the Euclidean distance between \MATH and \MATH in the feature space mentioned in section \REF .
This number then was used as the score to rank faces .
We selected a range of \MATH values for experiments : \MATH .}
Densest Sub-Graph based Method ( DSG ) : We re-implemented the densest sub-graph based method \CITE for ranking .
Once the densest subgraph was found after an edge elimination process , we counted the number of surviving edge of each node ( i .e face ) and used this number as the score for ranking .
To form the graph , the Euclidean distance \MATH was used to assign the weight for the edge linked between node $p$ and node \MATH .
DSG require a threshold \MATH to convert the weighted graph to the binary graph before searching for the densest subgraph .
We selected a range of \MATH values that are the same as the values used in DBO : \MATH .
Local Density Score ( LDS ) : This is the first stage of our proposed method .
It requires the input value \MATH to compute the local density score .
Since we do not know the number of returned faces from text based search engines , we used another input value \MATH defined as the fraction of neighbors and estimated \MATH by the formula : \MATH , where \MATH is the number of returned faces .
We used a range of $fraction$ values for experiments : \MATH .
In the case of large number of returned faces , we set \MATH to the maximum value of 200 : \MATH .
Unsupervised Ensemble Learning Using Local Density Score ( UEL-LDS ) : This is a combination of ranking by local density scores and then the ranked list is used for training classifier [Singular or plural?]to boost the rank list .
Supervised Learning ( SVM-SUP ) : We randomly selected a portion \MATH of the data with annotations to train the classifier ; and then used this classifier to re-rank remaining faces .
This process was repeated five times and the average performance was reported .
We used a range of portion \MATH values for experiments : \MATH .
Figure \REF shows a performance comparison of these methods .
Our proposed methods ( LDS and UEL-LDS ) outperform other unsupervised methods such as TBL , DBO and DSG .
Furthermore , the performance of methods DBO and DSG are sensitive to the distance threshold ; while the performance of our proposed method is less sensitive .
It confirms that the similarity measure using shared nearest neighbors is relieable for estimation of the local density score .
The performance of UEL-LDS is slightly better than LDS since the training sets labeled automatically from the ranked list are noisy .
However , UEL-LDS improves the performance significantly even when the performance of LDS is poor .
These performances are worse than that of SVM-SUP using a small number of labeled samples .
Figure \REF shows an examples of top 50 faces ranked by the methods TBL , DBO , DSG and LDS .
The performance of DBO is poor since a low threshold is used .
This makes irrelevant faces that are near duplicates ( row 2 and row 3 in Figure \REF( b ) ) ranked higher than relevant faces .
This explains the same situation with DSG .
In Figure \REF , we show the performance of five single classifiers and that of five ensemble classifiers .
The ensemble classifier \MATH is formed by combination of single classifiers from \MATH to \MATH .
It clearly indicates that the ensemble classifier is more stable that single weak classifiers .
We conducted another experiment to show the effectiveness of our approach in which learned models can be used to annotate new faces of other databases .
For each name in the list , we used it as the query to obtain top 500 images from Google Image Search Engine .
Next , these images were processed as the steps described in section \REF : extracting faces , detecting eyes and doing normalization .
We projected these faces to the PCA subspace trained for that name and used the learned model to re-rank faces .
There were 4 ,103 faces ( including false positives - non-faces were detected as faces ) detected from 7 ,500 returned images .
We manually labeled these faces and there were 2 ,342 relevant faces .
On average , the accuracy of the Google Search Engine ( GoogleSE ) is 57 .08\% .
In Table \REF , we compare the performance of the methods .
The performance of UEL-LDS was obtained by running the best system , which is shown as the peak of UEL-LDS curve in Figure \REF .
The performances of SVM-SUP-05 and SVM-SUP-10 correspond to the supervised systems ( cf . section \REF ) that used \MATH of the data set respectively .
We evaluated the performance by calculating the precision at top 20 returned faces , which is popular for image search engines ; and recall and precision on all detected faces of the test set .
UEL-LDS achieved comparable performance to the supervised methods and outperformed the baseline GoogleSE .
The precision at top 20 of SVM-SUP-05 is poorer than that of UEL-LDS is due to small number of training samples .
Figure \REF shows top 20 faces ranked by these two methods .
Our approach works fairly well for well known people , where the main assumption that text-based search engines return a large fraction of relevant images is satisfied .
Figure \REF shows an example where this assumption is broken .
Consequently , as shown in Figure \REF , the model learned by this set obtained poor performance in recognizing new faces returned by GoogleSE .
Our approach solely relies on the above assumption , therefore it is not affected by the ranking of text-based search engines .
The iteration of bagging SVM classifiers does not guarantee a significant improvement in performance .
Our future work is to study how to improve the quality of the training sets used in this iteration .
We presented a method for ranking faces retrieved using text-based correlation methods in searches for a specific person .
This method learns the visual consistency among the faces in a two-stage process .
In the first stage , a relative density score is used to form a ranked list in which faces ranked at the top or bottom of the list are likely relevant or irrelevant faces .
In the second stage , a bagging framework is used to combine weak classifiers trained on subsets labeled from the ranked list into a strong classifier .
This strong classifier is then applied to the original set to re-rank faces on the basis of the output probabilistic scores .
Experiments on various face sets showed the effectiveness of this method .
Our approach is beneficial in the case multiple faces residing in the returned image as shown in Figure \REF .
A Text Segmentation Based Approach to Video Shot Boundary Detection
Video shot boundary detection is one of the fundamental tasks of video indexing and retrieval applications .
Although many methods have been proposed for this task , finding a general and robust shot boundary method that is able to handle various transition types caused by photo flashes , rapid camera movement and object movement is still challenging .
In this paper , we present a novel approach for detecting video shot boundaries in which we cast the problem of shot boundary detection into the problem of text segmentation in natural language processing .
By the formulation that each frame is considered as a word and shot boundaries are treated as boundaries of text segments ( e .g topics ) .
Text segmentation based approaches that have been well studied in natural language processing can be adopted .
Experimental results on various long video sequences show the effectiveness of our approach .
Recent advances in digital technology have made many video archives available .
Therefore scalable , efficient and effective tools for indexing and retrieving video are needed .
With a large amount of information encoded in one video , typically the first step of any video processing tools is to segment the input video into elementary shots in which each shot is defined as continuous frames from a single camera at a time .
By decomposing a video into shots and then extracting keyframes from these shots , a 30-minute video with 54 ,000 frames can be represented by around 500 keyframes ( 108 times smaller ) which are easily manageable for many video applications in indexing , browsing , summarization , retrieval and so on .
There are many types of transitions between shots .
According to TRECVID 's categorization \CITE , shot boundaries can be classified into two main categories : cut and gradual .
A cut is an abrupt shot change that occurs in a single frame while a gradual is a slow change that occurs in a number of consecutive frames .
With the gradual type , fades and dissolves are common .
A fade is usually a change in brightness with one or several solid black frames in between , while a dissolve occurs when the images in the current shot get dimmer and the images of the next shot get brighter \CITE .
Figure \REF shows examples of shot boundary types .
Many approaches have been proposed for shot boundary detection .
The simplest approach is to compute the differences between color distributions of consecutive frames and use a threshold to classify whether a hard cut occurs .
In order to detect gradual transitions , edge change ratio or motion vectors can be used \CITE .
Since these approaches use threshold-based models for detection , their advantage is fast speed .
Nevertheless , they are sensitive to changes of illumination and motion .
Furthermore , they are difficult to generalize for new datasets .
Recent works \CITE use machine learning methods for making decision and show impressive results on test videos of TRECVID \CITE which is a de-facto benchmark for evaluation of various techniques in shot boundary detection .
In this study , we propose a new approach inspired from natural language processing text segmentation techniques in which the problem of shot boundary detection is treated similarly to the problem of text segmentation .
Specifically , each frame is considered as a word and a set of consecutive frames , forming a shot , is considered as a text segment .
Then , the text segmentation problem can be considered a sequential tagging problem in which each word is labeled by one of labels such as
PRESEG ( word beginning of a segment ) , INSEG ( word inside a segment ) and POSTSEG ( word outside a segment ) .
Given a sequence of labeled words , the boundary between text segments can be identified .
The remaining of the paper is organized as follows .
In section \REF , we present an overview of our framework .
Section \REF introduces experiments on different long video sequences from TRECVID dataset .
Section \REF concludes the paper .
Given a video , the shot boundary detection process is carried out through two main stages .
In the first stage , frames are extracted and labeled by pre-defined labels .
In the second stage , shot boundaries are identified by grouping labeled frames into segments .
We use the following six labels to label frames in video : NORM -FRM ( frame of a normal shot ) , PRE -CUT ( pre-frame of a CUT transition ) , POST -CUT ( post-frame of a CUT transition ) , PRE -GRAD ( pre-frame of a GRADUAL transition ) , IN -GRAD ( frame inside a GRADUAL transition ) , POST -GRAD ( post-frame of a GRADUAL transition ) .
Given a sequence of labeled frames , shot boundaries and transition types are identified by looking up and processing frames marked by non NORM -FRM label .
For example , if we encounter two consecutive frames marked by IN-CUT and POST-CUT respectively , we can declare that a shot boundary occurs at these frames and the transition type is CUT .
In another case , if we encounter a number of frames marked by xxx-GRAD , we can declare a GRADUAL shot boundary occurs at these frames .
Figure \REF shows an example of labeled frames of a shot transition .
To label a frame in video , firstly we extract features for that frame and then use a classifier , that has been trained by annotated frames in advance , to classify it into one of six categories mentioned above .
The feature extraction process and classifier learning using support vector machine ( SVM ) are described in details below .
We use two typical features that are color moments , edge direction histogram for representing visual information of each frame .
However , using this representation is not discriminative enough for frame categorization since frames of a shot transition usually have strong relation to their neighbor frames .
For example , an abrupt change in illumination between two consecutive frames is a strong cue for a hard cut , or one solid black frames in between dark and then bright frames might help to identify a fade shot transition .
Therefore , in this study , we do not directly use above features .
Instead , we use them indirectly to model the difference and motion between the current frame and its neighbor frames .
Specifically , for each frame , we compute \MATH distances between the current frame \MATH and neighbor frames ranging from \MATH .
These distances are used to form a feature vector for frame \MATH in training and testing process later .
By this way , we can have a unified framework for shot boundary detection and consequently avoid to have special treatments for different shot boundary types as described in many works participated the TRECVID benchmark \CITE .
Color moments have been successfully used in retrieval systems and proved to be efficient and effective in representing color distributions of images \CITE .
The first order ( mean ) , the second order ( variance ) and the third order ( skewness ) color moments are defined as :
where \MATH is the value of the \MATH -th color component of the image pixel \MATH , and \MATH is the number of pixels in the image .
Edge orientation histogram has also been used widely in shot boundary detection \CITE .
The basic steps to compute edge orientation histogram feature are as follows :
Extract edges from the input image by using Canny edge detector .
Compute a \MATH -bin histogram of edge and non-edge pixels .
The first \MATH bins are used to represent edge directions quantized at \MATH interval and the remaining bin is used for counting non-edge pixels .
The histogram is normalized by the number of all pixels to compensate for different image sizes .
We use color moments and edge orientation histogram to compute distances between the current frame \MATH and it neighbor frames as follows :
The input image is converted to LUV color space ( for GCM ) or grayscale ( for EOH ) and then divided into sub-images by a \MATH grid .
The color moments and edge orientation histogram are extracted from these sub-images .
For color moments , there are \MATH values .
For edge orientation histogram , there are \MATH values for each input frame image .
Compute \MATH values which are the Euclidean distance between current frame \MATH and its neighbor frames ranging from \MATH .
In other words , we compute \MATH where \MATH .
These values \MATH are then used to form the feature vector for frame \MATH .
The Support Vector Machines ( SVM ) is a statistical learning method based on the structure risk minimization principle \CITE .
It has been very efficiently proved in many pattern recognition applications \CITE .
In the binary classification case , the objective of the SVM is to find a best separating hyperplane with a maximum margin .
The form of SVM classifiers is : \MATH
where \MATH is the d-dimensional vector of an observation example , \MATH is a class label , \MATH is the vector of the \MATH training example , \MATH is the number of training examples , and \MATH is a kernel function , \MATH is learned through the learning process .
SVM were originally designed for binary classification .
To handle the case of multi-class classification , there are two common approaches .
The first one is the one-against-all method that combines \MATH binary classifiers where \MATH is the number of classes .
The \MATH SVM classifier is trained by positive samples being examples of the \MATH class and negative samples being examples of the other classes .
The second one is the one-against-one method that combines \MATH binary classifiers in which each classifier is trained on examples of two classes .
There are seven classes in our framework : NORM FRM ( frame of a normal shot ) , PRE CUT ( pre-frame of a CUT transition ) , POST CUT ( postframe
of a CUT transition ) , PRE GRAD ( pre-frame of a GRADUAL transition ) , IN GRAD ( frame inside a GRADUALtransition ) , POST GRAD ( post-frame of a GRADUAL transition ) and NORM-FRM ( normal frame which does not belong to any shot transitions ) .
To learn this classifier , we manually annotate frames in the training data .
Using the trained classifier , we can label a sequence of frames with tags mentioned above .
A gradual transition usually has the pattern " ` . . . , PRE-GRAD , IN-GRAD , IN-GRAD , . . . , IN-GRAD , POS-GRAD , . . . " ' and a cut transition usually has the pattern " ` . . . , PRE-CUT , IN-CUT , . . . , IN-CUT , POST-CUT , . . . " ' .
The shot boundary detection process is started by checking these transition patterns in the tagged sequence .
Once a pattern is encountered , PRE-xxx and POST-xxx tags are used to identify the shot boundary and the two ends of the shot transition .
Since the classifier occasionally produce false predictions due to variations caused by photo flashes , rapid camera movement and object movement , only using the perfect match between the predefined patterns and sub-sequences usually skips many truth shot boundaries .
Instead , we use a more flexible matching algorithm in which a match is declared if a portion of the predefined pattern is found in the input sub-sequence .
We used annotated data sets from TRECVID 2003 test sets for training and testing .
We divided 8 videos , each 30-minute length , into two sets : training set and testing set .
The number of frames , the number of shot boundaries and types of these sets are shown in Table \REF .
Note that , the number of shot boundaries is equal to the number of frames with PRE-CUT / GRAD label and the number of frames with PRE-CUT / GRAD label is equal to the number of frames with POST-CUT / GRAD label .
We used \MATH grid for dividing the input image into sub-images .
As for edge orientation histogram , we used 12-bins for edge pixels and one bin for non-edge pixels .
Furthermore , we used 20 neighbor frames before and after the current frame ( \MATH ) for computing the distances .
These parameters were selected from our empirical studies when participating TRECVID 's tasks .
The extracted features are normalized to zero mean and unit standard deviation and then stored for training and testing .
Specifically , the normalized vector \MATH
where \MATH is the \MATH-th element of the feature vectors \MATH respectively , \MATH is the number of dimensions .
In order to handle the problem of imbalanced training sets where the number of NORM-FRM frames is much larger than other frames , we randomly take \MATH of NORM-FRM frames and 100\% of the other frames to form the training set .
We use LibSVM \CITE to train SVM classifiers with RBF kernel .
The optimal \MATH parameters are found by conducting a grid search with 5-fold cross validation on a subset 10 ,000 samples stratified selected from the original dataset .
As for multi-class classification , LibSVM used the one-against-one approach .
The results that were evaluated by a tool provided by TRECVID with standard measurement such as precision , recall and F1 score clearly show that our proposed method significantly outperforms the baseline method and the combination of GCM+EOH obtains the best result .
We evaluated the performance of our system with different choices for taking the number of NORM -FRM frames used in training process .
Specifically , we selected three sampling rates \MATH which are \MATH and \MATH .
As shown in Figure \REF , the best performance is obtained with the sampling rate of \MATH .
In Table \REF we show the evaluation of using different features for forming the feature vector using distances between current frames and its neighbors .
The first one is GCM , the second one is EOH and the last one GCM+EOH is combination of distances using GCM and distances using EOH .
The number of dimensions of feature vectors using GCM and EOH is 20 while that of feature vectors using GCM+EOH is 40 .
We also compare the proposed method with the baseline method that computes differences in color histograms between two consecutive frames and then decides a shot transitition by using a predefined threshold .
In Figure \REF , we superimpose our result on the results reported in the shot boundary detection task of TRECVID 2003 .
Our system achieves high precision and recall for the CUT transition and the result is comparable with the third-ranked system .
Note that our system is general and has no special treatment for particular shot transition .
Many previous shot boundary detectors usually divided the system into sub-systems in which special treatments were proposed to handle different types of shot transitions .
Therefore , it is difficult to generalize for new test sets .
Different from these approaches , in this paper , we have proposed a unified and general framework for shot boundary detection using a text segmentation based approach .
Firstly , we label frames by one of six labels defined for different types of frames : NORM -FRM , PRE -CUT , POST -CUT , PRE -GRAD , IN -GRAD and POST -GRAD .
Then we extract shot boundaries and types from these labeled frames .
In order to label frames , we proposed a new feature type to model the difference and motion in color and edge between frames and used it in classification with SVM classifiers .
Experiments on various videos of TRECVID 2003 have shown that our approach is effective .
Ent-Boost : Boosting Using Entropy Measure
for Robust Object Detection
Recently , boosting is used widely in object detection applications because of its impressive performance in both speed and accuracy .
However , learning weak classifiers which is one of the most significant tasks in using boosting is left for users .
In Discrete AdaBoost , weak classifiers with binary output are too weak to boost when the training data is complex .
Meanwhile , determining the appropriate number of bins for weak classifiers learned by Real AdaBoost is a challenging task because small one might not well approximate the real distribution while large one might cause over-fitting , increase computation time and waste storage space .
This paper describes a novel method for efficiently learning weak classifiers using entropy measures , called Ent-Boost .
The class entropy information is used to estimate the optimal number of bins automatically through discretization process .
Then Kullback-Leibler divergence which is the relative entropy between probability distributions of positive and negative samples is employed to select the best weak classifier in the weak classifier set .
Experiments have shown that strong classifiers learned by Ent-Boost can achieve good performance , and have compact storage space .
Results on building a robust face detector are also reported .
Building a robust and reliable classifier is always a fundamental problem of pattern recognition .
Several kinds of classifiers , such as Neural Network [1] and Support Vector Machines [2] , have been proposed and applied successfully in many object-detection systems .
Boosting [3] and its variants [4] ,[5] ,[6] ,[7] ,[8] ,[9] ,[10] have recently gained a lot of attentions from researchers because of its excellent performance .
In regards to face detection , for example , the methods described in works [4] ,[5] ,[10] represent the state of the art in terms of both high accuracy and running speed .
The main idea of boosting is to combine the performance of weak classifiers to form a strong classifier .
Typically , each weak classifier is any classifier whose performance is better than random guessing ( i.e. , error rate is less than 0 .5 ) .
Performances of weak classifiers are integrated into the final form of the strong classifier through a learning process in which more accurate weak classifiers have larger weights in final voting .
In practical problems , designing and learning weak classifiers are left for practitioners with two main challenges : computational evaluation and discriminant power .
Generally , for efficient computation , the dimension of the input space of weak classifiers is reduced to much lower than that of the strong classifier .
In object-detection frameworks [4] ,[5] ,[11] ,[12] ,[13] weak classifiers are usually constructed from one or several features .
For example , a weak classifier can be constructed from one Haar wavelet feature that is evaluated very rapidly through an integral image [4] .
Given a feature type , choosing the suitable way to form a weak classifier that balance efficiency and computation is still a open problem [14] .
There are two key trends for seeking the most discriminant weak classifier .
The first trend is dealing with the problem of how to design features for best representation of the target object .
Besides Haar wavelet features [4] , Gabor wavelets [5] , edge orientation histogram ( EOH ) [11] , orientation dominants [12] , scale invariant feature transform ( SIFT )-based-high-level features [13] and local binary pattern ( LBP ) [15] have also been used .
The second trend is studying how to optimally select the best weak classifier from a weak classifier set .
In Discrete AdaBoost [16] , weak classifiers are threshold-functions whose the output is restricted to binary .
This leads weak classifiers are too weak to boost when handling complex data sets .
For example , in later layers of the cascaded face classifiers [4] , the error rate of weak classifiers is between 0 .4 and 0 .5 .
Meanwhile , in Real AdaBoost [3] , a generalized version of Discrete AdaBoost , weak classifiers are piece-wise functions whose the output is a real value representing the confidence-rated prediction .
Normally , to construct such weak classifiers , one splits the input space \MATH into non-overlapping blocks ( or subspaces ) \MATH , \MATH , . . . , \MATH so that the predictions of the weak classifier are the same for all instances falling into the same block .
In the case of one-feature-based weak classifiers , this is equivalent to dividing the real line into intervals .
Typically , most current works [5] ,[17] ,[6] ,[8] ,[10] split the data into \MATH bins that are equal width which suffers from following limitations :
-Choosing the appropriate number of bins is undetermined .
Normally , it has been done by trials and errors [6] ,[17] - a tedious task .
In the training cascade of classifiers [6] ,[17] , when the complexity of the training data changes over time , using the same number of bins for training every layers is not optimal .
-Choosing a large number of bins might cause over-fitting because of outliers in the case of noisy data [18] .
Furthermore it might increase computation and training time , waste storage space which is critical in applications with limited resources , for example , face detection on mobile phones .
Meanwhile choosing a small number of bins might not well approximate the real densities of the data distribution and thus influence selection of the best weak classifier .
It is therefore necessary to have a deterministic method to choose this number of bins automatically and optimally .
This problem can be formulated as a discretization problem in which subspace boundaries are found by some criteria .
Among discretization methods , the entropy based method [19] has been proved most efficiently ; hence , we propose using it to solve the problem .
The entropy based discretization method is an algorithm that automatically selects appropriate thresholds to split feature values into optimal bins by using entropy measurement .
It is a supervised discretization method which takes into account class information and data distribution , so it is generic and can be applied for any kinds of input data .
Furthermore , many studies have been shown that discretization process might help to improve performance in induction tasks [18] , it can also work with a weighted data distribution ; therefore , it is most appropriate for boosting-based methods .
Besides learning weak classifiers , selecting the best weak classifier in the large weak classifier set in each round of boosting is also important .
Adopting [5] , it is done by choosing the weak classifier that maximizes Kullback-Leibler ( KL ) divergence between two distributions of positive and negative samples .
The integration of entropy-based discretization process and optimal weak classifier selection into the current boosting framework forms a new variant of AdaBoost , called Ent-Boost .
Experiments on building a robust face detector have shown effectiveness of this new boosting scheme .
Originally , Discrete AdaBoost proposed by Freund and Schapire [16] is a learning method of combining weak classifiers to a strong classier .
Given a training set \MATH where \MATH and \MATH , a weak classifier \MATH has the form \MATH .
Normally , a weak classifier is any classifier whose performance measured by error rate is less than 0 .5 .
Therefore , in many applications [4] ,[5] ,[7] , it is simplified by associating to one feature \MATH .
Through boosting processing , weak classifiers are combined into a strong classifier \MATH where \MATH are values that measure performance of the selected weak classifier .
In boosting process , a distribution \MATH or set of weights over the training samples are maintained and updated so that subsequent weak classifiers focus on the hard classified samples .
Real AdaBoost [3] is a generalized version of Discrete AdaBoost in that weak classifiers are real-valued functions instead of binary ones and \MATH is found numerically in general instead of predescription .
This method also proposes designing weak classifiers that partition the input space into subspaces so that its predictions are unique in each subspace .
Such weak classifiers are used widely in current state of the art object detection systems [5] ,[17] ,[8] .
Suppose that \MATH , \MATH , . . . , \MATH is a partition of the domain \MATH on which such weak classifiers $h$ are defined .
The prediction of \MATH depends only on which block \MATH a given instance falls into .
On the other hand , \MATH for all \MATH .
In the case of one-feature-based weak classifiers , the histograms of positive and negative samples are computed as follows \MATH where \MATH .
It is proved in [3] that the most appropriate choice for the prediction of the weak classifier on block \MATH to maximize the margin is \MATH where \MATH is a smoothed value in order to handle cases that \MATH is very small or even zero .
A summary of the Real AdaBoost algorithm is given in Algorithm 1 .
Real AdaBoost is easy to implement ; however , in practical applications , designing and learning weak classifiers depend on specific applications .
In such face detection systems as [5] ,[6] ,[17] ,[8] , weak classifiers are usually associated with one feature .
With a very large number of available features , hundreds of thousands , there are a lot of choices to choose one weak classifier for each round of boosting .
Generally , optimally selecting the suitable weak classifier will make the final strong classifier more robust and efficient .
Furthermore , it can reduce the number of boosting rounds that directly shorten training time .
So far , most current studies have been focused on how to measure the discriminant power of weak classifiers in order to select the best weak classifier .
Many measurements have been proposed ; for example , Bhattacharyya distance [6] , Kullback-Leibler divergence [5] and , recently , Jensen-Shannon divergence [8] and mutual information [9] ( cf . Table 1 .
Meanwhile , few studies have been made for efficiently partitioning subspaces .
As shown in Figure 1 , using a fixed number of bins , strong classifiers trained by above measurements give comparable performance .
However , it will be shown in section 5 , these performances are affected seriously if different subspace splitting methods are used .
The proposed boosting scheme Ent-Boost is an integration of adaptive entropy-based subspace splitting and the symmetric KL divergence-based weak classifier selection .
In Ent-Boost , each weak classifier is constructed from one feature and trained on the weighted training samples similar to Real AdaBoost .
However , instead of using equal-width binning method like Real AdaBoost [6] ,[17] which is hard to know the suitable number of bins in advance , we use entropy-based discretization method [19] to split the input space into subspaces .
This subspace splitting process is totally automatically in which the stopping criteria of splitting process is determined through using Minimum Description Length Principles ( MDLP ) ( see the next section ) .
To select the best weak classifier from the input weak classifier set , we use symmetric KL divergence as in [5] which measures the distance between two distributions as follows : \MATH where \MATH and \MATH are probability distributions of a discrete random variable .
This formula can be rewritten in entropy terms : \MATH or \MATH where \MATH and \MATH are entropy , and \MATH is cross entropy of \MATH and \MATH .
The outline of Ent-Boost is shown in Algorithm 2 .
Note that the discretization process is performed in every round of boosting to adapt to new distributions of samples .
As a result , the number of intervals of selected weak classifier varies .
This is different from previous methods that fix the number of equal-width intervals in advance .
This section gives a brief introduction on automatic subspace splitting using entropy-based discretization .
Basically , discretization is a quantizing process that converts continuous values into discrete values ; it typically consists of four steps [18] :
Step 1 : Sorting the continuous values of the feature to be discretized .
Step 2 : valuating candidate cut-points and selecting the best cut-point for splitting .
A cut-point is a threshold value that divides the range of continuous values into two intervals ; one interval is less than or equal to the threshold , and the other interval is greater than the threshold .
Step 3 : Splitting the data into two intervals using the selected cut-point in step 2 .
Step 4 : Continuing discretization with each interval until a stopping criteria is satisfied .
The stopping criteria are usually selected according to a trade-off between lower arity ( the number of intervals or the number of bins ) and its effect on the accuracy of classification tasks .
A higher arity can make the understanding of an attribute more difficult , while a very low arity may affect predictive accuracy negatively .
Given a set \MATH of sorted continuous values \MATH , candidate cut-points are usually selected as mid-points of every successive pair of \MATH .
On the other hand , candidate cut-points are \MATH .
For each cut-point \MATH that splits set \MATH into two subsets \MATH , the class entropy of a subset \MATH is defined as \MATH where \MATH is the number of classes \MATH , and \MATH is the proportion of examples in \MATH that have class \MATH .
To evaluate the resulting class entropy after set \MATH is partitioned into two sets \MATH and \MATH , the class-information entropy of the partition induced by cut-point T is defined by taking the weighted average of their resulting class entropies \MATH he best cut-point selected in step 2 is the cut-point \MATH for which \MATH is minimal amongst all the candidate cut-points .
Given set S and a potential binary partition , \MATH , specified on S by the given cut-point \MATH , a stopping criteria is used to decide whether or not this partition should be accepted .
If the answer is YES , the discretization will continue with each partition given by \MATH ; otherwise , the discretization process will stop .
Suppose \MATH is the probability of a \MATH answer , and \MATH is the probability of the \MATH answer .
Partition \MATH is only accepted if \MATH .
However , in practice , there is no easy way to estimate these probabilities directly .
Instead , Fayyad and Irani [19] proposed using MDLP to indirectly estimate them .
Originally , the minimum description length of an object is defined as the minimum number of bits required to uniquely specify that object out of the universe of all objects .
To employ MDLP in choosing the stopping criteria , Fayyad and Irani formulated the above problem as a communication problem between a sender and a receiver .
It is assumed that the sender has the entire set of training examples , while the receiver has the examples without their class labels .
The sender needs to convey to proper class labeling of the example set to the receiver .
It says that the partition induced by a cut-point is accepted if and only if the length of the message required to send before partition is more than the length of the message required to send after partition .
By inferring from coding hypothesis , the stopping criteria is defined as follows : MDLP Criteria :A partition induced by cut-point \MATH for a set \MATH of \MATH examples is accepted iff :\MATH
where \MATH and \MATH \MATH is the number of classes in \MATH Extensive experiments [19] ,[18] recommended that this method should be the first choice for variable discretization because it gives small number of cut-points while maintaining consistency .
For experiments , face and non-face patterns are of size 24x24 .
A set of 10 ,000 face patterns were collected from the Internet .
Another set of 10 ,000 hard non-face patterns were false positives collected by running a cascade of 17 AdaBoost classifiers at different locations and scales on 8 ,440 images with various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
The 10 ,000 patterns in each set are divided into a training set of 6 ,000 patterns and a test set of 4 ,000 examples .
Some examples of the collected 24x24 face and non-face patterns are shown in Figure 2 .
Haar wavelet feature that has been widely used in many face detection systems [4] ,[6] ,[14] is used in our experiments .
It consists of four kinds of features modeled from adjacent basic rectangles with the same size and shape .
The feature value is defined as the difference of sum of the pixels within rectangles ( cf . Figure 3 ) .
In total , 134 ,736 features were used for training classifiers .
Figure 4 shows a comparison of performances of strong classifiers trained by different boosting schemes that are AdaBoost [4] , Real AdaBoost [17] and Ent-Boost .
Each strong classifier is a combination of 80 weak classifiers ( using more weak classifiers does not improve much the performance ) .
As for Real AdaBoost , the subspace splitting is done by equal width binning in which the number of bins is arbitrarily selected to be 64 and 128 .
The curves indicate that the performances of Real AdaBoost and Ent-Boost are better than that of AdaBoost .
In addition , the performance of Real AdaBoost classifiers varies when using different number of bins .
Overall , Ent-Boost has the best result .
As for storage space , the Ent-Boost based classifier only employs 6 .79 bins on average which is much smaller than that of Real AdaBoost-based classifiers .
Using Ent-Boost , a robust face detector was built .
It was a cascade of Ent-Boost based classifiers that were trained similar to [4] .
The result cascade has 25 layers employing 3 ,850 features .
Performances of AdaBoost-based face detector [4] and Ent-Boost based face detector on MIT+CMU test set [1] shown in Table 2 has confirmed the effectiveness of our proposed boosting scheme .
Some detection results are given in Figure 5 .
We have presented Ent-Boost , a variant of AdaBoost , which uses entropy measure for automatic subspace splitting and optimal weak classifier selection .
The resulted strong classifier has good performance and compact storage .
Furthermore , it overcomes the main limitation of Real AdaBoost which is hard to determine the suitable number of bins for subspace splitting .
By considering the class information and the distribution of the input data in splitting process , this method is generic and can be applied to other applications .
Experiments have shown promising results , especially in building a robust face detector .
ROBUST OBJECT DETECTION USING FAST FEATURE SELECTION FROM HUGE FEATURE SETS
This paper describes an efficient feature selection method which quickly selects a small subset out of a given huge feature set for building robust object detection systems .
In this filter-based method , features are selected so that not only maximizing their relevance with the target class but also minimizing their mutual dependency .
As a result , the selected feature set only contains highly informative and non-redundant features which when combined together , significantly improve classification performance .
The relevance and mutual dependency of features are measured by using conditional mutual information ( CMI ) in which features and classes are treated as discrete random variables .
Experiments on different huge feature sets have shown that the proposed CMI-based feature selection can both reduce significantly the training time and achieve high accuracy .
One of the fundamental research issues in pattern recognition is feature selection which is the task of finding a small subset out of a given large set of features .
It is significant due to the following three reasons .
First , there are many ways to represent a target object , leading to a huge feature set .
For example , the number of Haar wavelet features used in [1] for face detection is hundreds of thousands .
However , only small and incomplete training sets are available .
As a result , these systems suffer from the curse of dimensionality and over-fitting .
Second , a huge feature set usually includes many irrelevant and redundant features that can degrade the generalization performance of classifiers , waste storage space and increase training time [2 , 3] .
Third , selecting an optimal feature subset from a huge feature set can improve the performance and speed of classifiers .
Furthermore , less complex model is easier to understand and verify .
In face detection , the success of systems such as those in [1 , 4] comes mainly from efficient feature selection methods .
Generally , feature selection methods can be categorized into two kinds : filter-based approach and wrapper-based approach [5] .
The filter-based approach is independent of any induction algorithm while the wrapper-based approach is associated with a specific induction algorithm to evaluate the goodness of the selected feature subset .
In the filter-based approach , features are normally selected based on their individual predictive power which is measured by Fisher scores , Pearson correlation [6] or mutual information [7] .
The major advantage of these methods is their speed and ability to scale to huge feature sets .
However , the mutual relationships between features is often not taken into account , leading selected features might be highly redundant and less informative because two features with high individual predict power when combined together might not bring significant performance improvement compared with two features which one of them has low predictive power but is useful when combined with others .
Since wrapper-based feature selection methods use machine learning algorithms as a black box in selection process , they can suffer from over-fitting in situations of small training sets .
Furthermore , in practical object detection systems as in [1 , 8] , the feature sets usually have hundreds of thousands features , using wrapper-based methods is obviously inefficient because of very high computation cost .
For example , in the state of the art face detection system [1] , choosing a 6 ,061- feature set out of a 180 ,000-feature set by AdaBoost has taken several weeks .
Consequently , conditional mutual information ( CMI ) based feature selection methods have been proposed [9 , 8 , 7 , 10] to take full advantage of above approaches for handling large scale feature sets .
The main idea of CMI-based methods is to select features which maximize their relevance with the target class and simultaneously minimize mutual dependency between selected ones .
It does not select a feature similar to already selected ones , even if it is individual powerful , as selecting it might not increase much information about the target class [7] .
One of the important tasks in using CMI-based methods is mutual information estimation which involves to compute probability densities of continuous random variables .
In [9] , Kwak and Choi used Parzen windows based density estimation method in which many parameters such as kernel function and window width are complicated to determine .
For simplification , discretizing features is often used .
So far , in object detection systems like [8 , 7] , features are treated as binary random variables by choosing appropriate thresholds .
However , binarizing features is not a suitable way to handle highly complex data for which it is hard to find the best threshold .
It is better if multiple thresholds are used to discretize data .
Such a simple method is equal-width binning which divides the range of feature values into m equal sized bins , where m must be known in advance .
Our method is also a CMI-based feature selection method .
However , the main distinguished point is that it employs the entropy-based discretization method [11] to discretize features .
This discretization method is simpler than Parzen windows based density estimation method and more efficient than binary discretization .
Furthermore , contrary to equal-width binning , it can automatically evaluate the optimal number of bins based on data distribution .
Experiments show that the proposed method can well handle huge feature sets for face detection such as Haar wavelets [1] and Gabor wavelets [12] , significantly reduce the training time while maintaining high classification performance .
FEATURE SELECTION " >
Huge feature sets usually contain four kinds of features : ( i ) irrelevant features , ( ii ) weakly relevant and redundant features , ( iii ) weakly relevant but non-redundant features and ( iv ) strongly relevant features in which ( iii ) and ( iv ) are the objective of feature selection methods [13] .
To measure relevance of a feature , the entropy-based measure which quantifies the uncertainty of random variables is normally used .
The entropy of a discrete random variable X is defined as : \MATH and the conditional entropy of X after another variable Y is known is defined as \MATH
The mutual dependence between two random variables is measured by mutual information \MATH .
The conditional mutual information is defined as : \MATH
In the first step , the most relevant feature F1 which has the highest mutual information is selected .
However , in the second step , the condition to select feature F2 is not its mutual information alone , but how much information of F2 can add with respect to the already existing F1 .
Therefore , F2 is selected so that maximizing :\MATH .
Following the same scheme , we iteratively add the feature that brings the highest increase of information content contained in current selected feature set .
The next feature Ft to be added at iteration t is defined by :\MATH .
In order to simply estimate mutual information , the easiest way is features are discretized in binary values by specifying thresholds [8 , 7] .
However , for complex data , it is not efficient ; therefore , we use entropy-based method proposed by Fayyad and Irani [11] for discretization .
This method is a supervised method , thus it is generic and can adapt very well to any kind of data distributions .
Basically , discretization is a quantizing process that converts continuous values into discrete values .
Suppose that we are given a set of instances S , a feature A and a cut-point T ( a cutpoint is a threshold value that divides the range of continuous values into two intervals ; one interval is less than or equal to the threshold , and the other interval is greater than the threshold ) .
The class-information entropy of the partition induced by T is defined as :
Among candidate cut-points , the best candidate cut-point Tmin which minimizes the entropy function \MATH is selected to split \MATH into two partitions \MATH and \MATH .
This process can then be repeated recursively to \MATH and \MATH until some stopping condition is satisfied , thus creating multiple intervals on the feature \MATH .
Using MDLP , the stopping criteria is proposed by Fayyad and Irani [11] as follows :
MDLP Criteria : A partition induced by cut-point T for a set S of N examples is accepted if : \MATH Where \MATH ,where \MATH , \MATH , \MATH is the number of classes in \MATH , \MATH , \MATH .
Extensive experiments [11 , 14] have shown that this method is one of the best variable discretization one because it gives small number of cut-points while maintaining consistency .
The outline of the proposed feature selection method is shown in Algorithm 1 .
For experiments , a set face and non-face patterns of size 24x24 was used .
A set of 10 ,000 face patterns were collected from the Internet .
Another set of 10 ,000 complex non-face patterns were false positives collected by running a face detector based on a cascade of 17 AdaBoost classifiers at different locations and scales on 8 ,440 images with various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
The 10 ,000 patterns in each set were divided into a training set of 6 ,000 patterns and a test set of 4 ,000 patterns .
Some examples of the collected 24x24 face and non-face patterns are shown in Figure 1 .
Two types of features that are Haar wavelet feature and Gabor wavelet feature were used in experiments .
Haar wavelet features have been widely used in many face detection systems [1 , 15] .
It consists of four kinds of features modeled from adjacent basic rectangles with the same size and shape .
The feature value is defined as the difference of sum of the pixels within rectangles .
In total , 134 ,736 features were used for training classifiers .
Gabor wavelet features have also often been used in face recognition systems [12] and are defined as : \MATH where \MATH and \MATH define the orientation and scale of the Gabor kernels respectively , \MATH , and the wave vector \MATH , is defined as : \MATH where \MATH , \MATH \MATH .
The Gabor representation of a face image is computed by convolving the face image with the Gabor filters .
Let \MATH be the face image , its convolution with a Gabor filter �� ,_( z ) is defined as : \MATH where \MATH denotes the convolution operator .
Similar to [12] , Gabor kernels at five scales \MATH and eight orientations \MATH were used .
At each pixel position , 40 Gabor features are computed by convolving the input image with the real part of Gabor filters .
As a result , \MATH there are \MATH Gabor features for one 24x24 training sample .
In order to show effectiveness of the proposed feature selection method ( CMI-Multi ) , we compared it with two other feature selection methods that are forward feature selection ( FFS ) [16] and CMI-basedmethod using binary features ( CMIBinary ) [8 , 7] on the data set and feature setsmentioned above .
All classifiers were trained using AdaBoost similar to [1] .
We chose the forward feature selection proposed by Wu et. al. [16] because it has very impressive results when not only reducing significantly the training time of AdaBoost-based face detection system [1] ( about 100 times ) but also maintaining comparable performance .
Figure 2 shows performance of classifiers trained by Haar feature subsets selected by three feature selection methods .
It indicates that , the proposed method CMI-Multi outperforms the others while FFS and CMI-Binary have comparable performance .
The similar result is also shown when tested on Gabor wavelet features .
In this case , CMI-based feature selection methods obviously outperform FFS and CMI-Multi is confirmed to be more efficient than CMI-Binary .
Because our proposed method uses same principle as FFS which only trains weak classifiers once , it is extremely fast compared with AdaBoost [1] .
We built two cascade of AdaBoost classifiers that use CMI-Multi and AdaBoost [1] as feature selection methods .
Testing on the standard benchmark MIT+CMU test set , they have comparable performance .
However , CMI-Multi is trained faster than AdaBoost approximately 70 times .
We have presented a fast feature selection method using conditional mutual information to handle huge feature sets .
The estimation of mutual information is simplified by using MDLP based discretization method .
Integrated into AdaBoost-based object detection systems , it can not only reduce the training time significantly but also achieve high classification performance .
Experiments on two popular feature sets such as Haar wavelets and Gabor wavelets have demonstrated the effectiveness of the proposed method .
A Multi-Stage Approach to Fast Face Detection
A multi-stage approach --- which is fast , robust and easy to train --- for a face-detection system is proposed .
Motivated by the work of Viola and Jones [1] , this approach uses a cascade of classifiers to yield a coarse-to-fine strategy to reduce significantly detection time while maintaining a high detection rate .
However , it is distinguished from previous work by two features .
First , a new stage is added to detect face candidate regions more quickly by using a larger window size and larger moving step size .
Second , SVM classifiers are used instead of AdaBoost classifiers in the last stage , and Haar wavelet features selected by the previous stage are reused for the SVM classifier robustly and efficiently .
By combining AdaBoost and SVM classifiers , the final system can achieve both fast and robust detection because most non-face patterns are rejected quickly in earlier layers , while only a small number of promising face patterns is classified robustly in later layers .
The proposed multi-stage-based system is shown to run faster than the original AdaBoost-based system while maintaining comparable accuracy .
Face detection is one of the most active research areas in computer vision because of its many interesting applications in fields such as security , surveillance , multimedia retrieval , and human-computer interaction .
For example , face detection is combined with other modules to identify who a person in a video sequence is [2] .
Face locations , the results of a face detection system , can be used for applications such as face recognition and video indexing [3] .
Although it has been studied for more than 30 years , developing a fast and robust face detection system that can handle the variations found in different faces in real applications , such as facial expressions , pose changes , illumination changes , complex backgrounds , and low resolutions , is still a challenging research target [4] .
Recently , with advances in machine learning research , Neural Network [5] ,[6] , Support Vector Machines ( SVM ) [7] ,[8] ,[9] and AdaBoost [1] ,[10] ,[11] ,[12] ,[13] are typical choices for building robust face detectors .
Current research is focusing on feature extractions and appropriate structures for combining classifiers .
Generally , to classify an input pattern of intensities as a face or non-face , features must be extracted and normalized before passing to a classifier [14] .
There are many kinds of features that have been used ranging from simple features such as intensity values [7] ,[5] and eigenspace [15] to complex features such as wavelets [16] ,[1] ,[12] , edge orientation histograms [17] ,[18] and Bayesian discriminating features ( BDF ) [19] .
Discriminative and informative features usually increase detection rate and reduce complexity of the training procedure [17] .
In a typical face detector which is scale-free and location-free , the number of analyzed patterns is usually very large ( 160 ,000 patterns for a 320x240 pixel image ) because the face classifier has to scan over the input image at every location and every scale .
However , the huge majority of the analyzed patterns are non-face .
Statistics from [9] have shown that the ratio of non-face to face patterns is about 50 ,000 to 1 .
Face detectors based on single classifiers such as SVM [7] ,[8] ,[9] and Neural Network [6] ,[5] are usually slow because they process non-face regions and face regions in the input image equally .
To deal with the problem of processing a large number of patterns , a combination of simple-to-complex classifiers is proposed [8] ,[1] ,[9] ,[20] ,[21] ,[11] .
In particular , fast and simple classifiers are used as filters at the earliest stages to quickly reject a large number of non-face patterns and a slower yet more accurate classifier is then used for classifying face-like patterns .
By this way , the complexity of classifiers is adapted corresponding to the difficulty in the input patterns .
In [8] , non linear SVM classifiers using pixel-based features are arranged into a sequence with increasing number of support vectors , or in [9] , linear SVM classifiers trained at different resolutions are used for rejection and a reduced set of principle component analysis ( PCA )-based features are used with the non linear SVM at the classification stage in order to reduce computation time .
In [1] , AdaBoost based classifiers are arranged in a degeneration decision tree or a cascade .
Using about 10 features of the first two layers , more than 90\% of non-face patterns are rejected .
Recently , boosting chain [20] and nested cascade [11] have also been proposed for improvements .
It is believed that the cascade structure of classifiers is the key factor in enhancement of current real-time face detectors .
This work is motivated by Viola and Jones [1] who proposed a framework for fast and robust face detection .
Their success mainly comes from three contributions :
-Firstly , the cascaded structure of simple-to-complex classifiers reduces computation time dramatically ( as mentioned above ) .
-Secondly , AdaBoost is used to select discriminative and significant features from a pool of a very large number of features and then construct the classifier .
The output classifier built from these selected features is very fast and robust in classification .
Compared to SVM-based classifiers or neural network-based classifiers , AdaBoost based classifiers are hundreds of times faster .
-Thirdly , Haar-wavelet features used for all stages are informative [22] and evaluated extremely fast due to the introduction of the integral image .
However , this framework still has the following problems :
-First , the cascaded classifiers that use AdaBoost and Haar wavelet features are only efficient in quickly rejecting simple non-face patterns .
To robustly classify complex patterns , it is necessary to use a larger number of features and layer classifiers .
This need is apparent when face and non-face patterns become hard to distinguish , weak classifiers are too weak to boost [22] .
With the first several layers in our experiment ( cf. Figure 1 ) , using some 800 weak classifiers , more than \MATH of non-face patterns are rejected .
However , turning the later layers into robustly classifying a smaller number of remaining patterns , it requires a lot more , e.g. , 5 ,660 , weak classifiers , thus making the training task much more complicated .
-Second , the training process is complicated .
Firstly , it requires a long training time because the training time is proportional to the number of features in the input feature set ( which is normally hundreds of thousands ) and the number of training samples ( which is generally tens of thousands ) .
In our experiment , with 20 ,000 training samples and 134 ,736 features , the average training time for choosing one feature associated with the weak classifier is about 30 minutes on a PC ( Pentium 4 , 2 .8 MHz , 512-MB RAM ) .
Therefore , training a cascade of classifiers with around 6 ,060 features [1] might take in order of several weeks .
Secondly , AdaBoost-based classifiers are constructed by adding features after each round of boosting , so several training parameters must be tuned manually while training .
In practice , for stopping training a classifier , at least the following three parameters must be determined in advance : minimum detection rate , maximum false positive rate , and maximum number of boosting rounds ( or the number of weak classifiers of each layer ) .
Because the complexity of the training sets varies through layers in the cascade , it is undetermined how to choose these parameters automatically and optimally .
For example , in the first layers , it is quite easy to train a classifier with a minimum detection rate of \MATH and a maximum false-positive rate of \MATH .
However , in later layers , choosing the detection rate of \MATH will give a false positive rate greater than \MATH [22] .
Adding more features directly increases computation time and might cause over-fitting .
The authors therefore propose a multi-stage approach to build a face-detection system by adopting the advantages of Viola and Jones' approach and by introducing a method to address the above problems .
Specifically , for quick rejection of non-face patterns , we reuse two key ingredients of Viola and Jones' system , that is , the cascaded structure of simple-to-complex classifiers and AdaBoost trained with Haar-wavelet features .
Furthermore , for robust classification and simple training , we propose using SVM classifiers for later layers .
The contribution of this approach is three fold :
-First , to detect the face candidate regions , a new stage ( using a larger window size and a larger moving step size ) is added .
We use 36 x 36-pixel window-based classifiers with a moving step size of 12 pixels , to quickly estimate the candidate face regions .
The idea of using larger windows and moving the step size was adopted in [5] , but it severely degraded performance .
To improve speed while maintaining high accuracy , our approach takes advantage of the combination of the Haar wavelet features and the AdaBoost learning for fast and robust evaluation
Second , how to efficiently reuse the features selected by AdaBoost in the previous stage , for the SVM classifiers of the last stage , is investigated .
Reusing these features brings to two advantages : ( i ) Haar wavelet features are very fast in evaluating and normalizing [1] .
Furthermore , it is unnecessary to re-evaluate these features because they have been previously evaluated .
( ii ) By using SVM classifiers with powerful generalization , using too many features in the cascade is avoided , therefore importantly training time is saved and over-fitting is avoided .
Third , the training time of AdaBoost classifiers is shortened by using simple sampling techniques to reduce the number of features in the feature set .
Experiments will show that for rejection , using a full feature set and a sampled feature set gives the comparable performance .
Along with using several SVM classifiers instead of many AdaBoost classifiers in later layers , the total training time is reduced significantly .
There have been several studies working on how to handle the drawbacks of Viola and Jones' system .
Wu et al. [23] used direct feature selection to reduce training time while maintaining comparable performance .
Their idea is to separate the training process into two stages : feature selection and classifier construction .
In Viola and Jones' work , features are selected by the discriminative performance of their associated weak classifiers through the boosting process .
It is therefore very time consuming because all weak classifiers must be trained every time one feature is selected .
With their new proposal , weak classifiers are trained only once and features are selected by the direct feature selection method that directly maximizes the learning objective of the output classifier .
They claim that their method is 100 times faster than Viola and Jones' method .
Another direction is to optimally build the cascade to improve the overall performance of the cascade .
Sun et al. [24] and [25] propose a scheme to optimally tune parameters in layer classifiers .
However , their approach is somewhat complicated and is not easy to implement .
Xiao et al. [20] and Huang et al. [11] propose the boosting chain structure in which subsequent layers utilize historical information of previous layers .
This significantly reduces the number of features used in each layer .
Discrete AdaBoost uses a binary weak classifier that is too weak to boost in the case of the hard distinguished dataset .
Studies based on RealBoost [26] , such as [12] ,[10] ,[27] ,[11] , introduced new kinds of weak classifiers that are stronger than binary weak classifiers .
New real-valued weak classifiers can effectively discriminate face and non-face distributions and , in consequence , the total number of features used also reduces dramatically .
Face detection systems such as [27] ,[11] only use around 800 features .
However , the main problem with these systems is how to choose the most appropriate number of bins .
Small number of bins might not well approximate the real distribution while large number of bins might cause over-fitting , increase computation time and waste storage space .
Actually , our system can benefit from this approach when building the rejection stage and thus also reduce the training time much more .
The proposed face detection system consists of three stages that classify a 24x24 pixel window as either a face or a non-face .
To detect faces of different sizes and locations , the detector is applied at every location and scale in the input image with a scale factor of 1 .2 , which is similar to the other approaches [5] ,[6] ,[9] .
An outline of this system is given in Figure 2 .
The first stage is a cascade of classifiers used to estimate face candidate regions by evaluating 36x36 input windows , with a moving step of 12 pixels .
If a 36x36 window is detected as the existence of a face , 144 ( i.e. 12x12 ) likely face positions are collected and passed to the next stage .
The second stage is a cascade of classifiers used to investigate 24x24 window face candidate locations returned from the previous stage .
The main purpose of designing these two stages is trying to filter out a large number of non-face patterns as quick as possible before passing complex patterns to the final stage classifier .
This is done by taking advantages of Viola and Jones' approach [1] , in which Haar wavelet features and the cascaded AdaBoost classifiers are extremely fast in computation .
Although the cascade of \MATH AdaBoost classifiers rejects non-face patterns rapidly , it is still influenced by the large number of \MATH patterns that it must process .
The reason why the fist stage , which is a cascade of \MATH classifiers , is added is to decrease the number of analyzed patterns .
To this end , this stage is trained specially to make the classifiers invariant to small face translations .
These classifiers can detect faces that are off-center by up to six pixels in any direction .
An illustration of the difference between 24x24 and \MATH face training samples is depicted in Figure 3 .
The \MATH window is chosen in accordance with the idea from [5] stated that the classifier can be trained to be invariant to translation by up to \MATH of original window size .
With this flexible classifier , the moving step size can be increased up to 12 pixels that reduce dramatically number of analyzed patterns .
Efficiency of this stage will be discussed further in section 6 .3 .
The last stage is a cascade of non-linear SVM classifiers that reuses features that have been selected by AdaBoost in the second stage classifier .
These feature values are evaluated and scaled to be between 0 and 1 to form a feature vector .
In our experiments , only 100 features are used and hence it is faster than using any pixel-based SVM classifiers [8] ,[9] .
The same feature set as proposed in [1] is used ( cf. Figure 4 ) .
It consists of four kinds of features modeled from adjacent basic rectangles with the same size and shape .
The feature value is defined as the difference of sum of the pixels within rectangles .
Each feature is parameterized by four parameters : the position within the window \MATH , width \MATH and height \MATH ( cf. Figure 5 ) .
By using integral image definition [1] , these rectangle feature values can be computed extremely quickly .
The integral image at location \MATH is defined as \MATH , where \MATH is the integral image and \MATH is the original image .
In practice , \MATH can be computed simply by using the following recurrent function :\MATH , and sum of the pixels within a rectangle can be computed from four integral image values of its vertices , for example , \MATH .
Boosting is used to improve the classification performance of any given simple learning algorithm [28] .
Given \MATH weak classifiers \MATH learned through \MATH rounds of boosting , the strong classifier is formed by a linear combination : \MATH where \MATH are coefficients found in the boosting process .
Each weak classifier \MATH is associated with a feature \MATH and a threshold \MATH such that the number of incorrect classified examples corresponding to this weak classifier is minimized : \MATH , where polarity \MATH indicates the direction of the inequality sign .
In each round of boosting , the best weak classifier \MATH that has the lowest error \MATH will be chosen .
The error of each weak classifier is measured with respect to the set of weights over each example of the training set \MATH , where \MATH and \MATH are the weight and the label of the training example \MATH , respectively .
After each round , these weights are updated such that the weak learner will focus much more on the hard examples in the next round .
The main idea of building a cascade of classifiers is to reduce the computation time by giving different treatments to different complexities of input windows ( cf .
Figure 7 ) .
Only input windows that have passed through all layers of the cascade are classified as faces .
Training cascaded classifiers that can achieve both good detection rate and less computation time is quite complex , because a higher detection rate requires more features , but more features are correspondent to more time for evaluation .
To simplify this , the detection rate goal and the false positive rate goal for each layer are usually set beforehand .
Viola and Jones [1] stated that , if the layer classifier could achieve the predefined target goals after 200 features are used , the training process will stop and a new layer will be added .
1 .	<section label= " SVM Classifier " >
The support vector machine is a statistical learning method based on the structure-risk minimization principle .
It has been very efficiently proved in many pattern recognition applications [29] ,[8] ,[9] .
In the binary classification case , the objective of the SVM is to find the best separating hyperplane with a maximum margin .
The form of SVM classifiers is : \MATH where : \MATH is the d-dimensional vector of an observation example , \MATH is a class label , and \MATH is the vector of the \MATH training example .
All the \MATH corresponding to non-zero \MATH are called support vectors .
It is important to choose the appropriate kernel and parameter \MATH in order to to obtain the robust SVM classifier .
Although many kernels have been introduced by researchers , the following four kernels are commonly used : \MATH where \MATH and \MATH are kernel parameters .
Compared to AdaBoost classifiers , SVM classifiers run much slower in running because of the large number of support vectors and heavy kernel computation .
To control the trade-off between the number of support vectors and errors , Scholkopf et al. [30] proposed using a new parameter \MATH instead of the parameter \MATH .
They proved that the parameter \MATH is an upper bound of the fraction of margin errors and a lower bound of the fraction of support vectors .
The implementations of \MATH and \MATH are provided by LibSVM [31] .
For training , we collected 7 ,500 , 24x24-size face patterns from the Internet .
Non-face patterns were generated at different locations and scales from 8 ,440 images with various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
Some examples of the collected 24x24 face patterns are shown in Figure 8 .
Face patterns for training the 36x36 classifiers are generated by selecting 36x36 windows containing the 24x24 face window of the input image .
Figure 9 shows some examples of 36x36 face patterns that include various kinds of floating positions and backgrounds .
To train the cascade of 24x24 AdaBoost classifiers used in the rejection stage , the same 7 ,500 face patterns are used for all layers .
Non-face patterns of the training and the validating sets of the first layer in the cascade are selected randomly .
Non-face patterns of the subsequent layer classifiers are false positives collected by the partially trained cascade on the set of non-face images .
For each layer classifier , 7 ,500 non-face patterns are used for training and 7 ,500 other non-face patterns are used for validating .
To compare the performance of classifiers , we have implemented a fully cascade of classifiers trained by AdaBoost , similar to that used by Viola and Jones [1] .
The training parameters of each layer were set as follows .
The minimum of the detection rate is \MATH , the maximum of the false positive rate is \MATH and the maximum of the number of features in each layer is 200 .
This setting resulted in a face detector that consists of 38 layers with 6 ,360 features .
All experiments were run on a PC ( Pentium 4 , 2 .8 MHz , 512-MB RAM ) .
The training process was terminated when no more false positives were found in the non-face images of the data set .
If \MATH is the number of Haar wavelet features and \MATH is the number of training patterns , the learning time of AdaBoost to train \MATH weak classifiers is roughly[1] .
Therefore , if the number of training patterns is fixed , the learning time can be shortened when either the number of features in the feature set or the number of weak classifiers in the final cascade is reduced .
In our approach , the cascaded classifiers are only used for efficient rejection , so we can reduce both these numbers in order to keep training time for the full system reasonable .
As mentioned in section 4 .1 , each feature is parameterized by a tuple of four parameters \MATH .
A set of features is then formed by changing these parameters in correspondent steps \MATH .
In the other hand , a feature set is parameterized by \MATH .
One of the simplest ways to sub-sample the feature set is to change parameters \MATH , for example , from a full feature set \MATH to a reduced feature set \MATH .
Because the full feature set is redundant , this sub-sampling is expected not to affect the rejection performance of AdaBoost classifiers significantly .
We carried out experiments to compare the performance of classifiers trained on these two feature sets : the full feature set \MATH containing 134 ,736 features and the reduced feature set \MATH containing 14 ,807 features ( excluding features with the small size ) .
Two classifiers are trained up to the maximum of 200 features .
The classifier 's threshold is changed to meet the detection rate of \MATH .
The training set contains 7 ,500 face patterns and 7 ,500 non-face patterns .
Rejection performance is evaluated through the false positive rate on a validation test set which contains 500 ,000 non-face patterns .
All non-face patterns are selected randomly from the training set mentioned above .
The result shown in Figure 10 indicates that the performances of these two classifiers are no different , especially when the number of features is large enough , for example , more than 50 .
As a result , by using the reduced feature set , the training time can be shortened approximately to one ninth .
Our another experiment has shown that , for similar performance , the AdaBoost classifier trained on the reduced feature set that uses larger sampling step sizes requires more features than that trained on the full feature set .
Therefore , only the sampling parameter \MATH was used in training the 24x24 AdaBoost classifiers .
In our system , the first stage is a cascade of classifiers that processes 36x36 patterns with a moving step size of 12 pixels .
By taking advantage of simplification in training classifiers only for rejection demonstrated in section 6 .2 , training this cascade only uses the feature set generated from a 36x36 window with sampling parameters \MATH .
As a result , 12 ,223 features are produced .
The training set contains 12 ,000 face patterns and 12 ,000 non-face patterns .
Since a 36x36 face sample contains a lot of background outside the 24x24 face region while the classifier is required to be fast and to keep all possible face regions , training parameters are set as follows : the minimum detection rate of \MATH and maximum of false positive rate of \MATH .
In our experiments , after reaching 50 features , the classifier 's performance does not significantly increase anymore , so the maximum number of features for each layer is set to 50 .
To keep a balance between computation speed and robustness , the maximum number of layers is set to three because using more layers would degrade the overall detection rate dramatically .
Figure 11( a ) shows several features of the first 36x36 layer classifier selected by AdaBoost .
It is somehow similar to features of the first 24x24 layer classifier as shown in Figure 11( b ) .
In addition , Figure 12 shows an example of face candidate regions estimated by using this cascade .
Two main issues surrounding the reuse of features selected by AdaBoost are : ( i ) which layer whose features will be reused for SVM is the best? and ( ii ) How many features should be used?
For comparison of the performance of SVM classifiers , 2 ,450 face patterns and 7 ,500 non-face patterns which are separated from the training set ( section 6 .1 ) were used .
The SVM classifiers were trained with a RBF kernel whose parameter \MATH is \MATH .
The parameter \MATH is set to \MATH .
These parameters were found by using cross-validation test .
Figure 13 compares the performance of classifiers trained on 200-feature sets selected by different layers in the cascade ( layers 14 , 17 , 20 , and 25 ) .
These comparable performances suggest that the second stage ( using AdaBoost ) can be switched to the final stage ( using SVM ) at any time .
As a result , total training time of the system can be easily controlled .
To determine how many features is robust enough , we used the 200-feature set selected in layer 17 to generate different subsets of features with different number of features .
Features in each set were selected in the order that they were added in the training process .
For example , a 25-feature set consists of first 25 features selected by AdaBoost when training layer 17 .
The results shown in Figure 14 indicate that with more than 100 features , the performance of classifiers is comparable .
Basically , the speed of a SVM classifier is proportional to the number of features used , so the greater number of features used , the slower the classifier will be .
Figure 15 shows the processing speed of SVM classifiers that uses different subsets of features .
The SVM classifier using 25 features run fastest while the SVM classifier using 200 features run slowest .
The speeds of SVM classifiers using 100 , 125 and 175 features are not importantly different because their difference in terms of number of features and number of support vectors is inconsiderable .
Therefore , 100 features might be the best trade-off between the speed and the performance .
We carried out an experiment to show efficiency of a single SVM classifier over a cascade of AdaBoost classifiers .
In this experiment , 40 ,000 false positives were gathered by running a cascade of 17 AdaBoost classifiers ( CAB17 ) on the set of non-face images mentioned in section 6 .1 .
These false positives then were used as hard non-face patterns to train and test the performance of two classifiers : a single RBF SVM classifier and a cascade of other 18 AdaBoost classifiers .
Of 40 ,000 non-face patterns , 7 ,500 non-face patterns were used along with 7 ,500 face patterns to train these two classifiers .
The remaining 34 ,000 non-face patterns and other 2 ,450 face patterns were used to compare the accuracy .
The cascade of AdaBoost classifiers were trained with the parameters set as in section 6 .1 .
The RBF SVM classifier reused 100 features selected by the last layer of CAB17 as the feature vector and was trained by a RBF kernel whose parameter \MATH is \MATH .
The parameter \MATH is set to \MATH .
These parameters are found by using cross-validation test .
The result shown in Figure 16 demonstrates that with hard classified patterns that later layers of the cascade will process , the single SVM classifier can achieve higher accuracy than the cascade of AdaBoost classifiers trained by roughly predefined training parameters .
Furthermore , the training time of a single SVM ( which takes several hours ) is much smaller than that of a cascade of AdaBoost classifiers ( which might take everal weeks ) .
The final system consists of three stages .
In the first stage , the cascaded 36x36 classifiers consist of three layers , making a total number of features used of 120 .
The second stage consists of 17 layers with 2 ,160 features .
Compared to the system with 6 ,061 features used in [1] , our system uses fewer features and , thus , can save significant training time ( which is approximate 27 times in total ) .
The final stage is a cascade of three SVM classifiers that take 100 features of the last layer in the second stage as the feature vector .
Each SVM classifier was trained by using 7 ,500 face patterns and 7 ,500 non-face patterns .
The same 7 ,500 face patterns were used in training all these SVM classifiers .
By running the cascade of AdaBoost classifiers of the second stage on the set of non-face images , 40 ,000 false positives were collected and used as non-face patterns to train the SVM classifiers .
7 ,500 non-face patterns used to train the first SVM classifier were selected randomly from the 40 ,000 non-face patterns .
Non-face patterns in the subsequent SVM classifiers were false positives collected by the partially cascaded SVM classifiers on these 40 ,000 non-face patterns .
To control the number of support vectors , the parameter \MATH was used instead of the parameter \MATH .
All SVM classifiers were trained by using the RBF kernel with \MATH .
All these parameters were found by using cross-validation test tool provided by LibSVM [31]} .
This training procedure resulted three SVM classifiers whose the numbers of support vectors are 4 ,725 , 5 ,043 , and 4 ,847 respectively .
The average evaluating speed of a SVM classifier is approximate 610 WPS ( windows per second ) .
We tested our system on the MIT+CMU frontal-face standard test set [5] which consists of 124 images with 480 frontal faces ( excluding images containing hand-drawn , cartoon and small faces ) .
The configuration and rejection performance of the classifiers are listed in Table 1 and 2 .
The first row presents the number of features of each layer , and the second row shows the fraction of the remaining patterns after each layer processing .
The last row indicates the fraction of time that each layer consumes .
All these statistics are extracted from running the classifiers on the MIT+CMU test set .
The fraction of the remaining patterns on these two tables indicates that most of the non-face patterns , i.e. , \MATH , are rejected by the first stage , the cascade of 36x36 AdaBoost classifiers .
If the first 24x24 layer classifier is added to the cascade of 36x36 classifiers , this combination rejects 85 .91\% of analyzed patterns compared to \MATH of using only the first layer of the single cascade 24x24 classifiers .
Furthermore , the rejection of this very large number of patterns is done extremely quickly , only using \MATH of processing time .
It also shows that most of the processing time used by the AdaBoost+SVM system , \MATH , is used for SVM classifiers .
Detection rate and speed of classifiers with ten false positives are listed in Table 3 .
It is clear that our multi-stage system runs faster than the single cascade of 24x24 AdaBoost classifiers while detection rates are comparable .
This performance is possible because of the three following reasons :
First , the cascade of 36x36 AdaBoost classifiers rejects a lot of non-face patterns extremely fast while slow SVM classifiers only process a very small number of the remaining patterns .
Second , many images in the MIT+CMU test set contain large portion of background which was mentioned in [9] which said the ratio of non-face to face patterns is about 50 ,000 to 1 .
Experimental results showed that the AdaBoost+SVM system runs faster than that of the original AdaBoost on \MATH of total number of images in this test set .
Third , at a small number of false positives , some true face candidate regions rejected by 36x36 classifiers do not affect so much in final performance because it might also be rejected by 24x24 classifiers in later layers .
Some detection results are given in Figure 17 .
We have developed a method to build a fast and robust face detection system based on a multi-stage approach .
The cascaded structure of AdaBoost-based classifiers in two first stages allows to best adapt to various complexities of input patterns ,while non linear SVM classifiers at the final stage are robust enough to achieve good results .
Extensive experiments demonstrated that a significant computation time is devoted to potential face regions because almost all non-face patterns are rejected quickly by the two first stages , and only a very small number of face-like patterns is processed by the slow SVM classifiers .
Discriminant Haar wavelet features selected from AdaBoost are used for all stage classifier to take advantages from their efficient representation and fast evaluation .
Unsupervised Face Re-Ranking By Mining the Web and Video Archives
to improve the retrieval performance of image search engines that use textual information for indexing , it is necessary to utilize visual information .
One popular approach is to learn visual consistency among the images returned by these search engines .
Most of the state of the art methods for learning the visual consistency usually learn one specific classifier for each query for re-ranking the returned images .
The drawback of these methods is it requires computational cost and processing time that are unsuitable for handling a large number of queries .
We propose a method in which one generic classifier is learned and then is used for all queries .
Different from query-specific based methods that learn classifiers for recognition concepts encoded in each query , the generic classifier of our method learns relevancy between images and the query for re-ranking purpose .
The key contribution of this paper is to introduce a query-dependent feature to represent this relevancy and an unsupervised method to collect training samples for learning the generic classifier .
The generic classifier is built automatically and independent with existing ranking algorithms of input search engines .
experimental results show that the proposed method achieves good performance in various datasets .
Image search is essential for many search engines .
Most of existing image search engines usually use text information for judging relevancy , resulting low precision performance .
To improve the retrieval performance , it is necessary to use visual information of images for re-ranking .
However , content-based image understanding is a challenging and unsolved problem .
In addition , using visual information requires huge computational cost compared with using text .
One popular approach \CITE combining both text and visual information is to use text information to quickly retrieve a set of candidates and then do post-processing (i . e . re-rank) on this set to improve the precision .
There are two ways for post-processing : The first way \CITE is to build a ranker or a classifier specific to the given query using the returned images .
Building such classifiers requires large computational cost and time .
As a result , this way is not scalable for applications processing very large number of queries .
The second way \CITE is to build a generic classifier once and then use it for all new queries .
This way is more scalable and can be used for practical applications such as meta search engines .
We follow the latter way for the problem of face retrieval in which the system enables users to search persons's appearance by their names .
Our system re-ranks the faces returned by text-based search engines by a generic classifier that is trained in advance using visual information before returning to the user .
Building such generic classifiers requires solving two problems : finding good query-relative representation of faces and collecting a large labeled dataset for training the classifier .
By addressing these problems , Our contribution is two-fold :
-We propose a general framework for re-ranking faces returned by existing text-based search engine .
In this framework , We learn a relevance classifier that classifies whether an input face is relevant to the associated query or not .
The output scores returned by this classifier are used to re-rank the faces .
The more relevant a face to the query , the higher score is .
This approach is different from existing approaches such as \CITE that learn a classifier to recognize the identity of the returned faces .
For example , it recognizes a face as the appearance of 'personX' or not the appearance of 'personX' .
Instead , the relevance classifier is learned to classify a face being relevant or irrelevant to the query .
this classifier is independent with the identity of faces , so it can be shared for multiple queries (cf . Figure \REF) .
We propose a novel representation for each face that models relevance between that face and the query .
Once this query-dependent feature for each face is extracted , one relevance classifier can be shared by faces of various queries .
experimental results show that the relevance classifier that is independent with underlying ranking algorithm of existing search engines can significantly boost the performance .
-We propose a simple yet efficient mining technique for automatically collecting labeled data for training the generic classifier .
Specifically , We detect and group faces of persons appearing in video programs in face tracks in which each face track contains of the faces of one person .
To distinguish face tracks of different persons , we assume that if multiple faces are detected at different locations in one frame , they are of different persons (cf . Figure \REF) .
Using this assumption , we collect the face tracks whose faces are detected in the same frames to guarantee that each face track is associated to one unique person .
To enlarge the number of such face tracks , We use video programs of multiple genres and channels .
From these faces , We can artificially generate face sets similar to the sets returned by search engines given person names .
Since we know the relevance of these faces to the artificial sets , the labels of each face can be easily generated and no human intervention is needed for this process .
Note that the label of faces in our approach is not identity of that face . It is the relevance between the face and the associated query .
Collecting training sets from such external sources as video archives is easy and efficient because : firstly , a large number of videos can be easy to obtain .
For example , people can record broadcast videos of different channels in a certain period .
Secondly , a huge number of faces can be obtained by applying the face detector in every frame .
In addition , using temporal information , faces of one person appearing in consecutive frames can be automatically grouped with high accuracy .
given a query described by text , for example , 'airplane' or 'George Bush' , finding relevant images with high precision is essential for image search engines .
Existing image search engines usually use textual information associated with the images such as filename , image caption , and surrounding text for ranking that leads to poor precision .
To improve the precision , visual information is used to re-rank the returned images .
The idea is to rely on the visual consistency among these images to learn visual classifiers that measure the relevancy between an image and the input query .
There are different approaches described in \CITE for re-ranking images containing general objects and faces returned from text-based search engines .
Work such as \CITE extend topics models using probabilistic Late Semantic Analysis , Latent Dirichlet Allocation , or Hierarchical Dirichlet Process to learn generative model based classifiers .
These models can handle noisy image data in some degree .
However , they have many parameters needed to be tuned such as number of topics and feature configurations .
In addition , how to select the best topic associated with the input query for identifying target label is still challenging \CITE .
In \CITE , Textual information is used to build a text ranker to re-rank the returned images \CITE .
The top images in this ranked list are used as positive samples to train visual classifiers using SVM (Support vector machines) .
This method makes the training data cleaner that leads to performance improvement .
In \CITE , A multiple instance learning framework is used to learn category models from images associated with keywords \CITE .
The returned images are treated as positive bag .
Negative bags are collected from image sets corresponding to unrelated keywords .
The learned model is used to re-rank the images .
The work mentioned above are for re-ranking images containing general objects .
For re-ranking faces , work described in \CITE use Gaussian mixture models to build face recognizers and apply these recognizers back to the input faces for re-ranking \CITE .
In \CITE , Discriminative approach based models such as SVM and linear discriminant analysis are used instead of Gaussian mixture models \CITE .
In \CITE , A densest graph based method is used for finding the face group relevant to the query \CITE .
As for these approaches , One specific classifier is built for each query .
Therefore , to handle a large number of queries , many classifiers must be built which are not suitable in practice .
In \CITE{Krapac10CVPR} , Only one generic classifier is built in advance \CITE and then used for all queries .
This generic classifier is a relevance classifier that learns relevancy between an image and the query .
As for specific classifiers , Each image is classified as 'class-A' or 'non-class-A' , where 'class-A' is the category associated with the query , for example , 'airplane' .
In other words , each specific classifier is associated with one class label implied by the query .
In generic classifier , Each image is classified as relevant or irrelevant to the query .
Therefore , it is independent to class labels and can be used for any query .
This method works well for objects such as car , flag , but fails to handle faces .
Our method is inspired by the generic classifier based approach .
We extend it by two means : first , query-dependent features specific for faces are proposed , and second , the training data for learning the generic classifier is collected automatically by mining video archives .
Given a set of faces returned by any search engine for a queried person ( e .g . 'George Bush' ) , our task is to re-rank these faces to improve the precision .
To this end , we extract query-dependent feature for each face and then use the generic classifier trained in advance to predict scores representing the relevance between that face and the query .
These scores are sorted and used for re-ranking .
The ranked list is then return to users as shown in Figure \REF( b ) .
This approach is different from existing approaches such as \CITE as shown in Figure \REF( a ) in which one specific classifier is built for each query .
To build the specific classifier for re-ranking faces returned by the query of 'personX' , each face is represented by the query-independent feature such as pixel intensity around facial features such as eyes , nose , and mouth \CITE .
The label for each face is 'personX' or 'non-personX' meaning that it is relevant or irrelevant to 'personX' .
Meanwhile , to build the generic classifier which is independent with any \textit{'personX'} , each face is represented by the query-dependent feature .
The label for each face is relevant or irrelevant to the query .
The query-dependent feature is used to encode this relevancy .
In \CITE , the Query-dependent features using textual information are proposed \CITE .
Each feature is treated as binary indicating the presence or absence of the query terms in textual data associated with the input image , for example , filename , image title , and nearby text .
Extending this query-dependent feature for using visual information is not trivial since we can not compute the presence and absence of the query term such as 'George Bush' in each face .
In \CITE , Each image \CITE is represented as a set of visual words .
The top- \MATH visual words that are strongly associated with the set of the returned images for the query are selected .
The binary features for each image are computed by evaluating the presence and absence of these visual words in that image .
Since this method is suitable for general objects rather than faces , we proposed another method described below for extracting query-dependent features to train the generic classifier .
To be able to model the relevance between a face and the given query , We assume that there is visual consistency among faces returned by search engines for that query .
In the other word , we assume faces that are relevant to the query form the largest cluster .
Note that finding such cluster is still difficult since the number of clusters is not known in advance and the accuracy of clustering algorithms always depends on the discriminative power of feature representation .
This assumption is widely accepted in most of the work of this field \CITE .
We consider the problem of finding relevant and irrelevant faces in the input set as the problem of outlier detection \CITE that is popular in data mining community .
We first describe several distance based outlier detection methods that use the distance to the \MATH -nearest neighbors to determine observations as outliers or non-outliers .
Then the adaptation is proposed to form the query-dependent feature .
Given a threshold \MATH , for each point \MATH , we examine number of points \MATH so that \MATH , where \MATH is the distance ( e .g . Euclidean distance ) between \MATH and \MATH in the feature space .
This number of points \MATH is called the neighborhood score of \MATH and is defined as follows : \MATH where \MATH is the total number of points of the input dataset .
A low value of \MATH indicates \MATH is a candidate of outliers , while a high value of \MATH indicates \MATH is a member of one strong association cluster .
In practice , it is difficult to know \MATH because it depends on underlying distribution of the input dataset .
For each point \MATH , find its \MATH -nearest neighbors \MATH , the distance score of \MATH is the sum of the distances between \MATH and its \MATH -nearest neighbors \MATH and is defined as follows : \MATH
Points with larger values for \MATH have more sparse neighborhoods and are likely outliers than points belonging to dense clusters which usually have lower values of \MATH .
Similar to nearest neighbor score , it is difficult to determine the appropriate \MATH value for each dataset .
We consider the generic classifier as an outlier classifier that classifies an input sample as outlier or non-outlier .
In our framework , Each face is an sample , and non-outliers / outliers mean faces relevant / irrelevant to the query ( i .e . target person ) .
As described above , \MATH and \MATH of outliers and non-outliers might have distributions shown in Figure \REF , these scores can be used as feature values to discriminate non-outliers and outliers .
From this observation , the feature vector is formed by varying parameters such as \MATH and \MATH in formula of \MATH and \MATH as follows : \MATH .
In order to train the relevance classifier using supervised learning methods such as SVM , it requires a sufficient number of training samples .
To collect training samples , The simplest way \CITE is we pick many names , and pass them to search engines .
After collecting the returned faces , we manually label each face whether it is relevant to the input query or not .
It is a tedious task and requires human labor cost .
We propose another approach to automatically collect training samples for training the relevant classifier .
This approach consists of two steps :
First , by mining video archives , we automatically collect a set of faces of \MATH different persons \MATH , where \MATH is the set of faces of person \MATH , and \MATH is the number of persons; and
Second , we generate a set of subsets \MATH , where \MATH is the set of faces that is picked from \MATH , and \MATH is the number of subsets .
The restriction is the assumption of visual consistency is satisfied .
In other words , as shown in Figure \REF , \MATH might have several face clusters and the largest cluster is equivalent to the faces relevant to the query if returning by a search engine .
As a result , this method can stimulate face sets returned by search engines using many names mentioned above .
To obtain \MATH , we use a simple technique for faces extracted from video archives .
Specifically , We use the following heuristics to pick a set of different persons appearing in video archives :
-If there are more than one face appearing in different locations in one frame , they likely belong to different persons .
Figure \REF shows an example of this case .
-If two persons appear in video programs broadcast by different broadcast stations ( e .g . , CNN , MSNBC , and CCTV ) , they are likely different .
If we have large video archives , using these heuristics we can collect a sufficient number of training samples for learning the relevance classifier .
We form a face set Generating \MATH by picking a subset of faces of Generating \MATH and adding randomly faces from other sets Generating \MATH .
To keep the assumption of visual consistency satisfied , the number of faces selected in each set Generating \MATH must be smaller than the number of faces in set Generating \MATH .
We then label faces in set Generating \MATH as relevant to the query associated with Generating \MATH , and the other faces of Generating \MATH as irrelevant to the query .
Once the training samples are collected , we use SVM with linear kernel to learn the relevance classifier .
TRECVID dataset : We collected all video programs of TRECVID 2006 dataset \CITE .
There are 527 video programs broadcast on 7 channels in 3 languages including English , Chinese and Arabic .
We extracted faces from these video programs and grouped faces belonging to one person in each shot in one face track using a similar method described in \CITE .
For each channel , We scanned all face tracks extracted from the videos broadcast by this channel , and picked face tracks extracted from keyframes that several faces were detected at different locations .
To guarantee selected face tracks representing different persons , for one channel , only face tracks of one shot was picked .
As a result , there are 5 ,126 faces of 19 face tracks picked from the 7 channels corresponding to 19 different persons .
Note that , the system does not know the identity of these faces .
It only knows any two face tracks represent different persons .
The number of faces of these face tracks is shown in Figure \REF .
Using these face tracks , We generated 133 labeled sets described in Section \REF and used them for training the relevance classifier .
Yahoo News Images : This dataset consists of approximately half a million news photos and captions from Yahoo News collected over a period of roughly two years \CITE .
Using person names as queries , we applied simple string search to the captions this dataset to return a list of faces for each queried name .
We used 23 names of celebrities such as George W .
Bush , Vladimir Putin , Ziang Jemin , Tony Blair , and Abdullah Gul .
These names are widely used in experiments such as \CITE .
In total , 9 ,136 faces were retrieved in which 3 ,909 faces were relevant .
On average , The accuracy was \MATH .
Google Images : We used the same set of person names used in Yahoo News Images dataset and put to Google Image Search Engine .
For each query , We crawled a maximum of 500 images from URLs returned by Google .
In total , 9 ,516 faces were extracted in which 5 ,816 faces were relevant .
On average , The accuracy was \MATH .
The TRECVID dataset was used for training the generic classifier .
The datasets , Yahoo News Images and Google Images as shown in Figure \REF , were used for testing .
We used the Viola-Jones face detector \CITE to detect frontal faces in images and video frames .
To group faces belonging to one person in one video shot , We simply used a similar technique described in \CITE .
Using the prior knowledge that faces of the same person in consecutive frames do not change much in locations and appearance , the technique used tracked points to robustly associate these faces into face tracks with the precision of \MATH .
Once faces were extracted , we used the code provided by the authors \CITE to extract features .
Each face is then represented as a point in a very high dimensional feature space .
Specifically , for each face , 9 facial feature points were detected , and 4 more facial feature points were inferred from these 9 points .
In total , There were 13 feature points from which features are extracted .
The features are intensity values lying within the circle with radius of 15 pixels .
The output feature has 13x149 = 1 ,937 dimensions .
Figure \REF shows illustration of this feature .
We evaluated the retrieval performance with measures that are commonly used in information retrieval , such as precision , recall , and average precision .
Given a queried person and letting \MATH be the total number of faces returned , \MATH the number of relevant faces , and \MATH the total number of relevant faces , recall and precision can be calculated as follows : \MATH .
Precision and recall only evaluate the quality of an unordered set of retrieved faces .
To evaluate ranked lists in which both recall and precision are taken into account , the average precision is usually used .
The average precision is computed by taking the average of the interpolated precision measured at the 11 recall levels of 0 .0 , 0 .1 , 0 .2 , . . . , 1 .0 .
The interpolated precision \MATH at a certain recall level \MATH is defined as the highest precision found for any recall level \MATH :
In addition , to evaluate the performance of multiple queries , we used mean average precision , which is the mean of average precisions computed from queries .
In this experiment , We compare the MAP performance of the following systems testing on YahooNews Images :
-DistScore-TrainGoogleImages : The training set is the set of annotated faces returned by Google Images Search for 23 person names .
The feature vector is computed using \MATH .
-NNScore-TrainGoogleImages : The training set is the same as DistScore-TrainGoogleImages .
The feature vector is computed using \MATH .
DistScore-TrainTRECVID : The feature vector is computed using .
The training set is the set of annotated faces artificially generated by our method described in Section \REF .
-NNScore-TrainTRECVID : The training set is the same as DistScore-TrainTRECVID .
The feature vector is computed using \MATH .
-Krapac[11]-TrainGoogleImages : The training set is the same as DistScore-TrainGoogleImages .
We re-implemented the method proposed by Krapac et al . \CITE for extracting query-dependent feature .
Since this method was proposed to handle images , not for faces , we modified it for handling faces .
Specifically , Each face is represented as a bag of visual words .
We used 13 facial feature points detected in each face and their descriptors using pixel intensity as visual words .
The codebook is formed by clustering all visual words extracted from all faces of the training set into 200 clusters .
top-$k$ visual words strongly related to the returned faces of each query and the binary feature vector are computed as described in \CITE .
-Mensink[15]-GaussianModels : This method proposed by Mensink et al . \CITE models the returned faces by using two Gaussians , one for the faces relevant to the target person and one for the remaining faces .
-Mensink[15]-Friends : This method proposed by Mensink et al . \CITE uses linear discriminant analysis to train a specific classifier for each query .
This method uses detected person names in captions associated with faces for query expansion to model faces of the target person 's friends .
The Methods such as Mensink[15]-GaussianModels and Mensink[15]-Friends are the state of the art methods that learn a specific classifier for each query .
The method Krapac[11]-TrainGoogleImages is similar to our method in which one generic classifier is trained in advance and then is used for new queries .
Figure \REF shows the performance comparison of these systems when testing on YahooNews Images dataset .
As for systems such as DistScore-TrainGoogleImages , NNScore-TrainGoogleImages , DistScore-TrainTRECVID , and NNScore-TrainTRECVID , the curves show the correlation between the performance and the number of features .
-DistScore is significantly better than that of NNScore .
-The performance of DistScore and NNScore are not affected by selecting the number of features .
Therefore , we can use small number of features for reducing the computational cost .
-The performance of the system using the training data generated artificially by our method is comparable with that of the system using the training data returned by search engines .
-Our proposed method DistScore-TrainTRECVID has comparable performance to the state of the art method in specific classifier-based approach Mensink[15]-Friends .
It outperforms the method using only visual information Mensink[15]-GaussianModels .
-Our proposed method DistScore-TrainTRECVID outperforms the method proposed by Krapac et al . customized for handling faces .
As shown in Figure \REF , DistScore-TrainTRECVID outperforms original ranking of Google Images Search Engine if using from 20 to 50 features .
The result of DistScore-TrainTRECVID on YahooNews Images set and Google Images set indicates that the relevance classifier of our proposed method is able to generalize well on different queries and independent with underlying ranking algorithms of search engines .
Figure \REF shows an example of re-ranking result of top-30 faces for the query John Paul that is one of the most difficult cases of the YahooNews Images set .
The result clearly shows that our proposed method outperforms the other state of the art methods .
Our query-dependent feature is based on nearest neighbors of the images in the returned image set that usually have complexity of \MATH , where \MATH is the total number of images in the set .
However , recent studies on indexing techniques such as \MATH -d tree , locality sensitive hashing ( LSH ) , and SASH \CITE can speed up the nearest neighbor search significantly .
For example , as described in \CITE , the complexity of fast lookup of $k$ approximate nearest neighbors is \MATH \CITE .
Studying other techniques to speedup the query-feature extraction process is our next step in future work .
b</subsection>
We have presented a novel method for re-ranking face images returned by existing search engines .
Instead of training a specific classifier for each new query , we train only one generic classifier and use it for ranking new queries .
This helps to make the ranking application more scalable .
To train the generic classifier , We propose a simple unsupervised method to obtain a large number of labeled faces from video archives .
It uses temporal information to group faces belonging to one person in one shot into one track .
Several heuristics are employed to guarantee that a subset of face tracks has the correct labels used in the training process .
Experiments shown that although our method is unsupervised and independent with underlying algorithms of existing search engines but successfully learns visual consistency among returned faces to boosts retrieval performance .
Enhancing mathematical search with names of formulas
We present a method to enhance the performance of a mathematical search system in this paper .
Targeting to mathematical formulas that appear in natural language documents , we collect the names of formulas from the surrounding text , and incorpo-rate the correspondence to the search system 's database .
E ectiveness of the proposed approach is shown through experiments using Wikipedia mathematical articles and Wolfram Functions Site data sets .
In the current digital environment , the mathematical content being published on the Web is increasing day by day . While more and more mathematical contents being available on the Web , retrieving mathematical contents becomes an important issue for many users .
Teach-ers , students , researchers do need to gain access to mathematical resources for teaching , studying , or obtaining updated information for research and development .
Therefore , users need specialized search systems to nd the formula that is relevant to their requirements .
Internet search engines are able to detect some particular keywords in mathematical formula but they mostly fail to recognize mathematical symbols and constructs such as integral sym-bols , square root symbols , fractions , or matrices .
There exist some mathematical-dedicated search engines available on the Internet .
Although such engines provide more accurate and relevant results , they usually do not provide enough information for the user .
Furthermore , these systems do not take into account the semantics of mathematical formulas revealed by surrounding natural language text , like the name of the formula and its variables' descrip-tion .
The Digital Library of Mathematical functions ( DLMF ) project is a mathematical database available on the Web [8] .
This site provides a major resource of mathematical reference data for special formulas and their applications .
But full mathematical search is still not available .
Other systems that support mathematical search are MathFind [4] , MathWebSearch [3] .
These systems , however , provide neither similarity structures nor semantic meanings of the formulas .
The Wolfram Functions Site [7] contains large mathe-matical formulas and also provides a semantics search for mathematical formulas .
This site and some recent works done by Adeel et al. [2] and Yokoi and Aizawa [1] propose similarity search methods based on MathML but these works do not make use of the semantics of the formulas' surrounding text , which is considered to be important information sources .
The work presented in this paper focuses on retrieving mathematical formulas on the Web using mathematical expressions and the surrounding natural language text .
We describe here in detail our work toward creating a mathematical database that contains for-mulas , their names , their variables' descriptions and other related information .
We also implement a mathematical search system that use this information as its base knowledge .
This information is very helpful when performing mathematical search by reducing the need for formula input and solving the notational variation problem where mathematically equivalent formulas follow di erent notations .
Relations between formulas and their name could also be used to correct errors in mathematical OCR systems , such as Infty [5] .
It also provides opportunities to make mathematical better understandable and usable for di erent groups of people with disabilities .
The remainder of this paper is organized as follow : In section 2 , we present an overview of the proposed framework .
We then describe the results of our experiments in section 3 .
Section 4 concludes the paper and gives avenues for future works .
Mathematical formulas on the Web has many di erent formats , some of them are LaTeX , and the Mathematical Markup Language ( MathML ) [6] .
This makes the search more dif-cult .
In this paper , we use the presentation MathML format for mathematical formulas .
Formulas with other formats can be easily converted to MathML format using existing freely available tools .
For our works , we use LaTeXML Converter which is freely available at \URL .
We automatically collected our mathematical formulas from Wikipedia and the Wolfram Functions Site .
Figure 1 shows a page on mathematical section on Wikipedia and the information we retrieved on this site besides the mathematical formulas .
At this point , we use some heuristics to provide an adequate solution for matching mathematical formulas with their names .
These heuristics are based on the type settings and distances between the name strings and formulas in the same page .
After collecting the mathematical formulas from these resources , we extract keywords for indexing .
The keywords include formulas' names , operators , variables' names , and so on .
Our system allows two ways of searching : text content search and formula content search .
In the rst case , users can use the extracted keywords for search , for example : " sin " , " Pythagorean " or " trigonometric functions " .
In the second case , users can input the mathematical formulas directly , for example : \MATH .
The system then looks for relevant formula names .
If found , it will return other information related with that formula .
Else , it just looks for mathematical formulas which are similar to the input ( including formulas with similar structure ) .
Evaluate a mathematical search system is not an easy task because we do not have any standard for this task .
The similarity between mathematical formulas is very subjective .
In our work , we manually consider formulas with the same semantic meaning are relevant .
For example , while searching for sin( a ) , we also consider the results containing arcsin or cosin .
Our experiments were conducted on a collection of about 16 ,000 mathematical docu-ments on Wikipedia and about 155 ,000 mathematical formulas on the Wolfram Functions Site .
In order to show the e ect of linking the formula with its name , we also set up an experimental search system without using the formula 's names .
Table 1 shows top 5 of the searching results for the query \MATH .
As can be seen from the table , when the system associates the formulas with their names , it can provide more useful information to the user .
The system also allows the user to input the formula 's name directly .
Table 2 shows top 10 results with the query " Pythagorean " .
Note that at this time , when the user submits a query that does not match any function 's name in our database , the system can not return anything .
In this paper , we presented a new framework for mathematical search where links between formulas and their names are automatically detected from the target documents and then utilized in the search .
Due to unavailability of the standard corpora to evaluate mathemat-ical search systems , our evaluation at this moment still remained subjective and limited .
We believe that our approach , by incorporating information other than the mathematical formulas themselves , showed promising results .
The experimental results have shown how helpful this information provides to the users of mathematical search .
However , this is only a rst step , some important issues are left for future study .
Using formula 's name is one way of taking into account the semantic meaning of the formula , we are considering other information such as formula 's description and variable 's description .
Currently , our system uses only the links between formulas and their names in the same article .
Therefore , linking formulas across articles should be taken into account .
Automatic approach to understanding mathematical expressions using MathML Parallel Markup corpora
This paper explores the use of MathML Pallel Markup Corpora for mathematical expression understanding , the task of which is formulated as a translation from Presentation to Content MathML Markups in our approach .
In contrast to existing researches that mainly relied on manually encoded transformation rules , we adopt a Statistical-Machine-Translation-based method to automatically extract translation rules from parallel markup corpora .
Our study shows that the structural features embedded in the MathML tree can be effectively exploited in the sub-tree alignment and the translation rules extracted from the alignment give boost to the translation system .
Experimental results on the Wolfram Function Site show that our approach achieves an improvement against the prior rule-based system .
One of the most significant current discussions in the digitization of mathematical and scientific content and its applications is the semantic enrichment of mathematical documents , that is adding or associating semantic tags - usually concepts - to mathematical expressions .
By encoding the underlying mathematical meaning of an expression explicitly , it is possible to interchange information more precisely between systems that semantically process mathematical objects .
The direct application of this is enabling semantic searches for mathematical expressions by understanding the intent of the searcher and the contextual meaning of mathematical terms improve search accuracy .
It also benefits computer algebra systems , automatic reasoning system and multi-lingual translation systems .
However , as is the case with natural language , the semantic enrichment of mathematical expressions is a non-trivial task .
- First , mathematical notation , though more rigorous than natural language , is nonetheless at times ambiguous , context-dependent , and varies from community to community .
- Second , the underlying mathematical meaning of an expression need to follow a semantic markup in a semantically rigorous way .
Because of this , failing to follow the constraint , the computer might not be able to process that expression .
- The third problem is that new notations tend to be introduced and used as and when needed so a mechanism is required for referring to mathematical concepts outside of the base collection , allowing them to be represented .
The aim of this paper is to introduce a method for automatic mathematics semantic enrichment that capable of analyze and disambiguate mathematical terms .
In our research , MathML \CITE Presentation Markup is used to display mathematical expressions and MathML Content Markup is used to convey mathematical meaning .
The semantic enrichment task then becomes generating Content MathML outputs from Presentation MathML expressions .
There are three reasons why we choose MathML markup in our research .
- First , since its first release in 1997 , MathML has grown to become a general format that enables mathematics to be served , received , and processed in a wide variety of applications .
- Second , MathML can be used to encode both mathematical notation and mathematical content .
- Last , large collections of formulas are available in MathML and we can easily assess these collections .
- In the scope of this paper , we only make use the information within a mathematical expression for disambiguation when translating it to content markup .
The prior solution to this problem is SnuggleTeX \CITE , which was proposed by David McKain .
The system used rule-based methods for disambiguation and translation .
This solution has two main limitations :
- Since it is a hand written rule-based system , SnuggleTeX requires mathematical knowledge and human effort to develop
- Due to the diversity of mathematical expressions , SnuggleTeX is still to be considered experimental and has difficulty processing complicated mathematical symbols and expressions .
In this paper , we propose an approach that automatically learn the semantics inference from a presentation from parallel markup data .
The idea of this approach is based on statistical machine translation .
The underlying mathematical meaning of an expression is inferred according to the probability distribution $ p( c | p ) $ that a semantic expression $ c $ is the translation of a presentation expression $ p $ .
The probability distribution will be automatically learned from data that have both Presentation and Content MathML markup , that is the parallel markup MathML data .
The data used in this study was collected from the Wolfram Function Site \CITE .
We also prepare another parallel markup MathML data by annotating mathematical expressions on 20 papers from The Archives of the Association for Computational Linguistics \CITE ( ACL-ARC ) .
We have two main contributions in this paper
- First , successfully apply the machine translation techniques to the problem of mathematic semantic enrichment .
Experimental results show that our system significantly outperforms the current rule-based system and it can handle a lot of practical cases in the mathematics semantic enrichment problem .
Since both quantity and quality of mathematical expressions are continuing to grow and expand through time , we believe that our system will cover most of real life mathematical expressions .
- Second , mathematics knowledge such as symbol 's meanings or structural relations is automatically learned while training , therefor it is not required mathematics experts nor human effort and it is also easier to update the system given more data .
Since new notations keep growing , it is important to update the system as quick as possible .
In our experiments , we performed a 10-folds cross validation on mathematical expressions from 6 categories of the Wolfram Functions Site to evaluate the effectiveness of our proposed learning method .
We set up another experiment to confirm the correlation between system performance and training set size and saw that increasing the size of training data actually boost the system performance .
We also performed extensive side-by-side comparison with prior work \CITE over a data set from ACL-ARC scientific papers .
Our experimental results show that the proposed approach works well on the mathematics semantic enrichment problem and it excels the previous work by providing significantly less error rate .
The remainder of this paper is organized as follows : In Section 2 , we give a brief overview of the background and related work for semantic enrichment of mathematical expressions , while in Section 3 we present our proposed method .
We then describe the experimental setup and results in Section 4 .
Section 5 concludes the paper and gives avenues for future work .
Since mathematical formulas contain both mathematical symbols and structures , a special markup is required for their representation .
Until recently , images have been used to represent mathematical formulas on the web .
This type of display does not need any markup language to decode the formulas , but it is hard to process them .
A way of dealing with mathematical formulas in this format is to convert them to another text-based format , as seen in InftyReader \CITE .
For scientific documents , \TeX{} has been used to encode mathematical formulas .
The formula is printed in a way a person would write by hand , or typeset the equation .
In some web pages , such as the Wikipedia site , a formula is displayed in both image and \TeX{} formats .
The best known open markup format for representing mathematical formulas for the web is MathML \CITE , which was recommended by the W3C math working group .
It provides a standard way of representing mathematical expressions .
It is an XML application for describing mathematical notations and encoding mathematical content within a text format .
MathML has two types of encoding , content-based encoding which is called Content MathML , dealing with the meaning of formulas , and presentation-based encoding which is called Presentation MathML , dealing with the display of formulas .
The illustration tree display of Presentation and Content Markup of the expression $ C_{-\frac{17}{2}}= \tilde {\infty} $ are depicted in Figure \REF and Figure \REF respectively .
Besides MathML , there are other markups such as eqn \CITE , OpenOffice .
org Math \CITE , ASCIIMathML \CITE and OpenMath \CITE , but these markup can be converted to MathML using freely available tools .
There are not many studies on semantic enrichment problem .
In this section , we list some works that related to exploit the meaning of mathematical expressions .
For understanding mathematical expressions , Grigole et al. \CITE proposed an approach based on the surrounding text of mathematical expressions .
The main idea of this approach is to use the surrounding text for disambiguation which is based on word sense disambiguation and lexical similarity .
First , a local context C ( 5 nouns preceding a target mathematical expression ) is found in each sentence .
For each noun , the system identifies a Term Cluster ( derived from the OpenMath Content Dictionary ) with the highest semantic similarity according to a similarity metric .
The similarity scores obtained were weighted , summed up , and normalized by the length of the considered context .
The assigned interpretation is the Term Cluster with the highest similarity score .
The approach was evaluated on 451 manually annotated mathematical expressions and the best result was 68.26 $ F_{0.5} $ score .
To deal with the meanings of mathematical formulas , Nghiem et al. \CITE proposed an approach for extracting the names or descriptions of the formulas using natural language text surrounding them .
The most accurate extraction result using data from Wikipedia was $ 68.33 $ percent .
There are two other projects that deal with the semantic meaning of mathematical expressions .
The first is the SnuggleTeX project \CITE , which provides a free and open-source Java library for converting fragments of LaTeX to XML including Content MathML .
The other project is Lamapun \CITE .
This project investigates semantic enrichment , structural semantics and ambiguity resolution in mathematical corpora .
Unfortunately , there are no evaluation report on these systems .
To translate mathematical expressions from the Presentation MathML to Content MathML format , a list of rules for translation is required .
Building these translation rules by hand is a large undertaking .
Our task is inherently domain specific therefore we propose an approach which is based on statistical machine learning methods that automatically extract these rules from a dataset .
Nowadays , statistical machine translation ( SMT ) is by far the most widely-studied machine translation method .
SMT uses a very large data set of good translations , that is , a corpus of texts which have already been translated into other language , and then uses those texts to automatically infer a statistical model of translation .
The statistical model is then applied to new texts to make a translation .
Tree-based or syntax-based SMT can be used for tree-to-tree translation but it has two drawbacks when apply to the problem of translating from Presentation to Content MathML expression .
- The first drawback is tree-based SMT focus on generating the surface texts rather than the tree structures .
While mathematical expressions have strict structures , it fails to fulfill this requirement .
- The second drawback is there are many long mathematical expressions in real-world data and translating long and complex sentences has been a critical problem in machine translation .
To overcome these limitations , we introduced two separated sets of rule : fragment rules and translation rules .
The detail is described in the next section .
The framework of the system is shown in Figure \REF .
The system has three main modules .
- Preprocessing : processes MathML expressions to remove error expressions or format tags with no semantic meaning .
- Extracting Rules : given a dataset contains MathML parallel markup expressions , extract the rules for translation .
- Generating Content MathML : given a mathematical expressions in Presentation MathML markup , and a set of rules , generate Content MathML expressions to enrich the Presentation MathML expressions .
The presentation elements of Presentation MathML are divided into two classes : token elements and layout schemata .
Token elements represent identifier 's names , function 's names , numbers , etc.
Layout schemata build expressions out of parts .
By investigating the data from the Wolfram Function Site , we noticed that there are elements that have no specific meaning , they are used for displaying purpose only and most of them are layout schemata .
For example , the $ <mtext> </mtext> $ or $ <mspace / > $ tags are used to insert some space between expressions .
Another example are the pairs of parentheses , it is used to indicate that the expressions in the parentheses go together , while its structure already encoded that information .
As a result , in this preprocessing step , these elements are removed .
In this step , we also removed mathematical expressions with error markups such as expressions that have no Content markup .
For simplification , expressions with more than 200 content nodes also be removed .
In the training phase , we use GIZA++ \CITE for alignment between Presentation MathML terms and Content MathML terms .
Based on the aligned data , we use some heuristics to extract rules which we called " fragment rules " .
Fragment rules are rules that define the translation from Presentation MathML sub-trees to Content MathML sub-trees .
These rules are applied to break the large Presentation MathML tree into smaller sub-trees while maintaining the structure of output Content MathML trees .
These rules are extracted based on the fact that translate small tree is easier than translate large one .
Each rule in fragment rule set is associated with its probability , that is the frequent that rule happened in the training data .
If the sub-trees can not be broken any longer , we extract another rules , which we called " translation rules " , at that point .
We then enhances the translation rule set with the translation terms extracted by GIZA++ .
The pseudo code of the algorithm for extracting fragment rules is described in Algorithm \REF .
In the previous steps , we got two sets of rules , fragment rule set and translation rule set .
We then use these rules for translation .
Given a mathematical expressions in Presentation MathML markup , the system will generate Content MathML markup of that expression .
- First , the expression is preprocess to remove non semantic elements .
- Second , the fragment rule is applied to the expression until it could not be divided any further .
- Third , the small sub-expressions in Presentation MathML markup will be translated into sub-expressions in Content MathML markup using translation rule set .
If no translation rule is found for a sub-expression , that expression is marked as untranslated .
- Last , sub-expressions in Content MathML markup is grouped to form the complete Content MathML expression .
Before the last step , we add a heuristic translation to translate numbers .
The reason for this is that there is infinite number and we could never present every number in the rule .
The translation algorithm is described in Algorithm \REF .
The experiments were carried out using the datasets from the Wolfram Function site .
This site was created as a resource for educational , mathematical , and scientific communities .
It contains the world 's most encyclopedic collection of information about mathematical functions .
All formulas on this site are available in both Presentation MathML and Content MathML format .
These datasets we used contain 205 , 653 mathematical expressions belong to 6 categories .
All of these expressions have both MathML Presentation and Content Markup .
Training and testing were performed using 10-fold cross-validation ; for each category , the original corpus is partitioned into 10 subsets .
Of the 10 subsets , a single subset is retained as the validation data for testing the model , and the remaining subsets are used as training data .
The cross-validation process is then repeated 10 times , with each of the 10 subsets used exactly once as the validation data .
The 10 results from the folds then are averaged to produce a single estimation .
To prove the effectiveness of our models to real data , we conducted another experiment on the mathematical expressions in scientific papers .
Currently we have 20 papers from ACL archive , all of the math expressions in these papers are annotated manually with both Presentation Markup and Content Markup .
We called this data ACL-ARC .
In the first experiment , the data is not compatible with SnuggleTeX since SnuggleTeX use ASCII MathML while the Wolfram Functions site does not .
In the second experiment with ACL-ARC data , we compared our model side by side with SnuggleTeX .
Table \REF contains the various data statistics .
Given a Presentation MathML expression $ e $ , we assume that tree $ A $ is the correct Content MathML tree of expression $ e $ and tree $ B $ is the output using the automatic translation .
The basic idea to evaluate the correctness of tree $ B $ is directly comparing it with tree $ A $ .
In the experiments , we extend the conventional definition of " Translation Error Rate " and use a metric which is the combined version of
- Tree Edit Distance \CITE : the tree edit distance is the minimal cost to transform A into B using edit operations .
There are three types of edit operations : substituting a node , inserting a node , and deleting a node .
- Translation Error Rate \CITE : translation error rate is an error metric for machine translation that measures the number of edits required to change a system output into one of the references .
We call the new metric Tree Edit Distance Rate ( TEDR ) .
TEDR is defined as the rate between ( 1 ) the minimal cost to transform a tree A into another tree B using edit operations and ( 2 ) the maximum number of nodes of A and B .
It can be computed using Eq . \REF .
For example , the output tree using translation system for the expression $ C_{-\frac{17}{2}}= \tilde {\infty} $ is depict in Figure \REF .
Compare to the reference tree in Figure \REF , we need to substituting X node , inserting Y node , and deleting Z node , so that $ TED( A , B ) = x $ . While the maximum number of node of two trees is y .
Therefore , $ TEDR( A \rightarrow B ) = \frac{x}{y} = z $ .
For the data in Wolfram Function site , it appeared that SnuggleTeX is not applicable to this data since SnuggleTeX use ASCII MathML while the Wolfram Functions site does not .
Therefore we could not do the side-by-side comparison on this data .
Our experimental results show that our approach can archive reasonable results , that is 20 percent TEDR with large training data .
For small data which has less than 3000 training samples , the results vary from 50 to 75 percent TEDR .
For ACL-ARC data , the experimental results from our side-by-side comparison show that our system significantly outperforms SnuggleTeX in terms of Tree Edit Distance Rate .
Our system archived 24 percent TEDR less than the output using SnuggleTeX .
To find out the correlation between TEDR score and training set size , we set up an experiment using mathematical expressions in Elementary Functions category .
We started with one fifth of the data , and then increase data one fifth each run .
Our experimental results conform with the theoretical analysis that the more training data we have , the better the results are .
Table \REF and Table \REF show the TEDR of our proposed method on the Wolfram Functions Site data and in comparison with SnuggleTeX on ACL ARC data , respectively .
Table \REF and Figure \REF shows the correlation between TEDR score and training set size .
In this paper , we discussed the problem of the semantic enrichment of mathematical expressions .
Our experimental results show that our approach based on the statistical machine translation method for translating a Presentation MathML expression to a Content MathML expression has the significant improvement over a prior system .
As we mentioned before , mathematical notations are context-dependent .
That means we need to consider not only surrounding expressions but also the document that contains the notations in order to generate the correct semantic output .
In the scope of this paper , we only consider the first context information .
Since this is a first attempt to translate Presentation to Content MathML using a machine learning method , there is room for further improvement .
Possible improvements are
- Increasing the training data so the system can cover more mathematical notations
- Expanding the work by incorporating the surrounding information of mathematical expressions , for example definitions or other mathematical expressions .
By combining the automatic extraction of fragment rules and translation rules , our approach has shown promising results .
The experimental results confirm that this approach is helpful to the understanding of mathematical expressions .
However , this is only a first step ; many important issues remain for future studies .
Currently , our system deals only with a sub-part of mathematical notations .
In future work , we should also consider expanding it to cover all mathematical notations .
Improving protein coreference resolution by simple semantic classification
Recent research shows a major part of difficult cases in event extraction for the biomedical domain are related to coreference .
Therefore , coreference resolution is believed to be useful for the improvement of event extraction .
To address the problem of coreference resolution in molecular biology literature , the Protein Coreference ( COREF ) task was arranged in the BioNLP-ST 2011 as a supporting task .
However , the shared task results showed that transferring coreference resolution methods developed for other domains to the biological domain was not straight forward , which is supposed to be caused by the domain differences in coreference phenomena .
We studied the contribution of domain-specific information , i .e information indicating the protein type , in a rule-based protein coreference resolution system .
In particular , the domain-specific information is encoded into semantic classification modules whose output is used in different components of the coreference resolution .
We compared our system with the top four systems in the BioNLP-ST 2011 , and surprisingly we found that the minimal configuration has outperformed the best system in the BioNLP-ST 2011 .
Analysis of the experimental results showed that semantic classification using protein information has contributed to an increase in performance ( 2.3 % on the test data , and 4 .0% on the development data , in F-score ) .
The use of domain-specific information in semantic classification is important for coreference resolution .
Since such information is difficult to be transferred across different domains , we need to continue seeking for methods to exploit and use it in coreference resolution .
While named entity recognition ( NER ) and relation or event extraction are regarded as standard tasks of biomedical information extraction ( IE ) , coreference resolution [ 2 , 16 , 30 ] is more and more recognized as an important component of IE for a higher performance .
Without coreference resolution , the performance of IE is often substantially limited due to an abundance of coreference relations in natural language text , i.e. , information pieces written in text with involvement of a coreference relation are hard to be captured [ 9 , 14 ] .
There have been several attempts for coreference resolution , particularly for newswire texts [ 7 , 8 , 22 , 23 , 28 , 30 ] .
It is also one of the lessons from BioNLP Shared Task ( BioNLP-ST , hereafter ) 2009 that coreference relations in biomedical text substantially hinder the progress of fine-grained IE [ 10 ] .
To address the problem of coreference resolution in molecular biology literature , the Protein Coreference ( COREF ) task was arranged in BioNLP-ST 2011 as a supporting task .
This task definition focuses on a specific type of entities , i.e. Protein .
Figure 1 shows an example text segmented into four sentences , S2 - S5 , where coreferential expressions are shown in brackets .
In the figure , protein names are highlighted in bold face , P4 - P10 , and targeted anaphoric expressions of the shared task , e.g. pronouns and definite noun phrases , are T29 , and T32 , of which the antecedents are indicated by arrows if found in the text .
In the example , the definite-noun-phrase expression , this transcription factor ( T32 ) , is considered coreferential with the protein mention p65 ( P10 ) .
Without knowing this coreference relation , it becomes hard to capture the information written in the phrase , nuclear exclusion of this transcription factor , which is localization of p65 ( out of nucleus ) according to the framework of BioNLP-ST .
The terminologies used in this paper are similar to those in [ 25 ] .
A new term is introduced in the BioNLP-ST is antecedent protein , which indicates the protein mention contained in the antecedent expression , e.g. p65 in T28 .
There are other coreferential expressions which are ignored in the context of this COREF task such as this complex and the NF-kappa B transcription factor complex ( Figure 1 ) , since we only focus on the antecedent expressions that contain and point to protein mentions .
The best system in the COREF shared task according to the primary evaluation found 22 .2% of anaphoric protein references at the precision of 73 .3% ( 34 .1% Fscore ) .
This is an encouraging result , since the authors make use of an external coreference resolution tool originally built for the news domain , without much domain adaptation on the main coreference resolution algorithm .
Modifications are mostly made to the markable detection component and post processing for the output coreference links [ 11 ] .
However , the external coreference tool achieves much lower results on biological texts than that on news texts , from 66 .38% down to 49 .65% in MUC-score [ 11 , 27 ] , which is supposed to be caused by domain differences .
A detailed analysis on the _nal submissions of the COREF task participants was reported in the organizer 's papers [ 15 , 31 ] , which is summarized in table 2 .
In this analysis , the submitted predictions on the test data set of the COREF shared task are analyzed according to four types of anaphoric expressions : DNP for definite noun phrases , RELAT for relative pronouns , PRON for other pronouns including personal , possessive , and demonstrative pronouns , and OTHER for catch-all type .
Below are examples of the coreference types .
- " . . . ,the phosphorylation status of [ TRAF2 ] had significant effects on the ability of [ the protein ] to bind to CD40 , " ( DNP )
- " Subnuclear fractionation reveals that there are [ two ATF1 isoforms ] [ which ] appear to differ with respect to DNA binding activity , " ( RELAT )
- " This ability of [ CIITA ] to facilitate promoter occupation is undissociable from [ its ] transactivation potential , " ( PRON )
The analysis results in also showed that the best resolution results for definite noun phrases ( the DNP type ) , and several pronouns of the PRON type are 27 .5% F-score and 10 .1 F-score respectively , which are far less than that for relative pronoun ( the RELAT type ) 66 .2 % F-score .
Thus , it can be inferred that definite noun phrases and pronouns are more difficult to be resolved than relative pronouns .
The top four official results of the COREF shared task are shown again in the top four rows of Table 2 .
In this paper , we compare the contributions of different features in coreference resolution , two simple types of domain-portable information : discourse preference and number-agreement , and domain-specific information which can be considered as more difficult to be transferred across different domains .
We implemented a protein coreference system that makes use of syntactic information from parser output , and protein-indicated information encoded in rule-based semantic classification .
Experimental results showed that domain specific semantic information is important for coreference resolution , and that simple semantic classification using semantic features helped our system to outperform the best reported result in the shared task .
As we needed to get an insight into the problem , we took a rule-based approach , analyzing the training data of BioNLP-ST 2011 Coref task .
The performance of the system evaluated on the official test data set of the COREF task shows a significant improvement over the official winning system of the task .
This section presents the overview and the performance evaluation of our system .
Figure 2 shows the overall design of the system , which includes five main components : preprocessing , markable detection , anaphor selection , antecedent candidate selection , and antecedent prediction .
Processing of each component is briefly described as below .
More details of implementation can be found in the method section .
Step 0 - Preprocessing : The input text is preprocessed using NLP tools for sentence segmentation , and syntactic parsing .
We used Genia Sentence Splitter and Enju Parser [ 15 ] for the purposes , respectively .
( Enju parser comes with a default tokenizer and part-of-speech tagger for biological text . ) Row 1 in the example Table 1 shows three sentences outputted from Genia Sentence Splitter , and noun phrases outputted from Enju Parser for the sentence S3 .
Due to the limit of space , only a part of the phrases are shown in the table .
The full parse tree of this sentence is separately shown in Figure 3 .
Step 1 - Markable detection : collects text chunks that are candidate coreferential expressions , which are also called markables following the jargon of MUC-7 .
For the set of markables , noun phrases , which do not include subordinate clause , are collected as analyzed by a syntactic parser , Enju in our case .
Pronouns are also collected as markables .
Then , for chunks that share the same head word , which is normally the main noun of a noun phrase , only the longest is taken .
Since the Enju parser output such head-word information for every noun phrase , we make use of this information for our processing without any modification .
The third row of Table 1 shows the result of markable detection for the sample text .
In the sentence S3 , three noun phrases recognized by the NX and NP tags of Enju output , role , role for c-Myc in apoptosis , and this role for c-Myc in apoptosis ( Step 0 results ) share the same head word role , thus only the longest one this role for c-Myc in apoptosis is selected .
However , between studies and studies using . . .
apoptosis , the former chunk is selected , since the latter contains a subordinate clause .
Step 2 - Anaphor selection : determines candidate anaphoric expressions , which are basically pronouns and definite noun phrases ( a minority of anaphors are indefinite noun phrases or entity names , which act as appositions . )
The system first considers all pronouns and definite noun phrases in the markable set as anaphors .
Then , several filters are applied to remove anaphors that are not relevant to the task definition .
We implemented two types of filters : syntactic and semantic filters .
Syntactic filters are used to filter out pleonastic its , or pronouns such as he , she , which are not expected to refer to proteins .
Moreover , because the focus of our task is protein references , semantic filters can be used to filter out non-protein anaphors at this stage .
In practice , for definite noun phrase type of anaphors , this is done using a list of possible head words of protein references , and for pronouns , their context words are used .
More details of the methods can be found in the following section .
Step 3 - Antecedent candidate selection : For each anaphor , this component collects the antecedent candidates from the preceding expressions .
One of the candidates will become the response antecedent as a result of the antecedent prediction step .
In theory , all expressions in the set of markables can become antecedent candidates , however too much candidates makes it difficult to achieve correct antecedent prediction .
Moreover , we also filter out candidates that violate syntactic or semantic constraints raised by the anaphor .
In our system , this is done by using a window size in sentences , together with several syntactic filters .
One of the syntactic filters is based on syntactic relations among phrases outputted from the parser .
The idea behind this is that some types of syntactic relations imply the impossibility of coreference relations between its argument noun phrases and the inclusive expressions of these noun phrases .
For example , the two expressions dominant negative form and its in our example in Table 1 , can not be coreferential with each other , since they are connected via the preposition of .
Another syntactic filter removes pronouns which are not in the same pronoun family as the anaphor .
This results in the disappearance of this in candidate antecedents of its .
Pronouns in the same family as its are its , it , and itself .
Step 4 - Antecedent predicion : selects the best candidate in the antecedent candidate set , and forms a response coreference link .
Antecedent candidates are compared with one another using a comparison procedure .
This procedure implements a decision rule list containing four rules , encoding the following selection preference conditions :
-Rule 1 ( Number agreement - NUM-AGREE ) : The candidate which is not number conflict with anaphor is selected .
-Rule 2 ( Semantic constraint - SEM-CONS ) : If anaphor is a protein reference , then protein candidate is selected .
-Rule 3 ( Discourse preference - DISC-PREF ) : According to the anaphor type , the farther candidate is selected .
-Default rule ( Default discourse preference - DEFAULT ) : The closer candidate is selected .
The rules are implemented using different features of expressions such as syntactic types of expression , head noun , semantic types , etc. , in a similar way to [ 22 ] .
Each rule in the decision list compares two candidates , and returns the preferrable candidate in concern with the anaphor .
If equility happens , the next rule in the list is applied .
The default and also last rule in the decision rule list is special in the sense that depending on the anaphor , it prefers the closer or the farther candidate .
Thanks to this rule , the decision list never results in the equility result .
By this way , candidates can be sorted , and the best candidate is selected as antecedent .
Figure 4 illustrates how the decision list works when comparing two candidates and .
More details about the implementation of the main components of our system shown in Figure 2 are presented below .
In this step , we want to filter out those pronouns and definite noun phrases that are not target of this task , comprised of two types : non-anaphoric expressions , and anaphoric expressions which do not point to proteins .
The term anaphoric is used with the common sense in NLP community .
Anaphoric expression means an expression that has a noun phrase as antecedent .
This means expressions with a sentence or phrase antecedents , or nominal but successive antecedents , are not our target and should be filtered out .
Non-anaphoric expressions includes first and second person pronouns such as I , we , you , . . . , and pleonastic it .
First and second person pronouns are easily to be recognized by the part-of-speech tags , thus we use part-of-speech information for the filtering .
For pleonastic it , we make use of the following four patterns , which are similar to [ 13 ]
It be [ Adj|Adv| verb ]* that
It be Adj [ for NP ] to VP
It [ seems|appears|means|follows ] [ that ]*
NP [ makes|finds|take ] it [ Adj ]* [ for NP ]* [ to VP|Ving ]
To recognize and filter anaphoric expressions which do not point to proteins , the system is based on the protein semantic classification results determined by the method presented below .
For each anaphoric markable , the system collects a list of antecedent candidates , and select the most probable candidate to be the antecedent of the anaphor .
Basically all expressions detected in the initial expression set are antecedent candidate , except for anaphoric pronouns .
However , if the list contains too many candidates , then it may be more difficult for the later antecedent-selection algorithm .
Therefore , candidates that are not probable to be antecedent of the anaphor should be filtered out .
There are several filters that can be used :
Window size sets a border to include or exclude antecedent candidates .
This is a common method for antecedent candidate filtering having been used in the previous work [ 3 , 5 , 26 ] .
Since our task focuses on anaphoric coreference , antecedent expressions normally appear not too far ( in sentence distance ) from the anaphors , using window sizes is a proper technique .
Syntactic dependency relations The fact that arguments of some dependency relations such as poss-arg12 and prep-arg12 do not corefer with each other enables us to use them to correctly eliminate the number of antecedent candidates .
For instance , two such truncated forms definitely cannot be antecedent of the protein in this context two such truncated forms of the protein
After filtering non-relevant antecedent candidates for an anaphor in the above step , depending on the anaphor type , the remained candidates are ranked by fixed rules , or by using a pairwise comparison procedure :
The relative pronoun can be said to be the easiest type of coreference resolution , because its antecedent expression is very close to the anaphor , and in many cases , it is right before the anaphor .
For this type of anaphors , any syntactic parser can be used to find the relations between relative pronouns and their arguments .
This is exactly what our system does .
It simply produces coreference links between the relative pronouns and their arguments .
However , a disadvantage of this method is when the parser makes mistake on finding the correct arguments , coreference also fails , as in the example " . . .of transcription factor NF-kappa B also encodes a p70 I kappa B protein , I kappa B gamma , which is identical to the C-terminal 607 amino acids of . . . "
This procedure compares two candidate expressions at a time with respect to preferences raised by the anaphor .
The best antecedent expression is selected to form a response coreference link .
In particular , a list of rules is used to compare two candidates of an anaphor in a deterministic manner .
For each rule , both of the candidates are checked against the condition hold by that rule .
If one candidate satisfies and the other does not , the procedure ends with the result that the former will be preferable to the latter .
If both satisfy or both do not satisfy , the procedure proceeds to the next rule in the same manner .
The rules are applied in a succession order one after another until the inequality occurs , or end of the rule list is reached .
The default rule of the procedure prefers the closer antecedent candidate .
By definition , two coreferential expressions refer to the same thing , which implies a semantic-constraint on coreference relationship .
In other words , semantic types of coreferents must be compatible .
In practice , this compatibility is checked based on a given taxonomy of semantic classes in the following manner : two semantic classes are considered compatible or agreed with each other , when they have synonym relation , e.g. , or hypernym-hyponym relation .
In this work , we only focus on the Protein type , ignoring other possible semantic types , so we do not take the structure of taxonomy into account .
Thus , the likelihood that two expressions are semantically compatible is definitely beneficial for antecedent prediction , besides syntactic information .
Focusing on specific entity types , i.e. Protein type , helps us to find a proper method for determining the likelihood , and how to encode the likelihood in coreference resolution .
Since gold protein annotations are given , we can use them in combination with syntactic information to judge whether an expression is protein-referential expession or not .
In details , if an expression is a noun phrase with a single head word , and it contains a protein mention that completely overlaps with the head word , then the expression is classied as Protein .
Another case is when the head noun is either protein or gene , and has a protein mention as its premodifier , such as the Tax protein .
For a coordinated noun phrase , if one of its constituents is classified as Protein , then that noun phrase is also classified as Protein .
Pronouns , in particular , possessive pronouns occupy the majority of anaphoric pronouns in biological texts ( Table 5 ) .
However , they do not contain in themselves much useful information for the resolution , thus we need to exploit more information from its context [ 17 ] .
The analysis of BioNLP-ST 2011 also showed that we need different strategy to resolve such pronouns [ 18 ] .
Fortunately , the key to this problem lies in the context of pronouns .
We implemented a simple function to classify the semantic type of a possessive pronoun based on its context word .
In particular , we check the noun phrase whose determiner is its or their ; if the noun phrase contains a protein key word then the inclusive pronoun is classified into the Protein semantic type .
protein key words can be a verb , a noun or an adjective that coocurred with protein mentions and can be used as a clue to distinguish the protein type from other semantic types .
For example , the word binding in the following noun phrases its heterodimeric binding partner , or its binding site is a good clue to infer that it must be a protein reference .
For our preliminary experiment , we collect these key words manually by checking the noun phrases containing its and their in training data .
Our final protein key word set includes 12 words : binding , expression , interaction , regulation , phosphatase activity , localization , gene , sequence , region , phosphorylation , transactivation , and transcription .
In future , the protein key words can be collected automatically using the term corpus , or other resources of proteins .
Coreferential definite noun phrases in text are used in broader meaning of coreference .
In other words , their antecedents do not necessarily exist in the textual context ; in particular in biomedical scientific papers , many definite noun phrases do not have antecedents since the referred concepts can be anything understood by experts in the domain .
Distinguishing such non-anaphoric definite noun phrases from anaphoric ones is an uneasy task .
Knowing their semantic type helps to filter out irrelevant candidate antecedents , increasing chance to pick up the right antecedent or the precision of antecedent prediction .
In our implementation , decision to keep an anaphoric expression for further processing steps for an anaphoric definite noun phrase is based on a protein head word list .
We tested two different head word lists : one is built automatically from the gold anaphoric nominals in gold data , the other word list contains top seven common head words : protein , gene , factor , molecule , element , family , inhibitor , and receptor .
Semantic type information can be used in coreference resolution in several ways .
First , in anaphor selection , semantic information can be used to filter out non-protein anaphoric expressions .
Second , in antecedent candidate filtering , semantic agreement between the antecedent candidates and the anaphoric expression is checked .
Those candidates which are not agree with the anaphor in semantics are filtered out .
For example , if anaphor is classified as protein referent , then non-protein antecedent candidates are removed from the candidate set of the anaphor .
Finally , in antecedent prediction : semantic agreement again can be used as a constraint when comparing two antecedent candidates to select the more probable candidate .
Our minimal system configuration includes all the processing and filters from step 0 to step 3 as explained in the above section ( RB-MIN ) .
For antecedent candidate selection , the window size used in step 4 is set to 2 , which means antecedent candidates are collected in the two nearest sentences from the anaphor , and the sentence embedding the anaphor .
As the statistics measured on the training set of the corpus shows that 97 .0% percent of protein coreference links have antecedents appearing in within 2 sentences .
With this window size , the average number of candidates per anaphor is 6 .1 .
Also , experiments with wider window sizes did not help .
The word list used to filter out anaphoric definite noun phrases in step 2 contains the following words : protein , gene , factor , molecule , element ,family , inhibitor , and receptor .
These words are selected from the top appearring head words extracted from the training data .
Besides , premodifiers of definite noun phrases are also limited to numbers and popular premodifiers of proteins such as nuclear , transcription .
Using this head word list and premodifiers , the system covers 83 .5 percent of the coreference links .
To keep the minimal configuration simple , step 4 - antecedent selection of the baseline only uses the default comparison rule , which assures the closest antecedent candidate is selected .
Table 2 compares our system with the top four official results of the COREF shared task in BioNLP-ST 2011 [ 18 ] : UU [ 11 ] , UZ [ 29 ] , CU , and UT [ 4 ] .
The scoring scheme used throughout this paper is the protein coreference evaluation , the primary evaluation method of the COREF shared task [ 18 ] .
This primary evaluation method , which was particularly designed for the shared task , is based on protein coreference links automatically generated from manually annotated coreference links .
The last column ALL shows the overall results , while its preceding three columns PRON , DNP , and RELAT shows the protein resolution results by three major subtypes of anaphors : pronouns , definite noun phrase and relative pronouns , respectively .
Note that RB-MIN with minimal configuration already outperforms the best result by the UU team , with up to 7 .1% higher in Fscore .
Since RB-MIN uses similar preprocessing tools as UU [ 11 ] , but less information in antecedent prediction , this gap in performance is supposed to be caused by the different markable detection methods .
UU pointed in their paper that markable detection is one of the challenges of this task [ 11 ] .
In their system , UU used a machine learning approach , and tested two distinguished models for markable detection : one solved both anaphors and antecedents together , the other treated anaphors and antecedents separately .
Meanwhile , our method is basically based on the boundary of noun phrases and pronouns , as is outputted from the parser .
The patterns used to extract the proper noun phrases and pronouns , are manually designed concerning the markable boundaries annotated in the training data .
Breaking down the system performance by types of anaphors gives us an insight into what have been solved by our methods , and what needs more improvement effort .
Concerning the RELAT type of coreference , we can see that RB-MIN and RB-FULL both achieve comparable results with the best team in BioNLP-ST 2011 .
However , it should be noted that our antecedent prediction for the RELAT type is based completely on the output of Enju parser for the RELAT type , so in order to improve this type of coreference , we have to find ways to overcome the parse errors on noun phrase boundary detection and relative clause attachment ( See section Discussions ) .
The increase in system performance on the PRON and DNP types by RB-FULL demonstrate the effectiveness of discourse and semantic information in the performance of protein coreference resolution .
Comparing RB-MIN , RB-FULL and RB-MIN+1 , 3 , we found that rule 3 , which stands for discourse preference , works well for the PRON type ( 2 ) .
On the other hand , the major contribution to the improvement of DNP resolution is from rule 2 .
This rule successfully utilizes the domain-specific information , which shows that coreference resolution requires domain-specific information .
To further explore the elements contributed to this significant improvement , we analyzed our system in more details .
The analysis results are given in section Discussions .
" >
Table 3 compares various configurations of the rule-based system .
The first , RB-MIN , is the minimal system .
The following three show contribution of the three rules , NUM-AGREE , SEM-CONS , and DISC-PREF .
RB-FULL is the full system .
To emphasize the contribution of the semantic rules , it also shows RB-FULL-sem system .
The combination of rule 1 , 2 and 3 resulted in 62 .4% fscore ( RB-MIN+1 , 2 , 3 ) ( Table 3 ) In this configuration , rule 2 contribute to the increasement of 4 points Fscore on the development set , and 2 .3 points Fscore on the test set , when comparing RB-MIN+1 , 3 and RB-MIN+1 , 2 , 3 .
However , the result of RB-MIN is more than still 7 points higher than the state-of-the-art performance .
This gain is due to the fact that the rule ensures the semantic type of antecedents is the same as their anaphors , enabling the correct detection of antecedents .
In other words , if anaphor is classified as a protein reference , then antecedent must also be a protein reference .
The following examples illustrate the way rule 2 works .
( Coreference examples in this paper are represented as below : gold anaphoric and antecedent expressions are bracketed , antecedents before anaphors ; gold protein mentions are underlined ; and incorrect response antecedents are in italics . )
- " Therefore , [ IRF-1 ] may be an important contributor to IL-12 signaling , and we speculate that the defective IL-12 responses seen in IRF-1- / - mice might be attributable , in part , to the absence of [ this transcription factor ] . " ( PMID-10358173 )
In this example , without rule 2 , the faulty response antecedent of this transcription factor is part because it is the closet antecedent candidate agreeing with the anaphor on the singular number .
Meanwhile since this transcription factor is recognized as a protein reference , its closest protein antecedent IRF-1 was successfully detected by RB-FULL .
Another interesting example is
- " This role for [ c-Myc ] in apoptosis is now confirmed in studies using a dominant negative form of [ its ] heterodimeric binding partner , Max , which . . . " ( PMID-7964516 )
Concerning the anaphoric pronoun its in this example , there are several antecedent candidates : this role , c-Myc , apoptosis , studies , a dominant negative form of its heterodimeric binding partner .
Although studies and a dominant negative form of its heterodimeric binding partner have been crossed out because of disagreement in numbers , and violation of abandoned syntactic constraints correspondingly , the system would return the incorrect antecedent apoptosis instead of c-Myc .
Fortunately , the containing noun phrase of the anaphor its has the modifier word binding , which is a clue for classifying its as a protein reference ( See Semantic type classification for pronominal anaphors ) .
Rule 2 utilizes semantic classification result to make correct selection .
In our system , domain-specific semantic information is ultilized at two places : anaphor selection and antecedent prediction .
The effect of semantic information in antecedent prediction has been analyzed in above section .
In this subsection , we are going to explore the contribution of semantic information in the anaphor selection step .
To classify anaphors into protein or non-protein reference , our system employs a head-word based classfier for definite noun phrases , DEFNP-ANA-SEM , and a context-based classifier for pronouns , PRO-ANA-SEM ( Section Methods ) .
Without limiting the number of anaphors by using semantic information-based filtering , the precision significantly drops , causing a big decrease in Fscore ( Table 4 , RB-FULL w / o DEFNP-ANA-SEM ) . .
This is because the semantic filter is the only way to filter out definite noun phrase anaphors .
Without the filter , all definite expressions , which include a huge amount of non-anaphoric expressions , are considered as anaphors .
Besides the anaphoric use , definite noun phrases are also used to refer to entities or concepts in the common domain knowledge shared between readers and writers .
Statistics in [ 21 ] show that only around 30% of definite noun phrases are anaphoric , and the other uses according to their classification include associative , unfamiliar / larger situation , idiom and doubt .
Distinguishing such non-anaphoric definite noun phrases from anaphoric ones is extremely difficult .
In our system , contextual information of possessive pronouns is utilized through the protein key words ( Section Methods ) , and this contributed to 1 .8% gain in f-score ( Table 4 , RB-FULL w / o PRO-ANA-SEM ) .
This is an encouraging sign to seek for a systematic method to exploit and include such contextual information in coreference resolution .
Below are the examples showing the effectiveness of semantic information from the context of pronouns .
- " This role for [ c-Myc ] in apoptosis is now confirmed in studies using a dominant negative form of [ its ] heterodimeric binding partner , Max , which . . . " ( MID-7964516 )
- " This ability of [ CIITA ] to facilitate promoter occupation is undissociable from [ its ] transactivation potential . " ( PMID-10221658 )
- " In transient transfectin experiments , [ BCL6 ] can repress transcription from promoters linked to [ its ] DNA target sequence and this activity is . . . " ( PMID-8692924 )
- " [ Human immunodeficiency virus type 1 ( HIV-1 ) Tat ] , an early regulatory protein that is critical for viral gene expression and replication , transactivates the HIV-1 long terminal repeat ( LTR ) via [ its ] binding to the transactivation response element ( TAR ) and , . . . " ( PMID-9261367 )
In all the above examples , the appearance of words such as binding , transactivation , DNA target sequence in the noun phrases of which the anaphor plays a role as a determiner , is contextual indicator for the protein type .
Since the anaphors are predicted as protein reference from their context , the system correctly detects their protein antecedents .
Other challenges specific to the protein coreference task Number agreement is a constraint in English writing .
However , we found in the data several coreferential expressions violating this constraint .
For instance , the anaphor and antecedent in the following :
- " . . .for OTF-2 in DRA gene transcription .
In contrast , [ OTF-1-enriched protein fractions ] did not affect DRA gene transcription although [ it ] functionally enhanced the transcription of another . . . " ( PMID-1560002 )
Coreference annotation and evaluation Current protein coreference evaluation scheme generates protein links ( links between anaphors and antecedent proteins ) from surface links ( links between anaphors and antecedent expressions ) , without concerning the relative position of antecedent proteins in the antecedent expression .
Therefore , when the proteins appear in premodifiers or postmodifers of noun phrases as [ cDNAs encoding EBF or a covalent homodimer of E47 ] in this example
- " With the aim of identifying genetic targets for these transcription factors , we stably transfected [ cDNAs encoding EBF or a covalent homodimer of E47 ] , individually or together , into immature hematopoietic Ba / F3 cells , which lack [ both factors ] . " ( PMID-9252117 )
Such proteins might not be the right antecedent proteins .
In furture , corpus annotation and evaluation scheme should be revised for the ease of automation of coreference resolution .
Parse error Coreference expression boundary is determined mostly based on noun phrase boundary output from parser .
Therefore , parse error on noun phrase boundary strongly affects the performance of coreference resolution .
Examining the data , we found that many antecedent expressions of plural anaphors are coordinated noun phrases , which are unfortunately difficult cases to many parsers including Enju .
Incorporation of recent works for coordination resolution like [ 20 ] should be useful to improve the performance .
The following example shows a coordination-structured antecedent AML1 / CBF beta , C / EBP , Ets , c-Myb , HOX , and MZF-1 that was failed to be detected by the parser .
The spurious response expression is transcription factors from several families .
- " granulocytic and monocytic lineages , transcription factors from several families are active , including [ AML1 / CBF beta , C / EBP , Ets , c-Myb , HOX , and MZF-1 ] .
Few of [ these factors ] are expressed exclusively in myeloid cells ; . . . " ( PMID-9291089 )
Our work has confirmed again that domain knowledge is indispensable for coreference resolution .
Since the biologicaldomain has richer knowledge resources than any other domain , it would be interesting to continue studying how to exploit and employ domain-specific semantic information in coreference resolution for this domain .
Another conclusion concerns with markable detection .
This subproblem is often thought as an easy task in coreference resolution systems , however , indeed it is an important subtask which strongly affects the performance of coreference system .
Sticking to the gold data in the designing markable detection method as we did in this paper is one of the strategies .
However , from another perspective , the perspective of coreference data creation , we should revise the markable annotations , for the sake of automatic and robust markable detection .
As for the future , more effort should be spent on automating the semantic classification for coreference expressions using context .
Furthermore , it would be interesting to test the results in this study in a machine learning framework .
The success of corpus-based methods has made syntactically annotated corpora important resources for natural language processing .
Since words are often considered as the primitive units of language structures , the annotation of word segmentation forms the basis of these corpora .
This is also a concern of Vietnamese Treebank ( VTB ) , the first and the only publicly available syntactically annotated corpus so far for the Vietnamese language .
Although word segmentation is straight-forward for space-delimited languages like English , this is not true for languages like Vietnamese of which no standard criterion for word segmentation exists .
This work explores the challenges of Vietnamese word segmentation through the detection and correction of inconsistency for VTB .
Then , by combining and splitting the inconsistent annotations detected , we could observe the influence of different word segmentation criteria on automatic word segmentation , and the applications of word segmentation , including text classification and English-Vietnamese statistical machine translation .
The analysis and experimental results showed that our methods improved the quality of VTB , which positively affected the performance of its applications .
Treebanks , corpora annotated with syntatic structures , have become more and more impor-tant for language processing .
To strengthen the automatic processing of the Vietnamese language , the Vietnamese treebank ( VTB ) has been built as a part of the national project `` Vietnamese language and speech processing ( VLSP ) '' ( Nguyen et al ., 2009b ) .
However , in our preliminary experiment with VTB , when we trained the Berkeley parser ( Petrov et al ., 2006 ) and evaluated it using the corpus , the parser achieved only 65 .8% in F-score .
This performance is far lower than the state-of-the-art performance reported for Berkeley Parser on English Penn Treebank , 90 .3% in F-score ( Petrov et al ., 2006 ) .
There are two possible reasons for this .
First , the quality of VTB is not good enough to build a good a parser , including the quality of the annotation scheme , the annotation guidelines , and the annotation process .
Second , parsing Vietnamese is a diffcult problem by its own , and we need to seek new solutions to the problem .
VTB is annotated with three layers : word segmentation , POS tagging , and bracketing .
This paper focuses on the word segmentation issues since the most basic unit of a treebank is word ( Di Sciullo and Edwin , 1987 ) , and defining `` What are words ? '' is the first problem that a treebank has to solve ( Xia , 2000b ,a ; Sornlertlamvanich et al ., 1997 , 1999 ) .
For languages like English , answering this question is almost trivial because the blank spaces denote word delimiters .
However , for an isolating language like Vietnamese , where blank spaces play a role of syllable delimiters , `` What are words ? '' is not a trivial question .
For example , the sentence `` H❅c sinh h❅c sinh h❅c ( students learn biology )1 '' is composed of three words `` h❅c sinh ( student ) '' , `` h❅c ( learn ) , '' and `` sinh h❅c ( biology ) ; '' Word segmentation is expected to break down the sentence at the boundaries of these words , not to split `` h❅c sinh ( student ) '' and `` sinh h❅c ( biology ) '' .
Note that the terminology `` word segmentation '' also refers to the task of extracting words statistically without concerning a gold-standard for segmentation , as in ( Ha , 2003 ; Le et al ., 2010 ) .
In such context , the extracted words are more appropriate for building a dictionary than for corpus-based language processing , which are out of the focus of this paper .
Establishing a gold standard for Vietnamese word segmentation faces some diffcuties coming from the characteristics of the language .
The diffculties of Vietnamese word segmentation have been recognized by many researchers ( Ha , 2003 ; Nguyen et al ., 2004 , 2006 ; Le et al ., 2010 ) .
Although most people agree that the Vietnamese language has two types of words : single and compound , there is little consensus on how to segment a sentence into words .
The disagreement is not only because of the different functions of blank spaces as mentioned above , but also because Vietnamese is not an inflectional language like English or Japanese , where morphological forms can be useful clues for word segmentation .
While the similar problems also happen with Chinese word segmentation ( Xia , 2000b ) , Vietnamese word segmentation may be more diffcult because the modern Vietnamese writing system is based on Latin characters , which represents the pronunciation but not the meaning of words .
All these characteristics make it diffcult to perform word segmentation for Vietnamese both manually and automatically , and have resulted in different criteria for word segmenation .
However , so far there have been few studies on the challenges in word segmentation , and the comparison of different word segmentation criteria .
In this paper , a brief introduction of the Vietnamese treebank VTB and its annotation scheme are given in Section 2 .
Then , we described our methods for the detection and correction of the problematic annotations in the VTB corpus ( Section 4 .2 ) .
We classified the problematic annotations into several patterns of inconsistency , part of which were manually fixed to improve the quality of the corpus .
The rest , which can be considered as the most diffcult and controversial cases of word segmentation , were used to create different versions of the VTB corpus representing different word segmentation criteria .
Finally , we evaluated these criteria in automatic word segmentation , and its application in text classification and English-Vietnamese statistical machine translation in Section 4 .
This study is not only beneficial for the development of computational processing technologies for Vietnamese , a language spoken by over 90 million people , but also for the similar languages such as Thai , Laos , and so on .
This study also promotes the computational linguistic studies on how to transfer methods developed for a popular language like English to a language that has not yet intensively studied .
Word segmentation in VTB aims to found a standard for word segmentation in a context of multi-level language processing .
VTB specifies 12 types of units that should be identified as words ( Table 1 ) ( Nguyen et al ., a ) , which can be divided into three groups : single , compound , and special `` words '' .
Single words contain only one token .
The terminology tokens refers to text spans separated with each other by blank spaces .
Compound words have two or more tokens , and are divided into four types : compound words composed by semantic coordination ( semantic-coordinated compound ) , compound words composed by semantic subordination ( semantic-subordinated compound ) , compound words with affx , and reduplicated words .
Special `` words '' can be idioms , locutions , proper names , date times , numbers , symbols , sentence marks , foreign words , or abbreviations .
The segmentation of these types of words forms a basis for the POS tagging , with 18 different POS tags shown in Table 2 ( Nguyen et al ., c ) .
Each unit in Table 1 goes with several example words of which English translations are given in parentheses .
Besides , we added a translation for each token when possible , so that the readers unfamiliar with Vietnamese can have an intuitive idea of how the compound words are formed .
The subscript of a token translation is the index of that token in the compound word .
However , for some tokens , we could not find any appropriate English translation , so we give it an empty translation marked with an asterisk .
Note that a Vietnamese word or a token in context can have other meanings in addition to the given translations .
A special type of words in Vietnamese is classifer noun , denoted by the part-of-speech Nc in Table 2 .
Classifier nouns are specific to several Southeast Asian languages like Vietnamese and Thai .
One of the functions of classifier nouns is to express the definiteness .
For example , the common noun `` bàn '' means tables in general , while `` cái bàn '' means a specific table similar to the table in English .
In this section , we analyzed the VTB corpus to know whether the diffculties in Vietnamese word segmentation affected the quality of VTB annotations .
The analysis results revealed several types of inconsistent annotations , which are also
Vietnamese word segmentation .
Our analysis is based on two types of inconsistency : variation and structural inconsistency , whose definitions and details are given below .
Variation inconsistency : is a sequence of tokens which have more than one way of seg-mentation in the corpus .
For example , `` con gái/girl '' can remain as one word , or be segmented into two words `` con '' and `` gái '' .
A variation can be an annotation inconsistency , or an ambiguity inVietnamese .
While ambiguity cases reflect the diffculty of the language , annotation inconsistencies are usually caused by the confusion in the decision of annotators , which should be eliminated in annotation .
We use the term variation instance to refer a single occurence of a variation .
Structural inconsistency : happens when different sequences have similar structures , thus should be splitted in the same way , but are segmented in different ways in the corpus .
For example , `` con gái/girl '' and `` con trai/boy '' have similar structures , a combination of a classifier noun and a common noun Nc + N , so when `` con gái/girl '' is splitted and `` con trai/boy '' is not , it is considered as a structural inconsistency of Nc .
It is likely that structural inconsistency in word segmentation level makes the higher levels of processing , POS tagging and bracketing , become more complicated .
The detection method for variation inconsistency is based on N-gram sequences and the phrase structures in VTB treebank , following the definition of variation inconsistency above .
In details , we counted N-gram sequences of different lengths in VTB that have two or more ways of word segmentation , satisfying one of the following two conditions :
N tokens are all in the same phrase , and all have the same depth in phrase .
For example , the 3-gram " nhà tình nghĩa ( house of gratitude ) " in this structure " ( NP ( Nc-H căn ) ( N nhà ) ( A tình nghĩa ) ) , " OR
nhà tình nghĩa " in this structure " ( NP ( Nc-H căn ) ( N nhà ) ( ADJP ( A tình nghĩa ) ) ) , " where the ADJP contains only one word .
Table 3 shows the overall statistics of the variation inconsistency detected by the above method .
Most of the diffcult cases of word segmentation lie in two-token variations , occupying the majority of variations ( 92 .9% ) .
This ratio of 2-gram variations is much higher than the evarage ratio of two-token words in Vietnamese reported in ( Nguyen et al., 2009a ) , which is 80% percent .
Variations have lengths of three and four tokens occupy 6 .1% and 1 .0% , respectively .
We estimated the precision of our method by randomly selected 130 2-gram variation instances extracted from the above method , and manually checked whether they are true inconsistency .
We found that 129 cases occupying 99 .2% of all extracted 2-grams are true inconsistency .
Only one instance is an ambiguous sequence giá c , which is one word when it means price , and two words giá / price c / all in đàu có giá c / all have ( their own ) price .
The precision of our method is high enough so that so we can use the extracted variations to study the insights of word segmentation problem .
We further analyzed the 2-gram variations to know what types of 2-grams were most confusing to annotators .
The analysis results showed that compound nouns , compound verbs , and compound adjectives are the top diffcult cases of word segmentation .
We classified the 2-gram variations according to their POS sequences in case the tokens in the 2-gram are splitted .
There are totally 54 patterns of POS sequence , of which top 10 confusing patterns , a long with their counts of 2-gram variations , and examples are shown in Table 4 .
Table 5 and Table 6 show the POS patterns which a specific POS tag appearing at the beginning or ending of the sequence .
Investigating the inconsistent 2-grams extracted , we found that most of them are compound words according to the VTB guidelines ( Section 2 ) .
One of the reasons why the compound words are sometimes splitted , is because the tokens in those compound words have their own meanings , which seem to contribute to the whole meaning of the compounds .
This can be seen through the examples given in Table 4 , where the meanings of tokens are given with a subscript .
This problem seems to have caused a lot of trouble for the annotators of VTB .
Furthermore , observing the POS patterns in Table 5 and Table 6 , we can see the potential of structural inconsistency , in particular for closed-set POS tags .
Among them , classifier nouns ( Nc ) and affxes ( S ) are two typical cases of structural inconsistency , which will be used in several settings of our experiments .
The same affx or classifier noun can modify different nouns , so when they are sometimes splitted , and sometimes combined in the variations , we can conclude that classifier nouns and affxes involve in structural inconsistency .
In the following section , we presents our detection method for structural inconsistency for classifier nouns and affxes .
The detection method for structural inconsistency of classifier nouns and affxes is simple .
First , we collected all affxes and classifier nouns in the VTB corpus . Then , extracted 2-grams containing these affxes or classifier nouns , which also are the structural inconsistencies .
For example , since " con " is tagged as a classifier noun in VTB , we extracted all 2-grams of " con " including both " con gái / girl " and " con trai / boy " .
Note that even though the sequence " con trai " is always splitted into two words throughout the corpus , it can still be an inconsistency if we consider similar structures such as " con gái " .
In other words , by this method , we extract sequences that may be consistent at the surface level , but are not consistent if we consider the higher analysis levels , POS tagging .
According to the VTB POS-tagging annotation guidelines ( Nguyen et al., c ) , classifier nouns should be separated from the words they modify .
However , in practice it is confusing when the classifier noun can be stand alone as a single word .
For example a classifier noun , e.g. , " con " in " con trai ( boy ) " , or " con gái ( girl ) " , can also be a simple word which means " I ( first person pronoun used by a child when talking to his / her parents ) " , or part of a complex noun " con cái ( children ) " .
Therefore , in our experiments , we want to evaluate the " splitting " and " combining " of these diffcult cases , to see whether the solution is fruitful for applications of the corpus .
Examing the variations extracted by the variation inconsistency detection , we found that there are cases when a special character like percentage % in " 30% " , is splitted or combined with " 30 " .
Such inconsistent annotations are manually fixed based on their textual context .
Checking structural inconsistency of these special characters including percentage% , hyphen - , and so on , we found quite a significant amount of inconsistent annotations .
For example , the character % in " 30% " is splitted but is combined with the number in " 50 % " , which is considered as a structural inconsistency .
Note that although it can be argued that whether " N% " can be splitted into two words or combined in one word is dependent on the blank space in between N and " % " .
It does matter higher-levels of annotation such as POS tagging because we may need one or two different POS tags for different ways of annotation .
Therefore , we think it is better to carefully preprocess text and segment these special characters in a consistent way .
To improve the quality of VTB corpus , we extracted the probably problematic sequences using patterns of the special characters , and manually fixed this type of inconsistency .
Automatically modification is diffcult since we must check the semantics of the special characters in their contexts .
For example , hyphens in date expressions like " 5-4-1975 " , which means the date " April the fifth , 1975 , " are combined with the numbers .
However , when the hypen has a meaning of " ( from ) to " or " around .
. .
or " , as in " 2-3 gi░ sáng " meaning " around 2 or 3 o’clock in the morning " , we decided to separate it from the surrounding numbers .
As a result , we have fixed 685 inconsistent annotations of 21 special characters in VTB .
The variation inconsistency and structural inconsistency found in Section 3 above can also be seen as representatives of different word segmentation criteria for Vietnamese .
We organized the inconsistency detected in seven configurations of the original VTB corpus .
Then , by using these data sets , we could observe the influence of the different word segmentation criteria on three tasks : automatic word segmenation , text classification , and English-Vietnamese statistical machine translation .
Seven data sets corresponding to different segmentation criteria are organized as follows .
ORG : The original VTB corpus .
BASE : The original VTB corpus + Manual modification of special characters done in Section 3 .3 .
VAR_SPLIT : BASE + split all variations detected in Section 3 .1 .
VAR_COMB : BASE + combine all variations detected in Section 3 .1 .
VAR_FREQ : BASE + select the segmentation with higher frequency among all variations detected in Section 3 .1 .
STRUCT_NC : BASE + combine all classifier nouns detected in Section 3 .2 with the words they modify .
STRUCT_AFFIX : BASE + combine all suffxes detected in Section 3 .2 with the words they modify .
These data sets are used in our experiments as illustrated in Figure 1 .
The names of the data sets are also used to label our experimental configurations .
In this section , we briefly describe the task settings and the methods used for word segmentation ( WS ) , text classification ( TC ) , and English-Vietnamese statistical machine translation ( SMT ) .
We used YamCha ( Kudo and Matsumoto , 2003 ) , a multi-purpose chunking tool , to train our word segmentation models .
The core of YamCha is the Support Vector Machine ( SVM ) machine learning method , which has been proved to be effective in NLP tasks .
For the Vietnamese word segmentation problem , each token is labeled with standard B , I , or O labels , corresponding to beginning , inside , and outside positions , respectively .
Label of each token is determined based on the lexical features of two preceding words and two following words of that token .
Since Vietnamese language is not inflectional , we cannot utilize inflection features for word segmentation .
Each of the seven data sets is splitted into two subsets for training and testing our WS models .
The training set contains 8443 sentences , and the test set contains 2000 sentences .
Text classification is defined as a task of determining for an input document the most suitable topic from the predefined topics .
We implemented a text classification system similar to the system presented in ( Nguyen et al., 2012 ) .
The difference is that we performed for document level , not for sentence level .
Processing of the system is summarized as follows .
An input document is preprocessed with word segmentation and stop-word removals .
Then , the document is represented in the form of a vector of weighted words appearing in the document .
The weight is calculated using standard tf-idf product .
An SVM-based classifier predicts the most probable topic for the vector , which also is the topic of the input document .
In our experiment for comparison of different word segmentation criteria in topic classification , we only vary the word segmentation model used for this task , while fixing other configurations .
News articles of five topics : music , stock , entertainment , education , and fashion are used .
The sizes of the training and test data sets are summarized in Table 8 .
A	phrase-based SMT system for English-Vietnamese translation was implemented .
In this system , we used SRILM ( Stolcke , 2002 ) to build the language model , GIZA++ ( Och and Ney , 2003 ) to train the word-aligned model , and Moses ( Holmqvist et al., 2007 ) to train the phrase-based statistical translation model .
Translation results are evaluated using BLUE score ( Papineni et al., 2002 ) .
Both training and test data are word-segmented using the word segmentation models achieved .
For the experiment , we used the VCL_EVC bilingual corpus , 18000 pairs of sentences for training , and 1000 pairs for testing .
Evaluation of word segmentation models trained on different versions of the VTB are given in Table 9 .
And the experimental results with text classification and English-Vietnamese statistical machine translation are shown in Table 10 and Table 11 , respectively .
There are two important conclusions can be drawn from these tables : ( 1 ) Quality of the treebank strongly affects the applications since our BASE model and most of other enhanced models improved the performance of TC and SMT systems ; ( 2 ) " Splitting " seems to be a good solution for word segmentation of controversial cases , including the split of variations , affxes , and classifier nouns .
According to the result in Table 9 , the VAR_SPLIT criterion gives the highest WS performance .
Except for STRUCT_NC , all the modifications to the original VTB corpus increase the performance of WS .
However , the word segmentation criterion with higher performance is not necessarily a better criterion , but a criterion should also be judged through applications of word segmentation .
In both SMT and TC experiments , the BASE model which is based on the manually-modified inconsistency of special characters , achieved better results than the ORG model .
In particular , in the TC experiment , the BASE model achieved 0 .66 point higher than ORG , which is a significant improvement .
The results support the conclusion that the quality of word-segmentation corpus is very important for building NLP applications .
The SMT results show that three out of six augmented models , VAR_SPLIT , VAR_FREQ and BASE , gave higher performance than the ORG configuration .
Among them , the best model VAR_SPLIT achieved 36 .91 BLEU score , which is 0 .55 higher than ORG .
In TC results , all six augmented models have higher results than ORG .
In general , the augmented models are better than the ORG .
Additionally , because our automatic methods for inconsistency detection could not cover all types of inconsistency in word segmentation annotation , further improvement of corpus quality is demanded .
Comparing the results of STRUCT_AFFIX and STRUCT_NC with BASE in WS , TC , and SMT , we can observe that combining affxes with their head nouns resulted in slightly better results for WS , TC , and does not change the performance of SMT .
However , the combination of clasifier nouns with their head nouns had negative effects on WS and SMT .
Another intention of our experiment is to compare two solutions for controversial cases of word segmentation , splitting and combining .
Splitting and combining variations are reflected by VAR_COMB and VAR_SPLIT , while STRUCT_AFFIX and STRUCT_NC represent the combination of affxes or classifier nouns with the words they modify .
STRUCT_AFFIX and STRUCT_NC are contrasted with BASE where affxes and classifier nouns remain untouched .
Comparing VAR_COMB and VAR_SPLIT in both TC experiment and SMT experiment , we see that the VAR_SPLIT results are better in both cases .
Since the ratio of combined variations in the ORG corpus is 60 .9% , it can be observed that splitting seems to be better than combining for WS , TC and SMT .
In this paper , we have shown a quantitative analysis of the diffculties in word segmentation , through the detection of problematic cases in the Vietnamese treebank .
Based on the analysis , we automatically created data representing the different word segmentation criteria , and evaluated the criteria indirectly through their applications .
Our experimental results showed that manual modification done for annotation of spe-cial characters and most of other word segmentation criteria significantly improved the performances of automatic word segmentation , text classification and statistical machine translation , comparing with the use of the original VTB corpus .
Since the VTB corpus is the first effort in building a treebank for Vietnamese , and is the only corpus publicly available for NLP research , this study contributes to further improvement of the corpus quality , which is essential for building effcient NLP systems .
Face retrieval on large-scale news video datasets
Face retrieval in news video has been identified as a challenging task due to huge variations in visual appearance of human face .
Although there are several approaches proposed to cope with this problem , their extremely high computational cost limits their scalability on largescale video datasets that may contain millions faces of hundreds characters .
In this paper , we introduce approaches for face retrieval which are scalable on such datasets while maintaining competitive performances with the state-of-the-art approaches .
To utilize the variability of face appearances in video , we use a set of face images called face-track to represent for the appearance of a character in a video shot .
Our first proposal is an approach for extracting face-tracks .
We use a point tracker for exploring the connections between detected faces belonging to the same character , then grouping them into one face-track .
We present techniques to make the approach robust to common problems caused by sudden illumination changes , partial occlusions , and scattered appearances of characters in news videos .
In the second proposal , we introduce an efficient approach to match face-tracks for retrieval .
Instead of using all faces in face-tracks to compute their similarity , our approach select representative faces for each face-track .
The representative faces are sampled from the original face-track .
As a result , we significantly reduce the computational cost for face-track matching while taking into account variability of faces in face-tracks for high matching accuracy .
Experiments are conducted on two face-track datasets extracted from real-world news videos , .
Their scales have not been considered in literature ever .
One dataset contains 1,497 face-tracks of 41 characters extracted from 370 hours of TRECVID videos .
The other dataset provides 5,567 face-tracks of 111 characters observed from television news program ( NHK News 7 ) channel in 11 years .
We make both datasets public for research community .
The experimental results demonstrate that our proposed approaches achieved a remarkable balance between accuracy and efficiency.
News videos play an important role in our sources of information nowadays because of their rich and important contents .
With the advances of modern technology , a huge amount of news videos can be obtained easily .
Accordingly , it creates an urgent demand for retrieving useful information in such news video datasets .
Since most of the news is related to human , human face retrieval , which is defined as the task of extracting and returning faces relevant to a given query , obviously becomes an important task .
A robust face retrieval system on large-scale news video datasets is indeed of much benefit to a wide range of applications .
For example , by applying face retrieval to a news video dataset , we are returned a list of relevant shots or scenes containing appearance of a selected well-known character .
With the list , important events related to the character can be detected or summarized.
However , developing an accurate face retrieval system is not a trivial task because of the fact that imaged appearance of a face changes dramatically under large variations in poses , facial expressions , and complex capturing conditions .
On the other hand , efficiency is also an issue of such a face retrieval system beside its accuracy since scales of available datasets are getting larger rapidly , for instance , exceeding thousands hours of videos with millions faces of hundreds character .
Thus , accurate and efficient approaches for face retrieval are always required.
Generally , there are two principle steps in a face retrieval system .
The first step is extracting appearance of faces in video .
And , the second step is matching the extracted ones with a given query to return a rank list .
While conventional approaches consider single face images as the basic units for extracting and matching \CITE , recently proposed approaches sifted towards sets of face images called face-tracks .
A face-track contains multiple face images belonging to the same individual character within a video shot .
Face images in a face-track may present the corresponding character under different viewpoints and facial expressions ( as shown in Figure 1 ) .
By exploiting the plenteous information from multiple exemplar faces in face-tracks , face-track based approaches are expected to achieve more robust and stable performance.
Once all face-tracks in video shots are extracted , they are matched with the query to return a ranked list as the output of the face retrieval system .
Since each face-track is a set of face images , matching face-tracks essentially can be thought of as a problem of matching image sets .
There are several approaches introduced to deal with this problem \CITE .
They differ in the ways in which the sets are modeled and the similarity between sets is computed .
In these works , image set has been modeled in different way , such as distributions \CITE , subspaces \CITE , convex geometric region in feature space \CITE , or more general manifolds \CITE .
Although these approaches shown promising results on benchmark datasets , they require high computational costs to characterize the representation of face-tracks , such as computing the convex geometric region in \CITE , the probability in \CITE , and the eigenvectors in \CITE .
Their complexity in modeling facetracks and estimating similarity between face-tracks limits their practicability on large-scale datasets.
Working toward solving the above problems , our contributions in this paper is three-fold.
Robust face-track extraction on news video .
To enhance the performance of face-track matching , face-tracks should be first extracted accurately .
, We introduce an approach for this purpose .
Our approach is motivated by a study of Everingham et al .
The basic idea is to employ a point tracker ( Kanade-Lucas-Tomasi tracker \CITE ) to establish the connections between faces belonging to the same character in consecutive frames of a shot .
, In constrast to the approach in \CITE , which is failed to deal with specific problems of news video caused by sudden illumination change and partial occlusion , our approach is incorporated techniques to overcome the problems .
Evaluations on a collection of real-world news videos showed that our proposed face-track extraction approach achieved approximately 95% accuracy , a significant improvement compare the approach in \CITE .
Efficient face-track matching .
We introduce an approach which significantly reduces the computational cost for face-track matching while maintaining a competitive performance compare to those of the state-of-the-art approaches .
Based on the observation that face-tracks obtained by tracking provide highly similar faces in consecutive frames , we argue that it is redundant to use all faces in a face-track for learning the variation of faces .
Thus , a set of faces is sampled from the original face-track for matching .
The size of the set is much smaller than the size of original face-track .
Then , the mean face of sampled faces in the set is computed .
The similarity between two face-tracks is the distance between their mean faces.
Large-scale face-track datasets from real-world news videos .
We investigated the problem of face-retrieval on news video datasets whose scales have not been considered in literature ever .
Our first dataset is from 370 hours TRECVID news videos which contains 405,887 detected faces belonging to 41 individuals .
The second dataset is observed from NHK News7 channel in 11 years .
In this dataset , 1.2 millions faces of 111 individuals are provided .
The total number of available face-track is 5,567 .
Number of occurrence of each individual character varies from 4 to 550 .
Both datasets are published for the research community.
The remaining of this paper is organized as follows .
In Section 2 , we introduce related works in details .
Section 3 and Section 4 describe our face-track extraction and matching , approaches respectively .
Section 5 presents our experimental settings , .
Conclusion is given in the final Section 6.
Face-track extraction .
Face-track extraction is a key step in a video-based face retrieval system .
Existing studies on automatic face-track extraction follow a standard paradigm that consists of two basic steps , detecting faces in frames and grouping faces of the same character into face-tracks .
In the first step , Viola-Jones detector is usually employed to detect near frontal faces in frames of videos .
Then , in the second step , detected faces of the same character will be grouped by using either clustering approaches \CITE or tracking approaches \CITE .
In \CITE , Ramanan et al .
builds a color histogram for the hair , face , and torso associated with each detected face in a frame .
A concatenated vector of the normalized color histograms represents the face .
They then cluster all vectors to obtain groups of similar faces , using agglomerative clustering .
Limitations of this approach includes the expensive computational cost for constructing and clustering high dimensional representation feature vectors; and , its dependence on determining a reasonable threshold for the clustering algorithm to ensure no group contains faces of multiple characters and groups are not over-fragmented.
On the other hand , Everingham etl al .
in \CITE and Sivic et al .
In \CITE , an affine covariance tracker of \CITE is used .
This tracker can develop tracks on deforming objects , where the between frame region deformation can be modelled by an affine geometric transformation plus perturbations .
The outcome is that a face can be tracked ( by the collection of regions on it ) through significant pose variations and expression changes , allowing association of possibly distant face detections .
The disadvantage of this tracker is the computational cost for locating and tracking affine covariance regions .
Another way of using tracker is introduced by Everingham et al .
in \CITE , .
The authors employ Kanade-Lucas-Tomasi ( KLT ) tracker to create a set of point tracks starting at some frame in a shot and continuing until some later frame .
Grouping faces in different frames of one character is based on enumerating track points shared between faces .
Although using tracking is an efficient solution , it may return poor tracking results since trackers are very sensitive to illumination changes and partial occlusions .
Face-track matching .
There are two major categories of approaches target to employ multiple-exemplar of faces in face-tracks ( i.e. , sets of face images ) for robust face matching and recognition .
Approaches in the first category \CITE make use of both face images and temporal order of their appearances .
Face dynamics within the video sequence are modeled and exploited to improve recognition accuracy .
For instance , Li et al .
Edwards et al .
They than use the trained statistical face model to incorporate identity evidence over a sequence .
In \CITE , Liu and Chen use an adaptive Hidden Markov Model ( HMM ) for this face recognition problem .
In the training face , they create a HMM model for each character to learn the statistics and temporal dynamics using the eigen-face image sequence .
The implicit constraint of these approaches is that dynamics of faces should be temporally consecutive .
In general , this constraint is not always satisfied.
Without relying on temporal coherence between consecutive images , approaches in the second category uses multiple face images only .
They treat the problem as a set matching problem .
These approaches are differentiated based on the ways in which the sets are modeled and the similarity between sets is computed .
Shakhnarovich et al .
However , to make the computation tractable , they made a assumption that faces are normally distributed , which may not be true \CITE .
Cevikalp and Triggs \CITE claimed a face sequence was a set of points and discovered a convex geometric region expanded by these points .
The min-min approach \CITE considered a face sequence as a cluster of points and measured the distance between these clusters .
Subspace methods \CITE viewed a face sequence as points spread over a subspace .
Although these methods can be highly accurate , a lot of computation is needed to represent the distribution of the face sequence , such as computing the convex hulls in \CITE , the probability models in \CITE , and the eigenvectors in \CITE .
For this reason , they are not scalable for large-scale video datasets .
Face Datasets .
To evaluate performance of face matching approaches , most of recent works on face retrieval in video uses two benchmark datasets Mobo ( Motion of Body ) \CITE and Honda / UCSD \CITE .
Scales of these datasets are limited , they are varying from hundreds to thousands face images of tens individual characters .
Particularly , Honda / UCSD consists of 75 videos involving 20 individual .
Each video contains approximately 300-500 frames .
Meanwhile , Mobo provides 96 image sets of 24 individuals .
Hence , there are only 4 image sets for each individual .
One of the largest available face dataset recently is the Youtube Faces dataset \CITE , .
It provides 3,425 videos of 1,595 individual characters .
However , one character has only around 2.15 videos .
Such a small number of samples for each character is not sufficient for stably evaluating a face matching or recognition approach , which is an important part of a face retrieval system .
In addition , there is no face dataset related to real-world news videos , which is our targeted domain .
Because of all above mentioned reasons , we prepare new datasets for evaluating the approaches.
Figure 2 illustrates the overview of our framework .
In the offline stage , face-tracks in all shots of videos are extracted using our face-track extraction approach ( described in Section 4 ) .
One extracted face-track contains multiple face images of one individual character , varied under different viewpoints , illumination conditions , and expressions within a shot .
A single face image in a face-track is represented by a feature vector .
The process consisting of face-track extraction and face image representation is performed once for the entire video dataset .
Our contribution here is to make the face-track extraction approach robust to sudden illumination changes , scattered appearance of characters , and occlusions.
Given a face-track as an input retrieval query , the online stage of our system starts by using our proposed face-track matching algorithm ( described in Section 5 ) to estimate the similarity between a query face-track and each face-track in the retrieved set containing all face-tracks extracted from the dataset in the offline stage .
A ranked list of the evaluated face-tracks is returned as retrieval results of the online stage .
Since the retrieved set is huge , our approach targets an extremely efficient face-track matching strategy while maintaining competitive performance with state-ofthe-art approaches.
Given a video shot with occurrences of multiple characters , face-track extraction is the process of extracting sets of face images .
A set is supposed to contain face images of only one character who appears in the shot .
Such sets of face images are called face-tracks ( sometimes called face sequences ) .
A common strategy of existing approaches for face-track extraction consists of detecting faces in frames and grouping detected faces of the same character .
While detecting faces is done by using a standard face detector ( e.g. , Viola-Jones face detector ) \CITE , grouping detected faces requires comprehensive techniques to identify faces of the same character.
In this section , we first briefly introduce an approach for face-track extraction proposed by Everingham et al .
Its problems as it is applied to news video and our proposed solutions to overcome the problems is then presented.
To group detected faces into face-tracks , connections between faces belonging to the same character in different frames should be established .
Motion analysis can be used to investigate such connections .
If two faces in different frames are defined that they are translated faces of each other according to a motion , they are likely faces of the same character .
Everingham et al .
in \CITE propose to use KLT tracker for this purpose .
Their algorithm starts by detecting interest points in the first frame of the shot and propagating them to the next frames based on local appearance matching .
Points which can not be propagated from one frame to the next are eliminated and replaced with new points .
Given two faces in different frames , if the number of point tracks passing through both faces is larger than half of the total number of point tracks which are not in common to both faces , they are grouped into one face-track.
Although the approach by Everingham et al .
has demonstrated its efficiency and robustness on drama videos \CITE , directly applying the approach to news videos results poor performances due to following issues.
Tracking errors due to sudden illumination change .
Since the KLT tracker uses intensity variance for computing the image motion to find the correspondence between points in different frames , it is unreliable when there is a sudden and significant change in illumination .
As shown in Figure 3 ( top ) , points are distracted when flash occurs .
As a result , the points are badly tracked .
The flash breaks all connections between faces in frames before and after its occurrence.
Unadaptive track point generation .
In \CITE , track point generation is totally independent with face appearances .
New points are generated at the first frame of the shot or at a frame in which some existing points can not be propagated .
As a result , a face , which does not appear in the aforementioned frames , may not contain any point .
Its connections with other faces in the shot cannot be established for grouping.
Tracking errors due to occlusion .
To successfully connect actual faces of the same character in different frames , track points generated for the first face should be tracked and retained inside the latter faces for a sufficient number of shared points between faces .
However , when occlusion occurs , points are distracted by occluded regions .
Thus , the number of shared points drops , .
It results in face connection failure .
As shown in Figure 3 ( bottom ) , when the woman moves the paper , which partially occludes her face in several frames , some points in her facial region are drifted with the paper .
These points are not lost so they are not replaced by new points .
But , they become meaningless to determine the connection between faces.
Based on above observed limitations of the approach in \CITE on news videos , we integrate techniques to bypass these liminations in our proposed approach for face-track extraction on news videos.
Firstly , \CITE , our approach does not compare all possible pairs of faces in a shot for face grouping as in \CITE .
Such pair-wise comparison rapidly becomes intractable as the number of faces in a shot increases .
Instead of that , we group faces into face-track following temporal order of their appearances .
A detected face in the current frame is considered to group into existing face-tracks formed by previously detected faces only .
By doing this , we avoid greedy pairwise comparison.
Secondly , as our first observation , a sudden illumination change in any frame make the KLT tracker failed to track points properly .
Because such illumination changes are very common and they mostly appear together with important character in a news , a solution to this problem is vital .
We learn that the occurences of such illumination changes are usually very short ( less than 3 frames ) .
And , faces appeared in those frames are less informative for recognition since most of the facial identity characteristics are loss due to overlighting .
, They can not enrich information of its corresponding face-track , but may add noise .
Therefore , our solution is to detect and skip all frames contain sudden illumination changes , .
We call such frames as flashframes.
To indetify flash-frames , we measures the brightness of frames in the video shot .
If the brightness of a frame significantly increases compared with those of its neighbors , the frame is declared as a flash-frame and is skipped for processing .
Particularly , given a frame \SYM with t indicates its frame index , we compute the average luminosity L of the frame \SYM and its consicutive frames \SYM , where i = \SYM; t +W+ 1 , and W is the potential length of a sudden illumination change .
Then , we compare the average luminosity L of each frame \SYM in the set S = \SYM with s = t; t +W to those of \SYM and \SYM .
If L( \SYM ) > L( \SYM ) and L( \SYM ) > L( \SYM ) , \SYM is defined as flash-frames regarding a predefined brightness sensitive threshold \SYM .
In our experiments , we found that \SYM = 1:25 and W = {1; 2; 3} are optimal for detecting all flash-frames with a low false alarm rate.
Given a video shot , our approach starts by finding the first frame in which faces are detected .
All point tracking and face grouping processes are initialized from this frame , not at the first frame of the shot as in \CITE .
This helps us to save computational cost as well as to avoid tracking errors caused by transition effects between shots .
Initial track points will be generated for all detected faces in the frame .
Each face now becomes the first face of a corresponding newly formed face-track.
After the initialization , we sequentially process each frame afterwards , knowing all flash-frames will be skipped .
At a given frame , points from the previous frame are tracked by the KLT tracker to update their locations .
If there are faces detected , each face is checked against all existing facetracks formed in the previous frames to find out which facetrack it belongs to .
Checking between a face and a facetrack is based on enumerating points shared by both the face and the last appeared face of the face-track .
If the enumerated number is larger than half of the total number of points which are not in common to both faces , the faces is grouped into the face-track .
Our grouping criterion here is similar to \CITE .
A face which can not be grouped into any face-track is treated as an initial face of a new face-track .
We then generate new track points inside such faces for tracking an grouping its corresponding faces in latter frames .
In our approach , track points are generated in conjunction with face appearances .
We can ensure that there are always track points for all faces appear in the shot .
Consequently , our approach overcomes the second observed limitation of \CITE.
In other case , when a face in the current frame is grouped to an existing face-track , we prepare points for further tracking .
We remove all points which are inside the last appeared face of the face-track but not inside the current face , and vice versa .
Since such points are likely tracked incorrectly , eliminating them prevent us from transferring tracking errors to latter frames .
Points which are shared by both faces are kept .
Besides , we generate additional points to replace the removed ones and to provide updated points .
By doing that , our tracking results through a long sequence of frames become more accurate and reliable .
As a result , we can partly bypass the third observed limitation of \CITE .
When a face is partly and slowly occluded , our approach can discard incorrectly tracked points as well as reproduce points for the face after being occluded .
Thus , the connection between faces before and after the occlusion are retained.
Our approach continuously process the next frame until reaching the end of the shot .
The pseudo-code is presented in the Algorithm 1 as follows.
There are several approaches have been proposed for matching face-tracks ( as presented in Section 2 ) .
, Although these existing approaches achive high accuracy on benchmark datasets , their expensive computational costs limits their practical applications on large-scale datasets .
This motivate us to target an matching approach which is balanced between accuracy and computational cost .
The approach should be extremely efficient while archiving competitive performance compare to state-of-the-art approaches�f.
In order to maintain a competitive accuracy , we still employ plenteous information from multiple faces of a facetrack to enrich its representation .
However , instead of using all faces in a face-track , we propose to subsample the faces .
By doing that , the require computational cost can be reduced while a sufficient amount of information is kept for improving accuracy .
We called our approach as k-Faces.
Given a specific value of k , which indicates the expected size of the sub-sampled set of a face-track , the approach starts by dividing each face-track into k parts following its temporal order .
For each part , one face is selected to represent for all faces within the part .
The mean face of k selected faces is then computed .
The similarity between two face-tracks is now the distance between their mean faces.
Let denote mA = {\SYM; \SYM; : :; \SYM} and mB = {\SYM ; \SYM; : :; \SYM} are two mean faces of two face-track A and B , respectively , with N imposes the number of dimension of the feature space .
We employ following standard distance types to compute the distance between mA and mB.
An illustration of our k-Faces , is shown in Figure 4 .
Its pseudo-code is presented as follows .
Clearly , the higher value of k is selected , the more faces in each face-track are selected to compute the representative face of the face track .
And , better approximations , may result in higher accuracies .
However , the computational cost can overly increases .
By using k as a predefined parameter , k-Faces provides flexibility for users in balancing their expected accuracy and the cost which they can afford ( or time they can wait for the result ).
Besides that , since k-Faces averages multiple faces for a representative face of a face-track , the effects of noisy or outliers faces on estimating the similarity of face-tracks will be substantially reduced.
In this section , we present our experiments to evaluate the proposed approaches .
The experiments are divided into two parts .
In the first part , we evaluate the performance of the proposed approach for face-track extraction , .
Evaluation of the proposed approach for face-track matching is given in the second part.
We tested our proposed approach for face-track extraction on 8 video sequences from different video broadcasting stations , including NHK News 7 , ABC News , and CNN News.
All shot boundaries are provided in advance .
A face detector based on Viola-Jones approach \CITE was used for detecting near frontal faces in every frame of these video sequences .
A conservative threshold is used to reduce the number of false positives ( i.e. , a non-face classified as a face ).
Ground-truth information on face-tracks in videos is manually prepared .
A face-track of one character appearing in a video shot is annotated by indexes of the frames which the first face and the last face of that character occur .
An approach is called exactly extracting a face-track if it provides precise starting and ending frame indexes of the face-track , compared to ground-truth annotation .
Note that if a character moves out of the frame then moves in again , annotators will divide the appearance of that character into two independent face-tracks in our ground-truth .
The number of frames , faces , and face tracks are shown in Table 1 .
In this experiment , we directly compare our approach with one proposed by Everingham et al .
in \CITE.
As shown in Table 2 , by detecting flash-frames , our approach successfully overcomes the problem of face-track fragmentation due to illumination changes .
Meanwhile , the approach by Everingham et al .
is almost failed to do that .
In addition , the results also shows that our approach is superior to the approach by Everingham et al .
in handling problem caused by partial occlusion and appearance of character in the middle of a shot .
All face-tracks which we could not extract exactly are those fully occluded at some frames during their occurences .
In those cases , all points in face regions are drifted to background region .
Thus , there is no clue to re-group face of that person after such full occlusions .
To handle this problem , using only tracker is not enough .
One can apply visual information based clustering to group the fragmented face-track , as in \CITE , .
Obviously , extra cost is required .
However , we observe that fully occlusion is rarely happened in news video since characters reported in the news are recorded with care , especially with important and well-known character .
This is a special property of news videos .
The last column of the table shows the overall extraction performance of both approaches .
These facts clearly indicate that our approach is robust and outperforms the approach of Everingham et al .
in \CITE.
In terms of speed , our approach is approximately 2 times slower than the approach of Everingham .
However , our complexity is somehow linear to total number of face , because we consequently enlarge face-tracks following temporal order by checking new faces with only one last appeared face of each face-track .
Meanwhile , Everingham et al .
compare all pairs of faces in the shot .
Their complexity is polynomial to the total number of faces .
If this number is getting larger , the gap in speed between our approach and the approach by Everingham et al .
will be narrowed rapidly.
Because all presented problems here , such as those due to flash , occlusion , and in-the-middle face appearance , are practically observed , overcoming them is vital for practical application .
In this experiment , we show that our proposed techniques and solutions for the problems are robust and efficient enough for extracting face-tracks in real-world news videos by successfully extracting 94% of all face-tracks .
From our observations , one can use other complex techniques to handle the problems .
However , a trade-o_ between completely obtaining 6% remaining face-tracks and an overly expensive computational cost should be considered with care.
Due to the limitations of existing public datasets , we prepare new datasets for experiments .
Face-tracks in videos of the datasets are extracted by using our proposed approach for face-track extraction ( see section 4.2 ) .
Identity of the character associated with each extracted face-track is given by annotators .
Since our approach extract face-tracks in each video shot , shot boundaries for videos are required .
A simple shot boundary detector based on color histogram of frames is used .
The whole process , including detecting shot boundaries and face-track extraction , is fully automatic.
TRECVID Dataset .
We used the TRECVID news videos from 2004 to 2006 .
This dataset contains 370 hours of videos in different languages , such as English , Chinese , and Arabic .
The total number of frames that we processed was approximately 35 millions frames .
Among those , 20 millions faces were grouped into 157,524 face tracks .
We filtered out short face tracks that had less than ten faces , .
This resulted in 35,836 face tracks .
Finally , we annotated 1,497 face tracks containing 405,887 faces of 41 well known individual characters .
NHKNews7 Dataset .
This dataset is observed from NHKNews7 channel in 11 years .
After the annotation process , 1,259,320 faces of 111 individuals are provided .
The total number of face-tracks is 5,567 .
Each character has from 4 to 550 face-tracks .
In this dataset , we discard facetracks with fewer than 100 faces and more than 500 faces .
Compared to the TRECVID dataset , NHKNews7 dataset is much more challenging.
In the Table 4 , we compare our datasets with some public benchmark datasets .
, It is obvious that our datasets are extremely higher than datasets , such as MoBo and Honda / UCSD , on all statistical terms , including the number of videos , characters , and average length of face-track .
Compared to Youtube Faces dataset , although ours have less number of character ( or subjects ) , we provide much more face-tracks ( or video shots ) per character , .
Thus , ours are more relevant for evaluating retrieval system.
Statistical information of our datasets is given in the Figure 5 .
The datasets can be downloaded at http: / / satohlab .
ex.nii.ac.jp / users / ndthanh / NIIFacetrackDatasets .
However , due to copyright issues , face images in face-tracks can not be published .
Instead , we provide a feature vector , used in \CITE , for each face image .
A feature vector of a face is extracted by computing descriptors of the local appearance of the face around each of the located facial features .
Before extracting descriptors , the face is geometrically normalized to reduce the effect of pose variation .
They estimate an affine transformation , which transform the located facial feature points to a canonical set of feature positions .
Then , appearance descriptors are computed around each facial feature .
The final feature representation of the face is formed by concatenating all descriptors of its facial features.
We compare k-Faces with several approaches , including approaches based on pair-wise distances , MSM \CITE and CMSM \CITE.
Given two face-tracks having multiple face images represented as feature vectors , pair-wise based approaches compute distances between each possible pair of feature vectors in two face-tracks .
They then use the maximum distance , the minimum distance , or the mean distance of the computed pair-wise distances as the similarity measurement between two face-tracks .
We denote the approaches as pair:max , pair:min , and pair:mean , respectively ( see Figure 6 for illustration ) .
The pair:min ( sometimes called min-min ) is a state-of-the-art approach widely used in other studies \CITE.
Regarding to \CITE , if the pair-wise based approaches are representative for non-parametric sampled based approaches , MSM and CMSM are representative for approaches based on parametric model .
MSM , introduced by Yamaguchi et al .
The similarity between the sets is computed using the angle between subspaces .
CMSM is an extension of MSM , in which subspaces of the sets are projected on a constraint subspace .
By doing that , the subspaces are expected to be better separatable .
All of these approaches had been shown their robustness on benchmark datasets , such as MoBo , HondaUCSD , and Youtube Faces .
Therefore , it is appealing to compare our k-Faces with them for a comprehensive evaluation.
Besides evaluating k-Faces with different values of k as well as different types of distance ( e.g. , Euclidean , L1 , cosine ) , we try another criterion to select k representative faces in a face-track .
In the original way , we proposed to select these faces by partitioning the face-track following temporal order and selecting the middle face of each partition .
However , an yet another criterion can be applied to select these representative faces is based on clustering .
In this new way , all faces in a face-track will be clustered in to k groups by a clustering algorithm .
The centroid of each group is selected .
Then , the mean of k centroids is used as the representative face for the face-track .
In this experiment , we use the standard K-Means for clustering .
We denote the former k-Faces as k-Faces.Temporal and the latter k-Faces as k-Faces.KMeans.
We evaluate performance of a face-track matching approach by computing the average precision on the rank list returned by the approach .
In particular , for each dataset , each face-track is alternatively picked out as a query facetrack , while the remaining face-tracks are used as the retrieved database .
, Average precision of the returned ranked list is computed , given a query .
Finally , the mean of all average precision ( MAP ) from all query is reported as the overall evaluation metric for the approach on the database.
Let denote r as a rank in the returned face-track list , Pre( r ) as is the precision at the rank r of the list , Nl as the length of the list , Nhit as the total number of face-tracks matched with the query face-track q , and I sMatched( k ) as a binary function returning 1 if the face-track at rank r is matched with q ( based on ground-truth annotations ) , zero otherwise .
Then , the MAP of the evaluated approach can be computed as following: \MATH
MAP is a standard metric to evaluate retrieval and matching systems .
Besides MAP , we record processing times of the approaches on each dataset for efficiency comparison.
Figure 7 presents Mean Average Precision ( MAP ) of all evaluated approaches on our two datasets , Trecvid and NHKNews7 .
Generally , all MAPs vary from 64.61% to 76.54% on Trecvid dataset .
Meanwhile , , the best MAP is 60.99% , and the worst MAP is 42.75% on NHKNews7 dataset .
The gap of MAPs between two datasets can be explained by following reasons .
Firstly , the number of characters in NHKNews7 is more larger than those in Trecvid , 111 characters in NHKNews7 compared to 41 characters in Trecvid .
This clearly increases the probability of mismatching face-tracks .
Secondly , videos in NHKNews7 are recorded during a long time ( i.e. , 11 years ) .
Thus , besides facial variations caused by enviromental conditions at the time of recording ( e.g. , illumination , pose , viewpoint ) in each face-track , face-tracks of a character themself also contain biological variation of the character during time .
For instance , a character may look older after several years ( see Figure 8 , for example ) .
Due to those reasons , matching faces in NHKNews7 becomes more challenging , .
It results in drops of MAP( s ) of all evaluated approaches.
A clear and consistent observation from both datasets is that pair:min ( i.e. , min-min ) always achieves the best MAPs , which are 76.54% and 60.99% on two dataset , respectively .
Among several distance types , L1 is the optimal one to be used with pair:min .
A reasonable replacement can be Euclidean distance .
However , there is a minor accuracy gap between pair:min using L1 and pair:min using Euclidean .
And , computing Euclidean distance between two feature vectors is more expensive than computing their L1 distance .
The results also show that pair:min is better than pair:mean .
This is because pair:mean uses the mean of all pair-wise distances between two face-tracks as their similarity score .
By computing the mean , pair:mean reduces the effect of noisy pairs .
At the same time , it eliminates the influence of pairs containing identical faces , which can help to instantly determine they are belong to the same character .
Thus , discriminative power of the computed similarity score is reduced , compared to one computed by pair:min .
It causes the gap of MAPs between pair:min and pair:min .
More generally , this explains why such a gap between pair:min and pair:mean on NHKNews7 is larger than on Trecvid .
Since the average length of face-tracks on NHKNews7 is longer ( i.e. , each face-track contains more sample faces of a character ) , there is more chance that two face-tracks of the same character contain identical faces.
About our k-Faces , its MAP increases when k increases .
Between k-Faces.Temporal and k-Faces.KMeans , the impact of k on MAP of k-Faces.KMeans is less significant .
Since k-Faces.KMeans always use all faces in a facetrack for clustering and selecting centroids for representative faces , the final mean face is less sensitive to k .
On the contrary , k plays an important role in k-Faces.Temporal .
The higher k is set , the more representative faces of each facetrack are selected .
Thus , the final mean face of each facetrack becomes more reliable and accurate .
The advantages of k-Faces.KMeans is that it can achieve high accuracy even when k is very small .
Meanwhile , its disadvantage is the expensive computational cost to perform clustering faces on a high dimensional feature space ( i.e. , 1937 dimensions ) .
When k is large enough , there is no substantial difference in MAP between k-Faces.KMeans and k-Faces.Temporal.
On both datasets , when k increases from 2 to 20 , MAPs of k-Faces approaches grow rapidly .
However , theirs MAPs become stable from 20 afterwards .
Since keep increasing k does not help to obtain imporant accuracy improvement but expensive computational cost , we select k = 20 to investigate the trade-off between accuracy and computational costs of k-Faces approaches compared to others .
We report MAP and processing time of each approach in the Table 5 .
Processing time is separated into two parts , corresponding to preprocessing time and matching time .
Preprocessing time presents time required for preprocessing face-tracks before matching .
With k-Faces approaches , preprocessing facetracks includes selecting representative faces and computing their mean face .
In MSM and CMSM , it indicates time for computing subspaces for face-tracks .
Matching time is averaged for one query run .
Time unit is second.
According to Table 5 , k-Faces.KMeans and k- Faces.Temporal achieve almost equal accuracy and consume the same amount of time for one query on both datasets .
However , k-Faces.Temporal is hundreds times ( 240 times on Trecvid and 360 times on NHKNews7 ) faster than k-Faces.Temporal in the preprocessing phase .
This suggest that , selecting presentative faces based on tempo .
ral sampling is better than one based on clustering , in both terms of accuracy and efficiency.
Compared to state-of-the-art approaches , our k- Faces.Temporal is thousands times faster than the best approach , which is pair:min , and hundred times faster than MSM and CMSM on both datasets .
In terms of accuracy , k-Faces take second place , with 73.65% on Trevid dataset , after pair:min .
The gap with pair:min is 2.89% difference in MAP .
Meanwhile , it is significantly better than MSM and CMSM , which respectively achieve 69.20% and 64.62% .
On NHKNews7 dataset , our k-Faces.Temporal is still better than CMSM , but is worse than pair:min and MSM .
One may concern that why MSM perform poorly on Trecvid dataset , but it is superior to our k-Faces.Temporal on NHKNews7 .
This is due to the fact that face-tracks on NHKNews7 dataset is larger than those on Trecvid dataset .
Therefore , more sample faces in each face-track can be used to obtain a reliable subspace .
As expected , the results in this experiment demonstrate that our proposed approach is extremely efficient while archiving comparable performance with state-of-the-art approaches�f.
In this paper , we investigate face retrieval on large-scale news video datasets .
Our contributions is 3-fold .
Firstly , we presented practical problems when a tracker is used to extract face-tracks in news videos .
Based on that , we introduce techniques and solutions to bypass the problems for robust face-track extraction .
Secondly , we present an approach for face-track matching which significantly reduces the computational cost and achive competitive performance compared to state-of-the-art approaches .
Thirdly , we prepare , evaluate state-of-the-art face retreival approaches , and publish real-world face-track datasets whose scale have not been considered in literature ever.
Recommend-Me : recommending query regions for image search
This paper presents a novel recommendation system , named Recommend-Me , to faciliate users in searching and exploring images of an unknown image database .
Given an initial query image , Recommend-Me automatically introduces its recommendations to users .
The recommendations indicate which and how frequent items in the initial query image occur in the database .
So that , users can make their own decisions before any actual search .
If there is a recommendation matched their search intention , relevant search results are ensured .
Otherwise , users should refine their initial query image for a better query sample .
Or , they can start exploring the database by using the recommended items as hints .
Recommend-Me helps users to avoid unnecessary trials and poor searching experiences .
We introduce an efficient approach for Recommend-Me to deal with quantifying occurences of multiple candidate items over images of the database .
Instead of scanning the database for each candidate item repspectively , the approach enumerate occurences of multiple candidate items simultaneously by investigating pairs of highly similar regions , knowing one pair is formed by a region in the intial image and a region in an image of the database .
We formulate the problem of finding such pairs as an opmization problem , which can be solved by a branch-and-bound algorithm .
Experiments conducted on a real-life and publicly available dataset demonstrate the efficiency , the robustness and a promissing application of our system .
With the advances of modern technology , a large amount of digital images nowadays can be created and stored easily .
As a result , the exponential growth of image repositories creates the urgent needs for searching images . Because of its importance and wide applications , image search has attracted more interest in recent years .
In a typical scenario of image search , users supply a query item which is usually represented by a region cropped from an image .
The search system then returns a list of relevant images retrieved from a database .
The images are expected to contain the query item .
Several extensive works have been conducted with great interest on improving search performance \CITE .
However , regardless of the powerfulness of state-of-the-art search techniques , there are still cases in which users are disappointed with search results .
The reason is because relevant items are not in the database .
Under such circumstances , whatever the search technique is , results are obviously irrelevant and unexpected .
A normal user without prior knowledge about the retrieved database has no choice but search by trial-and-error .
We tackle this problem to facilitate users in searching and exploring images of such unknown database .
Our proposal is a novel recommendation system , named Recommend-Me .
The expected scheme can be described as follows ( see Figure \REF for an example ) .
Given an unknown database and an initial query image , our Recommend-Me automatically presents its recommendations to user .
One recommendation is one item , bounded by a rectangular region , in the initial query image .
Each recommended item is assigned a number to clarify how many images of the database it occurs .
Items with higher assigned numbers will be more recommended .
By providing such recommendations , Recommend-Me supports users to :
- avoid unexpected search experience with poor queries that are subjectively ( and sometimes randomly ) selected ,
- rapidly refine the initial query image before any actual search , if the recommendations show that current search intention can not return relevant results ,
- explore the database using the recommendations as hints .
Recommend-Me is a pure visual recommendation system .
No extra information or knowledge is required for input but an initial query image and a retrieved database .
To automatically generate recommendations , we need to address several critical issues .
First , there is a huge pool of candidate items in the initial query image .
Basically , any rectangular region in the image can be considered as a candidate item .
Examining all of them requires enormous computational cost .
Second , even if a candidate item is known , enumerating its occurrences in the database is not trivial because it is subject to many variations such as viewpoint and scale changes , rotation or occlusion .
Furthermore , scanning over all regions in images of the database will inevitably be prohibitive , if not infeasible for practical purposes .
In this paper , we employ state-of-the-art techniques such as SIFT and Bag-of-Words ( BoW ) model to handle matching regions under variations .
Our main focus is an efficient approach for quantifying occurences of candidate items over the database to generate recommendations .
The efficiency advantages of our approach come from various methodologies .
Based on an observation that users are mostly interested in object-like items , we use a selective search approach proposed by Van de Sande et al. \CITE to sample regions bounding object-like items in all images as a preprocessing step .
By applying the approach instead of other naive sampling approach such as sliding windows , the number of items ( i.e. regions ) that need to be processed in each image dramatically reduces .
Given two sets of regions , one contains regions of candidate items in the initial query image and the other contains regions of items in images of the database .
Finding occurences of all candidate items in the database can be equally treated as finding pairs of matched regions , knowing a pair is formed by a region in one of the sets with a region in the other .
So , if top region pairs with sufficient high similarity scores are found , we can enumerate occurences of the items .
Based on these insights , we make an yet another efficiency boost by formulating the problem as an optimization problem which can be solved by applying a branh-and-bound algorithm .
In order to do that , we introduce a novel representation based on hierarchical structure to describe a set of region pairs and a corresponding function bounding the similarity scores of pairs over such a set .
Related Works .
With respect to discovering common items , Recommend-Me is related to recent studies on mining common items in image databases such as \CITE .
However , in contrast to these studies , Recommend-Me targets items which are shared by both an image database and user interest limited in an input initial image .
Meanwhile , \CITE only aim at finding common items within the database .
One can employ these techniques to our problem by firstly figuring out common items among images of the database , then looking them up in the initial query image again for recommendations .
However , by doing that , extra costs for mining unnecessary items , which appear in the database but the initial query image , arise accordingly .
One of the most related works to Recommend-Me for query suggestion is proposed by Zha et al in \CITE .
They introduced a system called Visual Query Suggestion ( VQS ) which simultanously provides both keyword and image suggestions for users .
There are clear differences between our Recommend-Me and VQS .
VQS requires an initial text query for suggestion formulation and its suggestions are both keywords and images .
On the other hand , Recommend-Me takes an image as input and its outputs are regions in the image .
Recommend-Me is a query suggestion system based on pure visual information .
Above all , although both Recommend-Me and VQS aim at facilitating users in searching images , the targeted problems are different .
VQS proposes to help users to overcome query ambiguity formulation by precisely expressing search intents , assuming relevant items are always available .
Meanwhile , Recommend-Me supports users to select queries based on the existence of their relevant items in the retrieved database .
To the best of our knowledge , Recommend-Me is the first attempt towards its targeted suggestion scheme .
From technical point of view , our solution is motivated by recent works for object localization and subimage retrieval based on branch-and-bound optimization \CITE .
However , ours is differentiated in the way we represent sets of region pairs , instead of sets of regions only .
ESS and ESR \CITE use coordinate intervals for their presentation .
Meanwhile , we utilize hierarchical structures in order to do that , since our regions are discrete .
Although coordinate intervals as in ESS ( or ESR ) can be extended to represent set of region pairs , such criterion may suffer the branch-and-bound algorithm from curse-of-dimensionality problem since the number of dimension required is at least doubled .
Finally , ours and ESS , ESR do not share common approach to construct bounding quality function and to compute bounding values over the sets .
The rest of this paper is organized as follows .
Section 2 presents an overview of the system .
Details of our proposed approaches for finding region pairs with highest similarity scores are given in Section 3 .
Section 4 presents our experiments and evaluations .
Section 5 concludes our paper .
The framework of Recommend-Me consists of 4 main steps towards formulating final recommendations for users .
Figure \REF summarizes the pipeline .
Step 1 : Candidate item selection in images .
Using all possible rectangular regions in images as candidate items is overly expensive for further processing .
More importantly , human users are often get attracted by object-like items .
Thus , we employ an approach proposed by Van de Sande et al. \CITE for item selection .
The approach starts by oversegmenting an image into disjoint regions .
Then , it performs a greedy algorithm which iteratively merges the two most similar regions together until the whole image becomes a single region .
All region throughout the hierarchy is considered as candidate items .
Each item is represented by its rectangular bounding region .
Step 2 : Finding top region pairs with highest similarity scores .
There is a pool of region pairs if we compare each region in the initial query image with each region in images of the database .
However , only region pairs with sufficient high similarity scores are meaningful for identifying occurrences of candidate items .
In this step , we perform our proposed approach , explained in Section 3 , to find top \MATH ( an expected number of returned region pairs ) of such pairs in the pool .
Step 3 : Grouping overlapping regions .
Given \MATH region pairs returned in Step 2 and assuming each region pair in \MATH pairs is formed by a candidate item and its corresponding match , we now can enumerate the number of occurences of the items .
However , there are several regions highly overlap each other due to merging in Step 1 .
They are perceived as the same item by human being .
Thus , we propose to use maximal clique analysis technique to group such regions for consistent recommendations .
One clique is one group of regions .
Step 4 : Formulating recommendations .
Finally , for each group of regions , we count the number of images containing at least one match of one member region of the group .
The number indicates how frequent the item , represented by the group , occurs in the database .
Using those numbers , we rank all groups and then introduce them to users as our recommendations .
Representative of each group is a rectangular region located by averaging coordinates of all member regions of the group .
In this section , we introduce our proposed approach for efficiently finding top \MATH similar region pairs in the pool of all possible region pairs .
Given two sets of regions \MATH and \MATH , the set of all possible region pairs then can be represented as \MATH .
With a similarity function \MATH , we have to solve the following optimization problem in order to find the region pair \MATH with the highest similarity score .
Because \MATH elements , it is expensive to perform this maximization exhaustively .
We propose to use a branch-and-bound algorithm \CITE for the problem .
Once \MATH is found , we can obtain the other top region pairs by continuing the search processs with the remaining search spaces , in which found top pairs eliminated .
A general branch-and-bound algorithm works by hierarchically dividing the parameter space into disjoint parts , known as branching step .
In the bounding step , each part is assigned an upper bound value that the quality function could take on any of the members of the part .
Parts of the parameter space with higher upper bound values are examined first .
So , many portions of the parameter space can be eliminated if their upper bound values imply that they cannot contain the maximum .
Adapting to our problem , the parameter space is the set of all region pairs \MATH , and the quality function is the similarity function \MATH .
Assuming we can organize regions in \MATH and \MATH into two hierarchical structures \MATH and \MATH respectively , so that :
- all regions are leaf nodes of the structures and non-leaf nodes are {\it virtual} nodes ,
- if each node is repsented by a histgoram \MATH with \MATH bins , the value at each bin of a child node is constrainted to be equal or smaller the value at the same bin of its parent node .
Given such structures , we show in the following how a branch-and-bound algorithm applied to our problem .
Let \MATH and \MATH denote two nodes on \MATH and \MATH .
And , \MATH denotes the set containing all leaf nodes explored from \MATH .
If \MATH is a leaf node , \MATH .
Otherwise , given \MATH with \MATH are direct child nodes of \MATH , \MATH can be recursively defined as follows : \MATH
In a similar way , we have : \MATH
Given \MATH indicates the set of node pairs formed by paring nodes in \MATH with nodes in \MATH , we have : \MATH
So , if \MATH and \MATH are roots of \MATH and \MATH respectively , \MATH will exactly be the entire search space \MATH .
Branching Step .
Dividing the search space ( i.e. set of region pairs ) covered by \MATH is straightforward by utilizing the hierarchical structures \MATH , \MATH at certain nodes \MATH , \MATH .
Regarding to \REF , \REF and \REF , \MATH can be divided into disjoint parts as follows : \MATH
Or , \MATH
Selecting which way to divide can be based on sizes of \MATH and \MATH .
We select the larger one to be divided first .
An illustration of a branching step is given in Figure \REF .
Bounding Step .
An essential requirement for branch-and-bound is the quality bounding function \MATH used to evaluate how necessary a part of the search space should be examined .
Particularly , \MATH bounds the upper values of \MATH over a set of node pairs ( i.e. region pairs ) .
Assuming we are now evaluating the upper bound of \MATH over all region pairs in \MATH .
Among several types of distance for estimating the similarity of two regions , we stick to Normalized Histogram Intersection ( NHI ) distance since it is well-balanced between computational efficiency and robustness~\cite{ESR} .
We then rely on NHI to define \MATH bounding the values of \MATH , with : \MATH
Referring to the constraint ( b ) in constructing \MATH and \MATH , we have : \MATH
As a result , the bounding value \MATH over \MATH can be clearly observed as : \MATH
We can efficiently evaluate \MATH for the set of region pairs \MATH because \MATH is relied only on histogram representation of single rectangular regions \MATH and \MATH .
And , the normalization terms , which indicate the minimum number of visual words inside any member region of \MATH , \MATH , are computed once by using integral image technique .
Inspired by \CITE , we form the algorithm in best-first manner .
The algorithm examines next the set having highest bounding value \MATH .
The algorithm stops if the set contain only one pair of region .
Otherwise , the set is then divided into disjoint subsets for further search .
Pseudo-code for the algorithm using a priority queue to store sets of region pairs , is given as follows .
To obtain more than one region pair , we simply continue the loop in the Algorithm 1 until the expected number of region pairs \MATH have been reached .
So far , our approach is based on an assumption that the sets of regions are already organized into hierarchical structures which satisfy the constraints ( a ) and ( b ) .
In the remaining of this section , we show how to organize such sets , given the initial query image and the image database .
There are two type of region set for organization .
One is set containing regions of one image .
The other is set containing regions of multiple images ( i.e. database ) .
With the first type of set , by applying the selective search approach introduced in \CITE for item selection , regions in each image are already organized into a binary tree .
Because such binary tree were constructed by bottom-up merging regions , a parent region on the trees spatially covers its child regions in image space ( see Figure \REF ) .
As a result , we have the constraint ( b ) satisfied .
However , because we want to use all regions corresponding to all nodes throughout the tree as candidate item regions , the constraint ( a ) will be violated if we keep using the tree for the branch-and-bound based algorithm .
In other words , all current non-leaf nodes of the tree will be treated as {\it vitual nodes} and will not be used as candidate item regions .
Our solution to this problem is straightforward .
We generate and attach a new leaf node to each non-leaf nodes of the current tree .
The generated node is exactly the same as the non-leaf node it attach to , which now becomes a virtual node .
By doing that , we keep the spatial covering property of the orginal binary tree for the new hierarchical structure .
And , all non-leaf nodes will be taken into account as candidate item regions via their attachments .
The new hierarchical structure therefore satisfy both the constraints ( a ) and ( b ) .
An illustration is presented in Figure X .
With a set containing regions of multiple images , we perform a two-stage organization procedure .
At the first stage , regions in each image are organized into a hierarchical structure as we presented above .
Given multiple hierarchical structures returned from the first stage , we use their root nodes as initial elements to construct an yet another hierarchical structure over them by divisive clustering .
We start with the full set of the elements .
Then , splits are peformed recursively as one moves down the hierarcy .
In each splitting step , the splitted set is divided into $k$ parts by using $k$-means clustering algorithm .
Once the hierchical structure is completed , we then compute histogram representation for all of its non-leaf nodes .
The value at each hitogram bin of a non-leaf nodes is the maximum of all values at the same bin of its child nodes .
This is to ensure the constraint ( b ) sastified .
At last , by unifying results of both stages , we have a unique hierarchical structure over the set of regions of multiple images , which satisfies the both constraints .
We show an illustration in Figure Y .
So , given the initial query image and a database , we now can construct two hierarchical structures .
One is for regions of the initial query image .
The other is for regions of all images in the database .
Both structures are then becomes input for our proposed approach to find top region pairs with highest similarity scores for recommendation generation .
Note that , because the hierarchical for regions of images in the database is independent of query , we construct it only one time .
A recommendation is a good one if it exactly locates an item which exists in the database .
We call such recommendations as hit recommendations . Thus , a good recommendation system should accurately provide such hit recommendation to users .
More importantly , users always expect that hit recommendations are ranked higher than false recommendations ( if there are some of them ) on the list of all recommendations introduced by the system .
Based on those insights , we evaluate Recommend-Me system using two evaluation metrics : precision on introducing recommendation and rank of the first hit recommendation on the list .
Given an initial query image with ground-truth annotation indicates bounding box of an item known existed in the database , Recommend-Me is determined to precisely introduce recommendation if at least one of its recommendation is a hit recommendation .
We apply an approach used in Pascal VOC challenge to clarify whether a recommendation is a hit recommendation .
In particular , the intersection area between a hit recommendation and an item should be larger than half of their union area .
Because our target is not to improve search techniques but to facilitate query selection procedure , search performance simply relies on standard techniques if users take an recommendation as a search query .
To evaluate the efficiency of Recommend-Me on finding \MATH region pairs with highest similarity scores , we compute the number of evaluation for the quality bounding function in the branch-and-bound algorithm .
This number is then divided by the size of all possible region pairs formed by regions in the initial query image and regions in images of the database .
The fraction is reported as the efficiency improvement of Recommend-Me .
Note that , regions in images are pre-selected as in Step 1 of our framework .
Feature presentation .
We employ BoF model to represent features of images and regions in the images .
Visual words in images are located by dense grid sampling and Different-of-Gaussian( DoG ) detector .
A codebook of 2000 visual words is built using standard K-Means algorithm .
%to cluster points on a set of random images .% Additionally , the set of interest points obtained by DoG in the query image is used to remove regions without any of such points inside .
This helps us to eliminate less meaningful regions such as a portion of the sky , solid color regions , etc for recommendation .
Region selection in images .
As mentioned above , we use the approach introduced in \CITE on different color channel for region selection .
In this experiment , we used two color channels which are RGB and Hue , since regions generated on those channels can cover 99 .72\% area of the annotated item regions in our dataset .
A virtual root node is created to compose two color-dependent binary trees into one unique binary tree for each image .
In addition , rectangular regions which do not contain any visual word or are smaller than 40 x 40 pixels are discarded .% since they can form a meaningful recommendation .
Maximal clique analysis algorithm .
Given the set of regions in the initial query image , we build a graph in which two regions are connected if they highly overlap each other ( we use the approach of Pascal VOC with tighter threshold , 0 .8 ) .
Bron-Kerbosch algorithm is then applied to find all maximal cliques in the graph .
One clique is one group of regions .
Figure \REF shows our evaluation results .
The reported numbers of precision , rank of the first hit recommendation as well as efficiency improvement are averaged as we perform Recommend-Me with 375 different initial query images and an individual value of \MATH .
The results show that Recommend-Me can successfully introduce hit recommendations to users with high precision ( approximately 80 .27\% ) .
On the returned list of all recommendations , a hit recommendation usually takes the first two places on the list .
This help users to avoid choosing false recommendations ( if such false recommendations are highly ranked ) .
We observed that there are two types of false recommendations on the top places of the list .
The first type consists background regions ( e.g. trees , buildings , roads ) which are easily found in many images .
The second type is the items lacking of manual annotation such as windows , cars and humans .
Thus , recommendations about those items are not counted as hit recommendations .
However , if users are interested in using them as hints to explore the database , they are still very much helpful .
Clearly , one can realize that the performance of Recommend-Me is under the influence of \MATH .
By increasing \MATH , we obtain more region pairs with sufficient hight similarity scores .
It brings more chances to get region pairs of the annotated item , thus improves the precision .
However , the trade-off is that more unexpected items are also returned .
This results in a drop of average rank of the first hit recommendation .
Figure 5( a ) demonstrates this circumstance .
When \MATH increases from 2000 to 10000 , the precision also increases from 74 .67\% to 81 .97\% ; meanwhile , the average rank of the first hit recommendation drops to 2 .27 from 1 .78 .
It is worth noting that keeping inreasing \MATH may not always give better precision since precision relies on not only \MATH but also the robustness of the region comparision techniques .
Recommend-Me cannot provide any hit recommendation for around 20\% of initial query images due to the fact that our region comparision technique cannot deal with significant variations of items .
Figure 5( b ) shows another circumstance when we increase \MATH .
It is the decline of efficiency improvement of Recommend-Me .
This is because the branch-and-bound algorithm has to visit more parts of the total search space in order to find extra local optimals .
However , in all of our evaluations , Recommend-Me still performs around 3 times faster than the exhaustive search .
Its superiority is important for practical applications .
Figure \REF presents examples of hit recommendations returned by our Recommend-Me .
In this paper , we introduced a new system , named Recommend-Me , for visual query suggestion .
Given an initial query image and a retrieved database , Recommend-Me introduces recommendations that imposes which and how frequent items in the initial query image appear in the database .
Such recommendations support users to select search query , to rapidly refine the initial query image or to explore the database .
An efficient solution to make Recommend-Me practical is presented .
To the best of our knowledge , Recommend-Me is the first attempt toward its targeted suggestion scheme .
