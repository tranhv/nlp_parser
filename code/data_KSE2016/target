This paper analyzes the effect of the structural variation of sentences on parsing performance .
We examine the performance of both shallow and deep parsers for two sentence constructions : imperatives and questions .
The target parsers are adapted to sentences of these constructions extracted from fiction and query texts .
Analysis of the experimental results illustrates the need to handle different sentence constructions through fundamental improvement of the parsers such as re-construction of feature designs .
Parsing is a fundamental natural language processing task and essential to various NLP applications .
Recent research on parsing technologies has achieved high parsing accuracy in the same domain as the training data , but once we move to unfamiliar domains , the performance decreases to unignorable levels .
To address this problem , previous work has focused mainly on adapting lexical or syntactic preferences to the target domain , that is , on adding lexical knowledge or adjusting probabilistic models for the target domain using available in-domain resources \CITE .
Underlying these approaches , there seems to be the assumption that grammatical constructions are not largely different between domains or do not affect parsing systems , and therefore the same parsing system can be applied to a novel domain .
However , there are some cases where we cannot achieve such high parsing accuracy as parsing the Penn Treebank ( PTB ) merely by re-training or adaptation .
For example , the parsing accuracy for the Brown corpus is significantly lower than that for the Wall Street Journal ( WSJ ) portion of the Penn Treebank , even when re-training the parser with much more in-domain training data than other successful domains .
This research attempts to identify the cause of these difficulties , and focuses on two types of sentence constructions that have not been extensively studied in recent parsing research : imperatives and questions .
In these constructions , words in certain syntactic positions disappear or the order of the words changes .
We analyze how such sentences affect the parsing behavior and then attempt to clarify the difficulties in parsing imperatives and questions .
To do so , we first prepare an annotated corpus for each of the two sentence constructions by borrowing sentences from fiction and query domains .
In the experiments , parsing accuracies of two shallow dependency parsers and a deep parser are examined for imperatives and questions , as well as the accuracy of their part-of-speech ( POS ) tagger .
A conventional supervised adaptation technique was applied to these parsers and to the POS tagger .
Since domain adaptation is an extensive research area in parsing research \CITE , many ideas have been proposed , including un- or semi-supervised approaches \CITE and supervised approaches \CITE .
The main focus of these works is on adapting parsing models trained with a specific genre of text ( in most cases the Penn Treebank WSJ ) to other genres of text , such as biomedical research papers and broadcast news .
The major problem tackled in such tasks is the handling of unknown words and domain-specific manners of expression .
However , parsing imperatives and questions involves a significantly different problem ; even when all words in a sentence are known , the sentence has a very different structure from declarative sentences .
Compared to domain adaptation , structural types of sentences have received little attention to date .
A notable exception is the work on QuestionBank \CITE .
This work highlighted the low accuracy of state-of-the-art parsers on questions , and proposed a supervised parser adaptation by manually creating a treebank of questions .
The question sentences are annotated with phrase structure trees in the Penn Treebank scheme , although function tags and empty categories are omitted .
QuestionBank was used for the supervised training of an LFG parser , resulting in a significant improvement in parsing accuracy .
In this work , question sentences were collected from TREC 9-12 competitions and annotated with POS and CCG lexical categories .
The authors reported a significant improvement in CCG parsing without phrase structure annotations .
Our work further extends \CITE and \CITE , while covering a wider range of sentence constructions .
Although QuestionBank and the resource of \CITE claim to be corpora of questions , they are biased because the sentences come from QA queries .
For example , such queries rarely include yes / no questions or tag questions .
For our study , sentences were collected from the Brown corpus , which includes a wider range of types of questions and imperatives .
In the experiments , we also used QuestionBank for comparison .
We examined the performance of two dependency parsers and a deep parser on the target text sets .
All parsers assumed that the input was already POS-tagged .
We used the tagger in \CITE .
The MST and Malt parsers are dependency parsers that produce non-projective dependency trees , using the spanning tree algorithm \CITE and transition-based algorithm \CITE , respectively .
Although the publicly available implementation of each parser also has the option to restrict the output to a projective dependency tree , we used the non-projective versions because the dependency structures converted from the question sentences in the Brown corpus included many non-projective dependencies .
We used the pennconverter \CITE to convert a PTB-style treebank into dependency trees .
To evaluate the output from each of the parsers , we used the labeled attachment accuracy excluding punctuation .
The Enju parser \CITE is a deep parser based on the HPSG ( Head Driven Phrase Structure Grammar ) formalism .
It produces an analysis of a sentence including the syntactic structure ( i.e. , parse tree ) and the semantic structure represented as a set of predicate-argument dependencies .
We used the toolkit distributed with the Enju parser to train the parser with a PTB-style treebank .
The toolkit initially converts a PTB-style treebank into an HPSG treebank and then trains the parser on this .
The HPSG treebank converted from the test section was used as the gold-standard in the evaluation .
As evaluation metrics for the Enju parser , we used labeled and unlabeled precision / recall / F-score of the predicate-argument dependencies produced by the parser .
This section explains how we collected the treebanks of imperatives and questions used in the experiments in Section \REF .
The Penn Treebank 3 contains treebanks of several genres of texts .
Although the WSJ treebank has been used extensively for parsing experiments , we used the treebank of the Brown Corpus in our experiments .
As the Brown Corpus portion includes texts of literary works , it is expected to contain inherently a larger number of imperatives and questions than the WSJ portion .
The Brown Corpus portion of the Penn Treebank 3 is annotated with phrase structure trees as in the Penn Treebank WSJ .
Interrogative sentences are annotated with the phrase label " SBARQ " or " SQ " , where " SBARQ " denotes wh-questions , while " SQ " denotes yes / no questions .
Imperative sentences are annotated with the phrase label " S-IMP " .
All sentences annotated with these phrase labels were extracted .
Imperatives and questions appear not only at the top level but also as embedded clauses .
We extracted such embedded questions and imperatives as well .
However , is these were embedded in another imperative or question , we only extracted the outermost one .
Extracted sentences were post-processed to fit the natural sentence form ; that is , with first characters capitalized and question marks or periods added as appropriate .
As a result , we extracted 750 imperative sentences and 1 ,241 question sentences from 24 ,243 sentences .
Examples of extracted sentences are shown in Figure \REF .
The numbers of sentences for each section are given in Table \REF .
Although we also applied a similar method to the WSJ portion , we only obtained 115 imperatives and 432 questions .
This data was not used in the experiments .
As described below , we also used QuestionBank in the experiments .
The advantage , however , of using the Brown treebank is that it includes annotations of function tags and empty categories , and therefore , we can apply the Penn Treebank-to-HPSG conversion program of Enju \CITE , which relies on function tags and empty categories .
Hence , we show experimental results for Enju only with the Brown data .
It should also be noted that , a constituency-to-dependency converter , pennconverter \CITE , provides a more accurate conversion when function tags and empty categories are available ( see footnote 6 ) .
QuestionBank consists of question sentences as well as a small number of imperative and declarative sentences .
We extracted 3 ,859 sentences annotated with " SBARQ " or " SQ " .
During the experiments , we found several annotation errors that caused fatal errors in the treebank conversion .
We manually corrected the annotations of twelve sentences .
We intend making these corrections publicly available .
Examples of the annotation errors include brackets enclosing empty words and undefined or empty tags .
We also found and corrected obvious inconsistencies in the corpus : character " ' " replaced by " $<$ " ( 737 sentences ) , token " ? " tagged with " ? " instead of " . " ( 2 ,051 sentences ) , and phrase labels annotated as the POS ( one sentence ) .
We examined the performance of the three parsers and the POS tagger with Brown imperatives and questions , and QuestionBank questions .
By observing the effect of the parser or tagger adaptation in each domain , we can identify the difficulties in parsing imperative and question sentences .
We also examined the portability of sentence construction properties between two similar domains : questions in Brown and in QuestionBank .
We created experimental datasets for five domains : WSJ , Brown overall , Brown imperatives , Brown questions , and QuestionBank questions .
WSJ ( 43 ,948 sentences )
- Divided into three parts , for training ( Section 02 - 21 , 39 ,832 sentences ) , development test ( Section 22 , 1 ,700 sentences ) , and final test ( Section 23 , 2 ,416 sentences ) .
Brown overall ( 24 ,243 sentences )
- Randomly divided into three parts for training ( 19 ,395 sentences ) , development set ( 2 ,424 sentences ) , and final test ( 2 ,424 sentences ) .
Brown imperatives ( 750 sentences )
- divided into two parts : one for ten-fold cross validation test ( 65 $\times$ 10 sentences ) and the other for error analysis ( 100 sentences ) .
Brown questions ( 1 ,241 sentences )
- divided into two parts : one for ten-fold cross validation test ( 112 $\times$ 10 sentences ) and the other for error analysis ( 141 sentences ) .
QuestionBank questions ( 3 ,859 sentences )
- from the top of the corpus divided into three parts for final test ( 1 ,000 sentences ) , training ( 2 ,560 sentences ) , and analysis ( 299 sentences ) .
To adapt each parser and the POS tagger to a target domain , we trained the parser using combined training data for the target domain and the original parser .
For a domain containing only a small amount of training data , we replicated the training data a certain number of times and utilized the concatenated replicas for training .
POS tagger
- For Brown overall , we trained the model with the combined training data for the target domain and the original model .
For Brown imperatives / questions and QuestionBank , we replicated the training data a certain number of times and utilized the concatenated replicas and WSJ training data for training .
For the POS tagger , the number of replicas of training data was determined as either 1 , 2 , 4 , 8 , 16 , 32 , 64 , or 128 , by testing these numbers on the development test sets in three of the ten datasets for cross validation .
MST and Malt parser
- For Brown overall and QuestionBank questions , we trained the model on combined data for the target domain and the original model .
For Brown imperatives and questions , we replicated the training data ten times and utilized the concatenated replicas and WSJ training data for training .
Enju parser
- We used the toolkit in the Enju parser \CITE .
Table \REF gives the POS tagging accuracy for the target domains .
When we applied the WSJ tagger to other domains , the tagging accuracy basically decreased .
For Brown overall , compared with the WSJ , the accuracy did not decrease much .
However , for imperatives and questions , the POS tagger accuracy decreased significantly .
The table shows that the adaptation improved the tagging accuracy to some extent , but that the improved accuracy for imperatives and questions was still below that of the adapted tagger for Brown overall .
Figure \REF shows the POS tagging accuracy for the target domains for varying sizes of the target training data .
This graph shows that for both types of sentences , the first 300 training sentences greatly improved the accuracy , but thereafter , the effect of adding training data declined .
To match the tagging accuracy of the WSJ tagger for the WSJ ( 97 .53\% in Table \REF ) , preparing much more training data does not appear to be enough .
In particular , the problem is more serious for imperatives .
Next , we explored the tagging errors in each domain to observe the types of errors from the WSJ tagger and which of these were either solved by the adapted taggers or remain unsolved .
Tables \REF , \REF , and \REF show the most frequent tagging errors given by the WSJ tagger / adapted tagger for Brown questions , Brown imperatives , and QuestionBank , respectively .
From the results , we found that the main errors of the WSJ tagger for the Brown domains were mistagging of verbs , that is , " VB \SPEC " .
We then analyzed why each of these errors had occurred .
For Brown imperatives , the WSJ tagger gave two main tagging errors : " VB \SPEC NN( P ) " and " VB \SPEC VBP " .
These two types of errors arise from the following differences in sentence constructions between the WSJ declarative and Brown imperative sentences .
First , a declarative sentence normally begins with a noun phrase , whereas an imperative sentence normally begins with a verb phrase .
Since The WSJ tagger was trained on a domain consisting mainly of declarative sentences , with the training based on N-gram sequences of words or POSs , preference was given to noun phrase-derived tags at the beginning of a sentence .
Second , the main verb in an imperative sentence takes a base form , whereas the main verb in a declarative sentence takes a form based on tense .
A problem arises in that , for the present tense , except for third person singular , the verb in a declarative sentence always has the same appearance as the base form , although the tags are different : VBP and VB , respectively .
Since the WSJ tagger is predominantly based on declarative sentences , it prefers to give VBP tags to main verbs .
After adapting the tagger to Brown imperatives , the N-gram model of the tagger would have learned that the first word in a sentence tends to be a verb , and that the main verb tends to take the base form ( VB ) .
Table \REF shows that after adaptation the above two types of errors decreased to some extent , although a few mistags of verbs still remained .
By investigating the remaining errors associated with VB , we found that several errors still occurred even in simple imperative sentences such as " VB \SPEC NN " for " Charge " in " Charge something for it " , and that some errors tended to occur after a to-infinitive phrase or conjunction , such as " VB \SPEC NN " for " subtract " in " To find the estimated net farm income , subtract . . . " .
The former type could be solved by increasing the training data , whereas the latter error type cannot easily be solved with a model based on a word N-gram that cannot detect the existence of long phrases .
We also analyzed the errors in Brown questions and QuestionBank , and again found that many errors were due to the fact that the WSJ tagger was trained on a corpus consisting mainly of declarative sentences .
After the adaptation , although some of the errors such as the special use of wh-words , i.e. , " WDT \SPEC WP " , were corrected , other kinds or errors related to the global change in sentence structure still remained .
To tag words correctly both in imperatives and questions , we may have to consider richer information than only N-gram based features , such as long distance dependencies or phrases .
Table \REF gives the parsing accuracy of MST ( first order ) , MST ( second order ) , Malt , and the Enju parser for WSJ , Brown overall , Brown imperatives , and Brown questions .
Figure \REF plots the parsing accuracy against the training data size of the four parsers for WSJ , Brown imperatives , Brown questions , and QuestionBank .
Note that , since the training of the MST parser ( second order ) on Brown overall , Brown questions , and QuestionBank could not be completed in our experimental environment , the corresponding parsing accuracies denoted by bracketed hyphens in Table \REF could not be measured , Consequently , we could not plot complete graphs of second order MST for Brown questions and QuestionBank in Figure \REF .
After adaptation ( see " Adapted " column in Table \REF ) , the parser achieved two to four percent higher accuracy for each of the Brown domains compared to the WSJ parser .
For QuestionBank , 25 to 35 percent improvement in accuracy was observed .
Figure \REF shows that the improvement is proportional to the size of the training data and that this tendency does not seem to converge .
This would suggest that lower accuracy than that of the WSJ parser for the WSJ could still be as a result of a lack of training data .
In Figure \REF , the parser accuracy for QuestionBank , for which we could use much more training data than for Brown questions , approaches or even exceeds that of the WSJ parser for WSJ .
However , as there is no more training data for Brown imperatives and questions , we need to either prepare more training data or explore approaches that enable the parsers to be adapted with small amounts of training data .
To capture an overview of the adaptation effects , we observed the error reduction in the Malt parser .
Tables \REF and \REF give the recall errors on labeled dependencies , which were observed more than ten times for 100 analysis sentences in each domain .
For each dependency shown in the first column , the second and third columns show the number of parsing errors by the WSJ parser with gold tags and the adapted parser with gold tags , respectively .
Since ROOT dependencies , that is , heads of sentences , are critical to the construction of sentences , we focus mainly on this type of error .
For Brown imperatives and questions , the reduction in ROOT dependencies was prominent .
On investigation , we found that the WSJ parser often made mistakes in parsing sentences which began or ended with the name of the person being addressed .
For example , in Brown imperatives , for the sentence " See for yourself , Miss Zion . " , the WSJ parser mistook the name " Zion " to be ROOT , and the main verb " See " to be a modifier of the name .
The adapted parser correctly assigned ROOT to the main verb .
We also found that the WSJ parser often made mistakes in parsing sentences containing quotation , exclamation , or question marks , such as " " Hang on " !! " " or " Why did you kill it " ? ? " or " " " " .
For such sentences , the WSJ parser regarded the first " ! " or " ? " as ROOT , and " Hang " or " did " as the modifier of the punctuation .
A possible reason for this type of error could be that the Brown corpus places exclamation or question marks outside , instead of inside the quotation .
The adapted parser could handle this dubious construction and assigned ROOT to the main verbs as the corpus required .
On the other hand , we also observed some unsolved errors , of which we discuss two .
First , Brown imperatives and questions , include many colloquial sentences , which have rather flexible constructions , especially imperatives , such as " Lift , don't shove lift! " , " Come out , come out in the meadow! " , etc.
The parsing models based on the plausibility of constructions were not able to capture such sentences .
Second , having different sentence constructions within a single sentence , such as , where a to-infinitive phrase or subordinate clause precedes an imperative or question , often confused the parser .
For example , for the imperative sentence , " To find the estimated net farm income , subtract the estimated annual farming expenditure . . . " , both the WSJ and adapted parsers regarded " find " as ROOT , because the parsers regarded the words following " find " as a that-clause complementing " find " , as in " To find [ ( that ) the estimated net farm income , subtract the estimated annual farming . . .] " .
It would be difficult for the parsers to know which is the main clause in such complex sentences .
This type of error cannot be solved merely by increasing the training data .
Imperative or question sentences typically consist not only of a pure imperative or question clause , but also of other constructions of phrases or clauses .
These complex sentences were parsed without being partitioned into separate constructions , and as a result the parser sometimes became confused .
Both the Brown questions and QuestionBank are in the question domain .
In this section , we examine whether a parser adapted to one domain could be ported to another domain .
QuestionBank does not provide function tags , and therefore in training and evaluation of the parsers , abstracted dependencies were extracted from the corpus .
As a result , a parser adapted to one domain could not provide correct dependency labels on functions for the other domain .
However , we would expect that sentence constructions are basically common and portable between two domains , which would provide a correct boundary for phrases and therefore , the correct dependencies in phrases would be introduced by the adaptation .
Table \REF gives the parsing or tagging accuracy of each parser and the POS tagger for Brown questions and QuestionBank .
These results differ from those in Table \REF in that the parsers and the tagger have been adapted to another question domain .
The table shows that the parsers adapted to the Brown questions improved their parsing accuracy with QuestionBank , whereas the parsers adapted to QuestionBank decreased in accuracy .
Table \REF could explain this result .
Using Brown questions , many wh-questions were learnt , which is what QuestionBank mainly contains . On the other hand , despite yes-no questions constituting more than half the Brown corpus , these were not learnt using QuestionBank for training .
A question domain contains various types of questions with various sentence constructions .
In order to parse questions correctly , we need to capture each of these correctly .
This type of problem was not so obvious when we were working mainly with declarative sentences .
Through experiments with various parsers we observed that simple supervised adaptation methods are insufficient to achieve parsing accuracy comparable with that of declarative sentences .
This observation holds both for POS tagging and syntactic parsing , and indicates that the parsers need to be fundamentally improved , such as re-constructing feature designs or changing parsing models .
Following on from this study , future work includes investigating parsing frameworks that are robust for sentences with different sentence constructions , and / or methods that can effectively adapt a parser to different sentence constructions including imperatives and questions , among others .
While word segmentation is necessary for processing the Chinese and Japanese languages , its effects on Statistical Machine Translation ( SMT ) have not yet been thoroughly discussed for such languages .
In this paper , we investigate the effects of word segmentation methods on SMT , by comparing the evaluation results of the translation outputs , while varying word segmentation methods .
Additionally , meta-evaluations of evaluation metrics are also provided to investigate the validity of the metrics .
The experimental results confirmed that supervised morphological analyzers were competitive with , and performed considerably better than an unsupervised analyzer and a heuristic segmentation method .
However , a character-based segmentation achieved 10 .27 positive and 1 .95 negative differences in word-based and character-based BLEU , depending on the corpus sizes and domains .
In conclusion , we discuss the problem of the comparability of evaluation metrics , and consider ways of improving word segmentation more than popular supervised morphological analyzers .
Several languages , including Chinese and Japanese , do not require spaces between words , in their written forms .
In order to process such languages , we need to tokenize each sentence .
This process is called word segmentation .
Since word segmentation is a fundamental process , and is therefore indispensable , it is important that we explore how word segmentation affects Natural Language Processing applications .
Thus , we investigate how Japanese word segmentation affects SMT between English and Japanese , by comparing various word segmentation methods and evaluation metrics .
The word segmentation methods include both standard Japanese morphological analyzers and several heuristic methods .
In addition , we examine an unsupervised morphological analyzer , and its results .
We focus on the meta-evaluation of the current evaluation metrics and determine whether the metrics are consistent or not , when we vary word segmentation methods .
Al-Haj and Lavie ( 2012 ) compared 12 heuristic word segmentation methods based on the outputs of a standard Arabic POS tagger , and found the optimum combination in terms of BLEU on English-Arabic SMT .
They acquired a 2 .3 score improvement in comparing the worst to best combinations .
Wang et al.
( 2010 ) suggested a new short unit word segmentation standard in Chinese , which defines a more frequent string subset as a word .
For instance , one word “全球化 globalization” was separated into two words “全球 global” and “化 -lization” .
By this standard , they obtained 1 .0 BLEU score improvement within Chinese-Japanese SMT .
However , it has not yet been discussed whether BLEU is a good metric for such an evaluation of word segmentation .
In addition , comparing morphological analyzers is necessary , because different analyzers produce different outputs to SMT .
We therefore conduct several translation tasks between English and Japanese .
We measure the qualities of Japanese morphological analyzers and compare them with other word segmentation methods .
We also investigate consistencies of evaluation metrics by comparing the results .
This work aims at empirically comparing representative word segmentation methods in terms of the SMT quality .
The following experiments are designed in order to answer these questions :
- How a variety of word segmentation methods ( supervised morphological analysis , unsupervised segmentation , and heuristic methods ) affects the SMT evaluation metrics , depending on the corpus sizes and domains .
- Whether or not SMT evaluation metrics provide a consistent measure , while varying word segmentation methods .
We set up word segmentation methods , corpora , and evaluation metrics , as the three parameters for our experiments , in order to observe the effects of Japanese word segmentation on SMT .
As shown in Table 1 , the following word segmentation methods output delimiters ( “|” represents a delimiter ) for a given input character sequence .
The most popular method for Japanese word segmentation is to apply a morphological analyzer to obtain morpheme-based segmentation .
It is ; however , unclear as to which analyzer works better for the SMT task .
Therefore , we use four representative morphological analyzers and compare them :
- KyTea predicts word segmentation delimiters by pointwise prediction ( Neubig et al. , 2011 ) , using linear Support Vector Machine or logistic regression .
- MeCab regards word segmentation as a sequence labeling problem .
It uses Conditional Random Field for learning ( Kudo et al. , 2004 ) .
- JUMAN also regards word segmentation as a sequence labeling problem , but it decides the minimum cost paths without machine learning , from segmentation and association costs in human annotated lexicons and automatically generated Web lexicons .
The accuracy of supervised morphological analyzers KyTea , MeCab , and JUMAN is reported to be over 98% for news texts .
On the other hand , the unsupervised method , latticelm , achieved 66 .6% accuracy ( Mochihashi et al. , 2009 ) for human annotated news texts , while the method does not have any answers for word definitions .
Therefore , it is not possible to compare its result with the supervised results , even though it is fair to compare it from the SMT contribution point-of-view .
Furthermore , their policies concerning word segmentation definitions vary significantly .
While MeCab can change its definitions by external lexicons , and JUMAN has its own internal standard , KyTea is based on the short unit standard of the Balanced Corpus of Contemporary Written Japanese , which is considered to have one of the shortest definitions of Japanese words .
For example , if we are given a string , “見れば( if someone sees )” , MeCab separates it into two words , “見れ | ば” and JUMAN retains the same string , but KyTea outputs it as three words , “見 | れ | ば” where every character is a word .
For latticelm , since it has no supervised definition of words , it uses the expectation maximized length of words for every word , depending on the training data .
In our experiments , we further investigate such morphological analysis accuracies and word definition problems .
Chang et al.
( 2008 ) suggested that word segmentation consistency and granularity can be important factors for SMT .
Therefore , we introduce two heuristic methods for Japanese word segmentation .
One method is segmentation by character category ( CAT ) , and the other is segmentation by characters ( CHAR ) .
CAT places a word boundary when character categories change .
Character categories in Japanese include : Kanji ( Chinese character ) , Hiragana , Katakana , Latin alphabet , numeral digit , multi-byte alphabet , multi-byte digit , and other tokens .
The CHAR method considers every Unicode character as a word , as proposed by Xu et al.
( 2004 ) .
We use two news corpora : Reuters corpora ( REUTERS ) and Japanese-English News Article Alignment Data ( JENAAD ) ( Utiyama and Isahara , 2003 ) .
Another corpus we use in the experiments is a Wikipedia corpus : the Japanese-English Bilingual Corpus of Wikipedia 's Kyoto Articles 2 .01 ( WIKIPEDIA ) .
From these corpora , we prepared three data sets , as explained below .
For REUTERS , we used all 56 ,282 sentences .
Then , we split the data into three parts : the first 1 ,000 as the test , the next 500 as the development , and the remaining 55 ,282 as the training data .
For this data , we combined the JENAAD and REUTERS news corpora to acquire one news corpus .
We used all 56 ,282 and 150 ,000 sentences , respectively .
For each corpus , we divided the sentences into the first 1 ,000 for testing , the next 500 for development , and the remaining for training .
In total , we gathered 2000 , 1000 , and 203 ,782 sentences for test , development , and training , respectively .
Since the WIKIPEDIA corpus is a multi-category XML dataset , we sorted them by the DOCID in ascending order , and by the document categories : LTT , EPR , FML , BDS , CLT , BLD , GNM , SCL , ROD , SNT , PNM , HST , RLW , and SAT .
Next , we parsed it by xml .etree .ElementTree .parse of Python 2 .7 .2 , and obtained 477 ,036 sentence pairs without parsing errors .
Then , sentence pairs that include a character “|” in English or Japanese were removed , because it caused a problem with Moses .
Finally , we obtained 477 ,012 sentence pairs in total .
In order to adjust the balance of the domains , we sampled the data twice : First , we extracted the first line for every 477 lines .
Then , we merged the remaining 476 ,012 lines , and from this extract , we extracted the first line for every 952 lines .
Finally , we obtained 1 ,000 test , 500 development , and 475 ,512 training data .
We have launched two word-based evaluation methods : BLEU ( Papineni et al. , 2002 ) with 4-gram setting and RIBES ( Isozaki et al. , 2010a ) , which has been reported to have a much higher correlation to human evaluation than BLEU within English-Japanese translation tasks ( Sudoh et al. , 2011 ) .
Currently , the most popular way to evaluate SMT is to use word-based evaluation metrics , such as BLEU and RIBES .
However , these word-based evaluation metrics have a problem on independency of word segmentation evaluations .
If we do not have segmented reference and test data , we cannot evaluate the outputs by word-based evaluation metrics .
For example , for English-Japanese translations , we must tokenize reference data to evaluate SMT outputs .
On the other hand , for Japanese-English translations , we must tokenize test data to evaluate the outputs .
As a result , we need to tokenize every sentence by word segmentation before evaluation , and it is therefore difficult to independently evaluate the effects of word segmentation on training data .
It is also possible to detokenize SMT outputs first , and then tokenize them by the shared word segmentation .
However , our preliminary experiments indicated that the results obtained with this method were not independent from word segmentation of the training data .
The best results were obtained when we used the same word segmentation as the training data .
Hence , if we keep our word-based evaluations , this problem remains .
In order to manage this issue , we used one character-based metric BLEU in Characters ( De-noual and Lepage , 2005 ) with 4-gram .
As this method evaluates the character-level information , outputs are not required to be segmented , and it is free from word segmentation variations .
We have conducted English and Japanese machine translation in both directions , following the steps below :
1 .Apply the Head-Finalization ( Isozaki et al. , 2010b ) to English text in the case of English-Japanese translation .
2 .Run Japanese word segmentation methods and a normalization script , which was introduced by the NTCIR-9 PATMT task .
3 .Tokenize and lowercase English texts by Moses' tokenizer and lowercase scripts .
4 .Create language models from target languages' training data , with SRILM 1 .5 .12 .
5 .Create translation models with Giza++ 1 .0 .5 ( 2011-09-24 ) .
6 .Decode source test data with Moses ( 2010-08-13 ) .
7 .Compute evaluation scores of the outputs .
We used Enju 2 .4 .2 ( Miyao and Tsujii , 2005 ) and Head Finalization ( Isozaki et al. , 2010b ) to preprocess English data .
This method enabled more accurate translations within English-Japanese translations than with the conventional settings .
We have applied the following Head Finalization rules from ( Su-doh et al. , 2011 ) :
- Reverse each phrase 's word orders when the phrase does not end with a head .
- Exclude coordination from reversing
- Convert plural nouns to singular forms
- Remove articles “a” , “an” , and “the”
- Insert pseudo-particles _va0 , _va1 , and _va2 .
For the pseudo-particles , we use the following insertion rules ( arg1 and arg2 are swapped when the head verb 's voice is passive ) :
- Add _va0 after the arg1 entry of the sentence head verb
- Add _va1 after arg1 entries of other verbs
- Add _va2 after arg2 entries of all verbs
Table 2 and Table 3 show the English-Japanese and Japanese-English evaluation results .
The best scores in each evaluation metrics are highlighted for each data set .
All evaluation metrics have been used in both directions between English and Japanese , to measure the consistency and sufficiency of the metrics in the language pair .
In this case , the evaluation scores created by BLEU and RIBES are not comparative , due to the differences in the Japanese word definitions among the outputs of word segmentation methods .
Furthermore , the CHAR scores in BLEU and BLEU in Characters should be regarded as almost the same , while small changes have been introduced , due to statistical errors and the differences in the methods in how to treat space characters .
We found that the three supervised morphological analyzers : KyTea , MeCab , and JUMAN were much higher than latticelm and CAT , and were competitive .
For instance , on REUTERS in Table 2 , BLEU scores ranged from 27 .88 to 29 .53 , while for latticelm , the score was 15 .28 and for CAT , the score was 22 .10 .
The unsupervised morphological analyzer , latticelm , and one of heuristic methods , CAT , performed worse than expectations .
These two results were the worst , in all of the settings .
The results of CHAR were counterintuitive and are yet to be discussed .
The results were better than the results for the supervised morphological analyzers in BLEU .
It was almost competitive in RIBES and BLUE in Characters .
CHAR achieved the best score in BLEU on REUTERS ( 38 .42 ) , but the second-best was KyTea ( 29 .53 ) .
For BLEU in Characters on REUTERS , CHAR achieved 38 .61 , while the worst supervised result was KyTea 's 39 .82 .
For Japanese-English translations , the evaluation scores were generally lower than for English-Japanese translations .
This is because Japanese-English translations are conducted without Head-Finalization .
Again , the supervised morphological analyzers KyTea , MeCab , and JUMAN were competitive .
All supervised analyzers performed better than the unsupervised and the both heuristic methods .
Conversely , the unsupervised morphological analyzer latticelm and one of heuristic methods CAT performed competitively with the supervised analyzers in RIBES .
latticelm was 62 .51 and KyTea was 62 .90 on REUTERS .
In this case , CHAR was not competitive to the supervised analyzers in total .
The results for CHAR were the lowest scores in BLEU and RIBES on REUTERS and JENAAD+REUTERS , with the exception of the best 56 .55 BLEU in Characters on REUTERS .
We found that the results of the supervised morphological analyzers were better in both English-Japanese and Japanese-English experiments .
Furthermore , the differences in the word definition of KyTea , MeCab , and JUMAN were not substantial , especially for English-Japanese translations , although the word definition of KyTea is much shorter than for MeCab and JUMAN .
This result implies that phrase-based SMT can output sufficiently reasonable word / phrase alignments that can treat different word definitions , in most cases .
On the other hand , the unsupervised morphological analyzer latticelm and one of our heuristic methods CAT performed much poorer than the supervised morphological analyzers .
The experiments demonstrated an unexpected result for CHAR .
It excelled with English-Japanese translations , but not with Japanese-English translations .
We consider the possible reasons for this result in the following list :
- The Head Finalization of English-Japanese lead better phrase alignments .
- Since CHAR treats a character as a word , the best combination of its phrase alignments were the best suited for the SMT decoding .
On the other hand , we observed the following issues from our error analysis :
- Uncommon named entities were almost wrongly translated .
( For example , チェコ Czech was produced instead of チェコスロバキア Czechoslovakia . )
- Long sentences were not translated as well as other word segmentation outputs .
The reasons for the CHAR results are yet to be analyzed in detail .
However , this result indicates that there is a possibility of better word segmentation than popular supervised morphological analyzers and CHAR word segmentation .
We are planning to conduct further investigations in the future .
The current evaluation metrics that we pursued in this paper were insufficient to discuss the relative advantages and disadvantages of word segmentation in detail , since the scores that were produced were inconsistent , as explained below :
- There were many contradictory figures among evaluation metrics .
There was a case that BLEU was high , while other metrics were low .
Moreover , there is also a case in which RIBES and BLEU in Characters were incompatible with each other .
For example , on WIKIPEDIA in Table 2 , while CHAR was the highest , and performed better than the supervised morphological analyzers in RIBES , MeCab achieved the best score and notably better than CHAR in BLEU in Characters .
- If we compare every column in a row , there were tendencies that the best and the worst corpora were the same for every evaluation metrics .
In Table 2 , REUTERS was the best and WIKIPEDIA was the worst in terms of BLEU , but also JENAAD+REUTERS was the best and WIKIPEDIA was the worst in terms of RIBES .
- Even when we compare every row in a column , there were no tendencies .
For instance , in terms of BLEU in Characters , CHAR , JUMAN , and MeCab achieved the best scores in Table 3 .
This work focused on how the differences in word segmentation affected SMT outputs , the quality of the unsupervised word segmentation on SMT , and the meta-evaluation of the current evaluation metrics .
In summary , we found that the representative morphological analyzers were competitive and much better than both the unsupervised analyzer and one of our heuristic methods .
Nevertheless , a heuristic word segmentation method CHAR achieved relatively good word-based BLEU scores and competitive character-based BLEU results , compared to the supervised analyzers .
Additionally , as we could not always obtain consistent scores from the current evaluation metrics , the data was insufficient for discussing the relative advantages and disadvantages of word segmentation , with accuracy .
We have also suggested that it is possible to implement more optimized word segmentation on SMT .
On Contribution of Syntactic Dependencies to Word Sense Disambiguation
Traditionally , many researchers have addressed word sense disambiguation ( WSD ) as an independent classification problem for each word .
However , the problem with these approaches , is that they disregard the interdependencies of word senses , and that it is limited in its applicability to the word senses for which training instances are served .**[<-This sentence is a bit confusing]
In this paper , we propose a supervised WSD model based on the syntactic dependencies of word senses .
In particular , we assume that strong dependencies between the sense of a syntactic head and those of its dependents exist .
We describe these dependencies on the tree-structured conditional random fields ( T-CRFs ) , and obtain the most appropriate assignment of senses optimized over the sentence .
Furthermore , we define these sense dependencies in combination with various coarse-grained sense tag sets , so that our model can also work for words that do not appear in the training data ; these combined features help relieve the data sparseness problem .
In experiments , we display the appropriateness of considering the sense dependencies , as well as the advantage of [having ? Using ?] the combination of fine- and coarse-grained tag sets .
The performance of our model is shown to be comparable to those of state-of-the-art WSD systems .
We also present an in-depth analysis of the effectiveness of the sense dependency features by using intuitive examples .
Word sense disambiguation ( WSD ) is one of the most fundamental problems in computational linguistics .
The task of WSD is to resolve the inherent polysemy of words by determining the appropriate sense( s ) for each polysemous word in a given text .
It is considered to be an intermediate , but necessary step for many NLP applications , including machine translation and information extraction , which[what does " which " refer to ? Machine translation ? Information extraction , or both ? Clarify] require the knowledge of word senses to perform better .
One major obstacle for large-scale and precise WSD is solving the data sparseness problem caused by the fine-grained nature of sense distinction .
In recent years in order to resolve this problem , several semi-supervised approaches have been explored .
Some researchers have addressed the scarcity of the training data directly , and have explored the methods to obtain more tagged instances , by co-training and self-training .
Other researchers have employed useful global information , such as the domain information extracted from unannotated corpora .
Although the use of global information has succeeded in dramatically increasing the performance of WSD , there is much room left to examine the effectiveness of local or syntactic information .
One such information yet to be explored , is the interdependency of word senses .
Although the use of local and syntactic information has been common in WSD , traditional approaches to WSD are based on the individual classification framework for each word ; each word 's sense is treated independently , regardless of any interdependencies or cooccurrences of word senses .
In turn , the resulting sense assignment may not be semantically consistent over the sentence .
To solve this problem is of great interest from both a practical and theoretical viewpoint .
In this thesis , we present a WSD model that naturally handles all content words in a sentence .
We focus on using the interdependency of word senses , so that we can directly address the issue of semantic ambiguity in a whole sentence that arose from the interaction of each word 's sense ambiguity . **[ <- this part is confusing .]
Specifically , we assume that are strong sense dependencies between a syntactic head , and its dependents in the dependency tree , rather than between neighboring words of a sentence .
We confirm the validity of this assumption , by showing the superiority of the tree-structured models over the linear-chain models .
Furthermore , we combine these sense dependency features with various coarse-grained sense tag sets .
This is to relieve the data sparseness problem caused by the explosion in the number of features , which is roughly squared by the combination of two word senses .
The combined features also enable our model to work , even for words that do not appear in the training data , which traditional individual classifiers cannot handle .
As a machine learning method , we adopt the tree-structured conditional random fields ( T-CRFs ) .
We solve WSD as a labeling problem to a sentence described as a dependency tree , where the vertices correspond to the words , and the edges correspond to the sense dependencies .
In this model , the intensities of the sense dependencies are described as the weights of edge features .
T-CRFs also enable us to incorporate various sense tag sets all together into a simple framework .
In our experiments , three interesting results are found : the interdependency of word senses contribute to the improvement of WSD models , the combined features with coarse-grained sense tags work effectively , and the tree-structured model outperforms the linear-chain model .
These results are confirmed on three data sets ( the SemCor corpus and the Senseval-2 and -3 English all-words task test sets ) , and on two sense inventories ( WordNet synsets and supersenses ) .
Our final model is shown to perform comparably to state-of-the-art WSD systems .
The rest of the paper is organized as follows : In Section 2 , we describe background topics related to WSD .
In Section 3 , we describe current problems of WSD , and related works .
In Section 4 , we describe our model with intuitive examples , and we describe the machine learning method that we use .
In Section 5 , 6 , and 7 , we present our experimental setup , the results , and an in-depth analysis on the contribution of the sense dependency features .
Finally , in Section 8 , we present our concluding remarks .
The WordNet is a broad-coverage machine-readable dictionary ( MRD ) for English , containing about 150 ,000 words .
WordNet also serves as an ontology of various kinds of meta data , relations among words and senses , and a well-organized hierarchical classification of word senses that are defined .
In this paper , we always refer to the WordNet version 2 .0 unless otherwise noted .
The statistical information of the WordNet 2 .0 is shown in Table 1 and 2 .
As shown in Figure 1 , in WordNet , nouns and verbs are organized into hierarchical structures with IS-A ( hypernym-hyponym ) relationships among words , .
Nouns have a far deeper structure than verbs do , while that the structure of verbs is transversely developed .
All nouns and verbs , with the exception of some top-level concepts , are classified into primitive groups called supersenses , which we will describe later .
Figure 1 shows the WordNet hierarchical structure for the first sense ( financial bank ) of a noun bank , where each line indicates a synset with the list of words headed by its supersense label ; an arrow denotes that the two synsets are in an IS-A relation .
The synset {group#1 , grouping#1} is a broad semantic category that governs the supersense group noun .group .
The lower synsets {social group#1} , {organization#1 , organisation#3} , and {institution#1 , establishment#2} are the more specific synsets , which in this paper we call the first , second , and third general synsets .
Note that since the organizations of adjectives and adverbs are very different from those of nouns and verbs , we use this hierarchical information for only nouns and verbs .
A supersense is a coarse-grained semantic category , with which each noun or verb synset in WordNet is associated .
Noun and verb synsets are associated with 26 and 15 categories , respectively .
The coarse-grained sets of sense labels are easily recognizable , and enable us to build a high-performance and robust tagger with small training data .
Hence , we can expect them to act as a good smoothing feature for WSD , which would make up for the problem of the sparseness of features , commonly associated with finer-grained senses .
The effectiveness of using supersenses for WSD has recently been shown by several researchers ( e.g. , , and ) .
The lists of supersenses are shown below .
- Noun supersense : act , animal , artifact , attribute , body , cognition , communication , event , feeling , food , group , location , motive , object , quantity , phenomenon , plant , possession , process , person , relation , shape , state , substance , time , Tops
- Verb supersense : body , change , cognition , communication , competition , consumption , contact , creation , emotion , perception , possession , social , stative , weather
Since data sparsity has been a significant issue in WSD , the sense frequency information is necessary in achieving a good performance .
In this section , we introduce two kinds of sense frequency information .
A sense ranking is the ranking of a sense of a word in the WordNet .
Since senses of a word are ordered according to frequency , the sense ranking acts as a useful feature that offers a preference for frequent senses .
It is also important as a back-off feature , which enables our model to output the first ( most frequent ) sense when no other features are active for that word .
The first sense classifier is known as a strong baseline in WSD , which can even be considered as a good alternative to WSD .
In our experiment , our first sense classifier achieved the accuracies 65 .3% for the Senseval-2 English all-words task data , and 63 .4% for the Senseval-3 English all-words task data .
Since the sense ranking in the WordNet is based on the word frequency in the SemCor , this baseline performs far better on the SemCor : 75 .9% for the brown1 section and 74 .3% for the brown2 section .
Alternatively , we can consider incorporating the first sense of each word as a feature .
Instead of uniformly predicting the distribution of sense frequencies according to their sense ranking , it can capture the conditional probability of each sense over the first sense .
When sufficient training data is available for every sense this method is considered to be a good feature that reflects the sense frequency information .
For such a reason , we use this first sense feature instead of the ranking feature , for the supersense-based evaluation .
For the unsupervised WSD , the use of sense dependencies has been a common method .
introduces an unsupervised graph-based algorithm , and shows a significant improvement over the sequence labeling model over the individual label assignment .
built a model based on various word semantic similarity measures , and graph centrality algorithms , which also used the graph structure that incorporates the word-sense dependencies .
Thus , the effectiveness of sense dependencies for unsupervised WSD has been shown by several researches .
On the contrary , the traditional approach to supervised WSD is to solve an independent classification problem for each word .
This approach has been developed along with research based on the lexical sample task in the Sensevals .
However , as described in Section 1 , this approach cannot handle the interdependencies among word senses , and may output a semantically inconsistent assignment of senses .
Recently , with the growing interest in the all-words task , a few supervised WSD systems have incorporated the sense dependencies .
SenseLearner and SuperSenseLearner incorporate sequential sense dependencies into the supervised WSD frameworks .
They no longer treat each word sense individually , assuming the sense dependencies between adjacent words .
also took a sequential tagging approach for the disambiguation of WordNet supersenses . [<-This sentence is a bit confusing]
The dependencies that they considered , however , are rather simple ones between the adjacent words , and between either WordNet synsets or supersenses .
Note additionally , that they do not mention the means or the quality of contribution in improving supervised WSD .
The exponential family model proposed by , captures the occurrences and co-occurrences of words and senses in a joint probability distribution .
Although they focused on the use of the co-occurrences of word senses rather than that of dependencies , they clarified the contribution of sense co-occurrences to the supervised WSD .
In this context , it is of interest to note whether the sense dependencies on a syntactic structure , rather than on a linear chain , works effectively or not .**[why ?]
To the extent of our knowledge , there exists no model that considers the interdependencies of word senses on a syntactic tree .
Furthermore , despite the approaches described above , the contribution of sense dependencies for the supervised WSD has not been explicitly examined thus far .
These questions are clarified by our research .
In Section 1 , we presented one of the most significant issues in WSD - the data sparsity problem .
This problem may even be magnified , when taking into consideration the interdependencies of word senses , since the number of features is roughly squared by the combination of two word senses .
In order to relieve this problem , we use the hierarchical information in the WordNet , including the superordinate words and supersenses , as described in Section 2 .1 and 2 .2 .
The use of hierarchical information has been motivated by several different researches .
For example , a WSD system by , ranked second in the Senseval-3 , consists of two models : the first model applied to words seen in the training data , and the second model performs a generalized disambiguation process for words unseen in the data , by using the hierarchical information in the WordNet .
The fine granularity of the WordNet synsets is not just a major obstacle in achieving a high-performance WSD , but is sometimes too fine-grained even for a human to disambiguate .
This is reflected in the low inter-annotator agreement of sense tagging ( typically around 70% ) , which implies that WSD models would be unlikely to perform better than the accuracy achieved .
Also , this fine-grained nature is reported to be inappropriate for many NLP applications .
For example , reported that coarse-grained sense distinctions are sufficient for several NLP applications .
In particular , the use of the supersenses has recently been investigated by , and has received much attention in the WSD field .
In this case , the inter-annotator agreements have reached nearly90% .
For this reason , we use the WordNet supersenses , as well as the synsets as our sense inventory .
In Section 3 , we described two problems in the WSD field .
One problem is the independent classification of each word 's sense , regardless of the sense dependencies among words .
The other problem is the scarcity of the training data that arose from the fine granularity of the sense distinction .
We address these problems by combining two methods .
The first [method ?] is the use of the syntactic dependencies of word senses on a dependency tree .
In particular , we assume that there are strong dependencies of word senses between a head and its dependents in the dependency tree , rather than between neighboring words in the sentence .
Even though some models so far have considered the dependencies between adjacent words , no one has focused on the syntactic dependencies of word senses .
Thus , to the extent of our knowledge , our model is the first WSD model that incorporates the sense dependencies based on a syntactic tree .
The second [method ?] combines various coarse-grained sense tag sets with the WordNet synsets .
This enables our model to work for unseen words in the training data , and is expected to relieve the data sparseness problem .
In our experiment , these tag sets are used in two ways .
One way directly uses them as the sense inventory , instead of as a finer sense inventory .
In our supersense-based model , we use the supersenses as the sense inventory , and each word sense is disambiguated at the granularity level of this tag set .
This method serves us many more training instances for each coarser sense , while we can no longer distinguish finer senses .
The other way uses them**[<-define " them " ] in combination with finer sense tag sets .
In our synset-based model , three coarse-grained label sets are incorporated in combination with the fine-grained WordNet synsets .
Although sense disambiguation is still based on the finer senses , the coarser sense tags will help the discrimination of the finer senses , thereby serving generalized information for each fine-grained sense .
This approach has been taken in several hierarchical WSD methods , but has never been combined with the sense dependencies in a way that have used them .
The process of WSD is summarized below .
At the beginning , we parse target sentences with a dependency parser , and compact the outputted trees in order to capture informative dependencies among words , as described in Section 4 .3 .
Then , the WSD task is regarded as a labeling task on the tree structures .
By using T-CRFs , we can model this as the maximization of the probability of word sense trees , given the scores for vertices and edges .
In the training phase , all vertex features and edge features are extracted using the gold-standard senses , and the weight vectors are optimized over the training data .
Finally , in the testing phase , all possible combinations of senses are evaluated for each sentence , and the most probable sense assignment is selected by evaluating the equation 3 .
Conditional Random Fields ( CRFs ) are graph-based probabilistic discriminative models proposed by .
CRFs are state-of-the-art methods for sequence labeling problems in many NLP tasks .
CRFs construct a conditional model / MATH from a set of paired observations and label sequences .
The conditional probability of a label sequence / MATH conditioned on a data sequence / MATH is given by / MATH	 , where / MATH and / MATH are the feature vectors for an edge and a vertex , / MATH and / MATH are the weight vectors , / MATH and / MATH are the set of components of / MATH associated with an edge / MATH and a vertex / MATH , and / MATH is the partition function that constrains the sum of all the probabilities to be 1 .
Tree-structured CRFs ( T-CRFs ) are different from widely used linear-chain CRFs , in that the random variables are organized in a tree structure ( acyclic graph ) .
Hence , we can consider them relevant in modeling the syntactic dependencies of word senses , which cannot be represented by linear structures .
In this model , the optimal label assignment / MATH for an observation sequence / MATH is then calculated by / MATH , where / MATH denotes a vertex corresponding to a word , while / MATH denotes the vertex corresponding to its parent in the dependency tree .
If we interpret / MATH as the vertex associated with the preceding word in a sentence , it delineates into a linear-chain CRF .
Although T-CRFs are relatively new models , they have already been applied to several NLP tasks , such as semantic role labeling and semantic annotation , proving to be useful in modeling the semantic structure of a text .
Our model is the first application of T-CRFs to WSD .
In this section , we introduce the method of building graph structures on which CRFs are constructed .
First , we describe how to construct a tree used in the tree-structured model .
Let us consider the synset-level disambiguation of the following sentence .
( i ) - The man destroys confidence in banks .
In the beginning , we parse this sentence with Sagae and Tsujii 's dependency parser , which outputs parsed trees in the CoNLL-X dependency format .
The left-hand side of Figure 2 shows the parsed tree for Sentence ( i ) , where each child-parent edge denotes a directed dependency of words , and the labels on the edges denote the dependency types .
This dependency tree describes dependencies among all words in a sentence , including content words and function words .
However , some of these dependencies are not informative for our WSD task , because our task does not focus on the disambiguation function words .
For example , on the right-hand side of Figure 2 , the dependencies among confidence-in-bank are split into the two dependencies confidence-in and in-bank ; hence our model cannot capture the direct dependency between confidence and bank .
One way to resolve this problem is to use higher-order ( semi-Markov ) dependencies , but this may drastically increase the computational cost .
Thus , for the synset-based model , we convert the outputted dependency tree into a tree of content words , as exemplified on the right-hand side of Figure 2 .
In this process , the function words are removed from the tree , and their parent and child vertices are directly connected with the dependency labels of the uppermost edge in the original tree .
Then , on the right-hand side of Figure 2 , the dependency between confidence and bank is now described as a direct edge .
By the compaction of the trees , therefore , our model can capture more useful dependencies among word senses .
For the supersense-based model , we further convert the tree into a tree of nouns and verbs , because supersenses are defined for only these two parts of speech .
The inclusion of removed words and dependency relation labels are performed in the same manner as in the synset-based model ; the tree on the right hand side of Figure 2 in this case remains unchanged , because the sentence does not contain any adjectives nor adverbs .
For the linear-chain models , parsing a sentence is unnecessary .
At first , we connect every adjacent words with an edge , and build a linear chain .
Next , as the same reason as for the tree-structured case , we remove those words that we do not need to disambiguate from the graph , in order to capture the direct dependencies between content words ( or nouns and verbs in the supersense-based model ) .
Thus , the process of the tree compaction[ ? ?] is performed in the same manner , as described in Figure 3 .
In this section , let us present an intuitive illustration of how our model works .
Here , we focus on three words : destroy , confidence , and bank in Sentence ( I ) . For simplicity , we consider only two major senses for each word as described in Table 3 , so that the number of possible sense assignments is / MATH .
After an appropriate compaction of the dependency tree , relationships among destroy , confidence , and bank , are represented as direct connections .
Now , our objective is to determine the correct assignment of senses to these words , given the trained weight vector for features .
We conduct this by evaluating the scores for all possible assignment of senses .
Let us start from the dependency between confidence and bank .
The first intuition would be that confidence( n )#2 is strongly related to a group or an institution ( financial bank ) , but is unrelated to a natural landscape ( river bank ) , while confidence( n )#1 depends mostly on persons and not on other entities .
Because bank does not have a " person " meaning , the weight of confidence( n )#2-bank( n )#1 is expected to be higher than for other possible sense bigrams .
A similar argument can be made for the dependency between destroy and confidence .
We can assume that destroy( v )#1 is usually associated with real objects , whereas destroy( v )#2 can take either a real entity or an abstract thing as its direct object .
Given confidence does not have an " object " meaning , the weights of destroy( v )#2-confidence( n )#1 and destroy( v )#2-confidence( n )#2 would be the largest [largest what ?] among others .
Finally , given all scores for these sense dependencies , we can evaluate the overall score for the sentence , and see / MATHdestroy( v )#2 , confidence( n )#2 , bank( n )#1 / MATH is the most probable assignment of senses .
Practically , specific bigrams of synsets such as confidence( n )#2-bank( n )#1 and destroy( v )#2-confidence( n )#2 may not appear in the training data .
In this case , sense bigrams combined with coarser sense labels work effectively .
For example , if there are synset bigrams such as destroy( v )#2-affection( n )#1 in the training data , the model can still perform the disambiguation process properly by considering a generalized synset-supersense bigram destroy( v )#2-noun .feeling .
The detailed description of sense bigrams are provided in Section 4 .7 .
Using the information in the WordNet , we make use of four sense labels for each word : a synset / MATH , two general synsets / MATH and / MATH , and a supersense / MATH , which we introduced in Section 2 .
These labels represent word senses at various levels , and are to be combined with the vertex and edge features .
We hereafter distinguish each sense label by putting one of the prefixes WS , G1 , G2 , and SS , as in WS :bank#1 and SS :noun .group .
The examples of these sense labels are shown in Table 4 .
In our model , we combine the synset and supersense labels with the vertex features , and all four sense labels with the edge features .
We denote the set of sense labels for vertex features by / MATH , and the one for edge features by / MATH .
Each of these sense labels is combined with the contextual information in the vertex features , whereas all possible combinations of two sense labels comprise the edge features .
We implement as vertex features a set of typical contextual features widely used in many supervised WSD models .
Most of these features are those used by with the exception of the syntactic features .
In order to see the efficiency of sense dependency features , we include as vertex features the word forms , lemmas , and parts of speech of both the parent and the child words in the dependency tree .
These features provide the syntactic information of the parent and child words , but are not semantically disambiguated .
Therefore , if the sense bigram features work effectively over these features , it clearly shows that there exist instances that cannot be disambiguated without considering the interdependency of word senses .
The list of vertex features also includes the information of both the preceding and following words , which in the linear-chain model plays the same role as the parent and child information in the tree-structured model .
Below is the list of contextual information used for the vertex features in the synset-based model .
We refer to these features as / MATH .
- Word form ( WF ) : word form as it appears in a text .
- Global context ( GC ) : bag-of-words within a 60-word window .
- Local PoS ( LP ) : / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , and / MATH , where / MATH in / MATH denotes the relative position to the target word .
- Local context ( LC ) : / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , / MATH , and / MATH , where / MATH denotes the word at the relative position / MATH , and / MATH the n-gram from the relative position / MATH to / MATH .
- Syntactic context ( SC ) : word forms , lemmas , and parts of speech of the parent and child words .
Using this contextual information , and the set of vertex labels / MATH , we construct a set of features on a vertex / MATH by / MATH .
Additionally , we include the sense ranking feature ( see Section 2 .3 for detail ) .
Note that this feature is not combined with any sense label nor with any contextual information .
For the supersense-based model , we use vertex features based on , which include some features from the named entity recognition literature , including the word shape features , along with the standard feature set for WSD .
As the sense frequency information , we use the first sense feature .
Unlike in the synset-based model , we do not incorporate the syntactic information of the parent and child words , since it has not been reported to improve the performance .
We design a set of edge features that represents the inter-word sense dependencies .
For each edge , we define the sense bigram features / MATH .
Moreover , in addition to these simple bigrams , we define two kinds of combined bigrams : the sense bigrams with dependency relation labels ( e.g. WS :confidence#2-( NMOD )-WS :bank#1 ) , and the sense bigrams with removed words in between ( e.g. WS :confidence#2-in-WS :bank#1 ) .
Consequently , the number of features for each edge is / MATH .
In this section , we introduce corpora that we have used for the evaluation .
SemCor is a corpus in which all content words are annotated with the WordNet synsets , and consists of balanced 352 files from the Brown Corpus .
It is divided into three parts : brown1 , brown2 , and brownv sections .
In brown1 and brown2 , all content words ( nouns , verbs , adjectives , and adverbs ) are semantically annotated , while in brownv only verbs are annotated .
Also , we use two data sets from the Senseval ( International Workshop on Evaluating Word Sense Disambiguation Systems ) exercises : the Senseval-2 English all-words task test set , consisting of three articles from the Wall Street Journal , and the Senseval-3 English all-words task test set , consisting of two articles from the Wall Street Journal and a fiction excerpt from the unannotated portion of the Brown corpus .
As the data sets for evaluation , we use the brown1 and brown2 sections ( denoted as SEM ) of SemCor , and the Senseval-2 and -3 all-words task test sets ( denoted as SE2 and SE3 , respectively ) .
We use the converted versions annotated with WordNet 2 .0 synsets .
These data sets are different from the originals because multi-word expressions are already segmented .
However , our model cannot output any answers to multi-word expressions that have no directly corresponding WordNet synsets , because we treat expression as one unit in the process of WSD .
For example , the multi-word expression tear-filled is treated as one instance , but are untagged with any WordNet synsets in the converted corpus , while in the original corpus it[define " it " ] is tagged with two WordNet synsets for tear and filled .
For this reason , we exclude such instances beforehand , and evaluate our models focused on expressions that have corresponding synsets in the WordNet .
The resulting statistics of the data sets are shown in Table 5 .
The evaluation of our model is performed by splitting these corpora into training , development , and test sets .
At first , all files in SEM are sorted according to their file names and distributed into five data sets in order ( denoted as SEM-A , SEM-B , SEM-C , SEM-D , and SEM-E ) , so that each set has almost the same distribution of domains .
Furthermore , each of these five data sets is again split into two sets : SEM-A1 , SEM-A2 , / MATH , SEM-E1 , and SEM-E2 , also according to the order of file names .
Our evaluation is based on a 5-fold cross validation scheme .
In the training phase , four sets ( e.g. SEM-A , SEM-B , SEM-C , SEM-D ) in the SEM are used for training .
Next , for the evaluation on SemCor , one half of the rest ( e.g. SEM-E1 ) is used for development and the other half ( e.g. SEM-E2 ) is used for evaluation .
For the evaluation on the Senseval data sets , all instances of the rest ( e.g. SEM-E ) are used for development , and one of the Senseval data sets ( SE2 or SE3 ) is used for evaluation .
Lastly , for the comparison with state-of-the-art models , our model is trained on the whole set of SEM , and SE2 and SE3 are used for development and evaluation respectively .
All sentences are parsed by the Sagae and Tsujii 's dependency parser , and the T-CRF model is trained by using Amis .
During the development phase , we tune the Gaussian parameter / MATH for the / MATH regularization term .
As the evaluation measure , we use the standard recall measure , which is equivalent to the precision as we output answers to all instances . **[This section is a bit monotonous]
The synset-based evaluation is performed based on the WordNet synsets .
We evaluate the outputs of our system for all instances that are semantically tagged in the data sets .
Each target word is either a noun , verb , adjective , or adverb .
For the supersense-based evaluation , we follow most of the experimental setup in .
As noted , in the WordNet , the labeling of supersensesis semantically inconsistent , and top level synsets are tagged as the supersense noun .Tops[ ? ?] rather than the specific supersense they govern .
For example , nouns such as peach and plum are tagged as noun .plant but their hypernym plant itself belongs to noun .Tops .
For this reason , we adopted the modification of noun supersenses in the same way as , substituting noun .Tops labels with more specific supersense labels when possible , and left some general nouns with noun .TopsoteNouns , which are left with noun .Tops are : entity , thing , anything , something , nothing , object , living thing , organism , benthos , heterotroph , life , and biont . .
The evaluation is based on these modified labels .
We ignore the adjective and adverb instances in the evaluation .**[This section is a bit confusing . Maybe break up the longer sentences to clarify]
Table 6 is the list of models that we use for the evaluation , where FS and SR correspond to the first sense and sense ranking features respectively , and non-dependency denotes models that do not incorporate sense dependency features ( i.e.
only the vertex features ) .
In this section , we focus on the contribution of the sense dependencies .
Table 7 shows the comparisons between the tree-structured models with sense dependencies ( dependency models ) and the models without sense dependencies ( non-dependency models ) .
Each figure displays the mean recall ( equivalent to the precisions ) averaged over the five trials of the cross validation , the " Diff . " rows show the differences between the dependency models and the non-dependency models , and / MATH and / MATH denote the statistical significance of / MATH and / MATH respectively .
From Table 7 , it can be seen that with the sense frequency information , the tree-structured models ( statistically ) significantly outperformed the non-dependency models on all the data sets .
These improvements seem insignificant in figures ; however , considering that for instance the No-Dep-SS-FS model outperforms the Baseline-SS-FS model by only 0 .37% on SEM , the further improvement of 0 .21% is substantial , because it indicates that our dependency model could handle 57% more instances over the first sense baseline .
Note that , without the sense frequency information , the synset-based tree-structured model ( Tree-WS ) performed worse than the non-dependency model ( NoDep-WS ) on all the data sets , whereas the supersense-based model ( Tree-SS ) exhibited the robustness [of ...] regardless of the existence of the sense frequency information .
These results suggest that for the synset-based model , in which most synsets do not have enough instances in the training data , the combination with sense-frequency information is necessary in order to avoid the data sparseness problem .
Similarly , Table 8 shows the comparisons between the linear-chain dependency models and the non-dependency models .
In the supersense-based evaluation , although the differences are slightly smaller than in the tree-structured models , we confirmed that the sense dependencies with the first sense features work effectively , with the overall improvements of 0 .29% , 0 .20% , and 0 .30% for the three data sets .
However , without the first sense features , no statistically significant improvement nor deterioration is observed .
In the synset-based evaluation , the overall trend is almost same as in the tree-structured case .
Nonetheless , by the incorporation of the sense dependencies , the improvements with the sense ranking features was even less , and the deteriorations without them[define " them " ] were even more than in the tree-structured case .
These results seem to suggest that the sense dependencies on the tree structures are more robust than those on the linear chains .
In this section , let us focus on the difference between the tree-structured models and the linear-chain models .
In the results shown in Table 9 , although some of the differences are marginal , we can see that the tree-structured models outperformed the linear-chain models , focusing on the statistically significant differences .**[<-This is a confusing sentence]
Thus , although both the dependency trees and the linear chains capture useful dependencies of word senses , the dependencies on the tree structures capture more important information .
Table 10 shows the contributions of the coarse-grained labels .
Whereas Tree-WS-SR and Tree-WS use all four sense labels for the edge features ( / MATH ) , Tree-WS-SR' and Tree-WS' only use the synset labels ( / MATH ) . Thus , we can see the contribution of the coarse-grained sense labels .
Although the improvements are marginal , we can see that the coarse-grained sense labels consistently did improve the performance on all the data sets , relieving the data sparseness problem .
Since synset-based models can directly be used as supersense taggers by a simple conversion of senses , we compared the performance of the synset-based model with that of the supersense-based model .
Interestingly , when evaluated at the supersense level , the synset-based models considerably outperformed the supersense-based models , with an overall improvements of 0 .69% with the sense frequency information and 1 .41% without it , as shown in Table fcomp-ws-ss-tree .
Thus , even though the granularity of the supersenses is sufficient for many NLP tasks , they are too coarse-grained to capture enough information for WSD models ; therefore , for the supersense-based disambiguation , we can improve the performance by considering finer-grained senses .
Table 12 shows the comparison of our model with the state-of-the-art WSD systems .
The evaluation here is performed with the Senseval official scorer .
Our model Tree-WS-SR outperformed the two best systems in the Senseval-3 ( Gambl and SenseLearner ) , but lagged behind PNNL by 1 .6% .
However , taking into consideration that all systems in Table 12 except for Simil-Prime utilize other sense-annotated corpora in addition to SemCor , such as the Senseval data sets or example sentences in the WordNet , and that our model cannot handle multi-word expressions that do not exist in the WordNet as noted in Section 5 .1 , we can conclude that the performance of our T-CRF model is comparable to that of state-of-the-art WSD systems . **[This is a long sentence- shorten .]
Table 13 shows the list of the 15 largest-weighted sense dependency features in the tree-structured , synset-based model ( Tree-WS ) .
The list includes features associated with verb-noun relations ( e.g. SS :verb .consumption-SS :noun .food ) and noun-noun relations ( e.g. SS :noun .communication-SS :noun .communication ) , which we will describe in detail with several examples .
Hereinafter , / MATH denotes / MATH in Equation 3 , and / MATH denotes the exponential of / MATH .
We call a feature either with a positive lambda or with an alpha larger than 1 as an excitatory feature , and those features with either with a negative lambda or an alpha smaller than 1 as an inhibitory feature .
Also , Table 14 shows the 15 largest-weighted sense dependency features in the linear-chain , synset-based model .
When compared to the outputs of the tree-structured model , we can see that the linear-chain model captures more successive noun-noun dependencies , while the tree-structured model captures more adjective-noun and verb-object dependencies .
Thus , although the difference of the recalls is small , we can assume that the sense dependency features in the tree-structured model , and those in the linear-chain model have different contributions to the results .
The simultaneous use of both is of an interest from practical and semantical perspectives ; however , since it makes our model no longer a tree , the implementation is not straightforward .
Hence , this is left as one of our future works .
In this section , we present an instance-based analyses based on the first 100 instances for which the answer of the dependency model Tree-WS-SR differs from that of the non-dependency model NoDep-WS-SR in the first trial on SemCor .
We extracted only the largest-weighted edge feature for each instance , assuming that this feature had the largest contribution to the result .
These instances consist of 54 positive instances , for which Tree-WS-SR output the correct answer while NoDep-WS-SR did not , and 46 negative instances , for which Tree-WS-SR did not output the correct answer while NoDep-WS-SR did .
Table 15 and 16 show the count of each edge type for these instances .
For both positive and negative instances , the verb-noun dependencies are the dominant dependencies , corresponding to 48% of all the instances .
One noteworthy point is that more number of noun-noun dependencies are found in the positive instances than in the negative instances , further suggesting that noun-noun dependencies are particularly likely to capture useful dependencies and contribute to positive instances .
First of all , let us present two instances in which the verb-noun dependencies worked effectively .
The first sentence is :
From this earth , then , while it was still virgin God took dust and fashioned the man , the beginning of humanity .
Surprisingly , the verb take has as many as 42 senses in the WordNet .
But fortunately , the first six senses belong to different supersenses , and our dependency model succeeded in outputting the correct sense take#4 ( SS :verb .contact , take physically ) by making use of the strong dependency SS :verb .contact-SS :noun .substance ( / MATH ) , given dust#1 belongs to noun .substance .
The second instance is also a positive instance from the SEM-A data set .
For a serious young man who plays golf with a serious intensity , Palmer has such an inherent sense of humor that it relieves the strain and keeps his nerves from jangling like banjo strings .
Here , has is an ambiguous verb that has 19 senses in the WordNet .
The correct sense here is have( v )#2 ( SS :verb .stative , have as a feature ) .
Given sense of humor#1 belongs to the supersense noun .attribute , the correct sense was output by the strong verb-object dependency G1 :have( v )#2-( OBJ )-SS :noun .attribute ( / MATH ) .
While this verb-object dependency had a large excitatory weight , the corresponding verb-subject dependency had an inhibitory weight ( G1 :have( v )#2-( SBJ )-SS :noun .attribute ( / MATH ) ) , which indicates that the dependency relationlabel also contributed to the result .
Note also that this long dependency cannot be described by linear-chain models .
Next , let us show a typical negative example , where a verb-subject dependency worked inappropriately .
The repeated efforts in Christian history to describe death as altogether the consequence of human sin show that these two aspects of death cannot be separated .
The correct sense for show here is show#2 ( verb .cognition , establish the validity ) , but the model output show#3 ( verb .communication , prove evidence for ) affected by the long dependency WS :testify( v )#2-( SBJ )-SS :noun .act ( / MATH ) between efforts and show .
This subject information seems to be inadequate for the disambiguation of show .
Next we focus on the noun-noun dependencies .
The first example is a negative instance .
Philadelphia permitted him to seek a better connection after he had refused to reconsider his decision to end his career as a player .
The noun career has two meanings : the particular occupation for which you are trained ( career#1 ) and the general progression of your working or professional life ( career#2 ) .
From the phrase career as a player , we can assume that the correct sense of career can be either of two senses , with the possibility that there is a preference for career#2 , as captured by the largest-weighted dependency WS :career%1%2-( NMOD )-SS :noun .person ( / MATH ) between career and player .
Although there was originally the preference for the correct sense career#1 by the sense frequency features , the noun-noun dependency thus contributed to the wrong answer career#2 .
The determining clue for this instance seems to be the verb-object dependency end-career , which was not captured by our model .
Among the ten positive instances of the noun-noun dependencies , four instances were contributed by the noun-of-noun dependencies .
Since dependencies of this type were not observed in the negative instances , they seem to particularly contribute to the positive instances .
Let us consider the following example .
The embarrassment of these theories over the naturalness of death is an illustration of the thesis that death cannot be only a punishment , for some termination seems necessary in a life that is lived within the natural order of time and change .
Although the correct sense time#5 ( noun .Tops , the continuum of experience in which events pass from the future through the present to the past ) is not a frequent sense , our model correctly output the correct sense by using the dependency SS :noun .object-of-WS :time%1%5 ( / MATH ) , given natural order#1 belongs to the supersense noun .object .
Through our result , we observed that the noun-noun dependencies in coordination relations work remarkably well .
In the following sentence , three words nails , levels , and T squares are in a coordination relation .
He also bought a huge square of pegboard for hanging up his tools , and lumber for his workbench , sandpaper and glue and assorted nails , levels and T squares and plumb lines and several gadgets that he had no idea how touse or what they were for .
Here , the correct sense for nail is nail#2 ( noun .artifact , a thin pointed piece of metal ) , and that for level is level#5 ( noun .artifact , indicator of the horizontal ) .
The relatively low frequency of these senses prevent our model from outputting the correct senses in an ordinal way .
However , the dependency model could capture the fact that two words in a coordination relation are quite likely to belong to the same semantic group ( SS :noun .artifact-( COORD )-SS :noun .artifact ( / MATH ) ) , and hence succeeded in the correct disambiguation of these three words .
More generally , we have observed that the coordination features for an edge that connects the same supersense all have positive weights .
In this paper , we proposed a novel approach for the all-words WSD , focusing on the use of syntactic dependencies of word senses , and investigated the contribution of these dependencies to WSD .
Our proposals were twofold : to apply tree-structured CRFs to the dependency trees , and to use the combined bigrams of fine- and coarse-grained senses as edge features .
In our experiments , the sense dependency features were shown to work effectively for WSD , with a 0 .29% , 0 .64% , and 0 .30% improvement of recalls for SemCor , Senseval-2 , and Senseval-3 data sets , respectively .
Despite the small improvements in overall figures , these improvements indeed correspond to 25%-57% improvements over the first sense baseline .
The dependency tree structures were shown to be appropriate in modeling the dependencies of word senses , because the results of the tree-structured models outperformed the [results of ?] linear-chain models .
In the analysis section , we presented an in-depth analysis of the observed instances , and observed that the noun-noun dependencies particularly contribute to the positive instances .
In addition , the combination of coarse-grained tag sets with the sense dependency features were proved to be effective .
However , our experiments showed that even when combined with the coarse-grained tag sets , the sense dependency features do not improve the performance , unless combined with proper sense frequency information . This is due to the data sparseness problem .
The supersense-based WSD models , on the contrary , exhibited the robustness [of ...] regardless of the existence of the sense frequency information , while they are defeated by the synset-based models in recalls .
These results show the importance of fine-grained and coarse-grained sense information , and show that the combination of both enables us to build a more precise and robust WSD system .
The performance of our tree-structured model was comparable to that of the state-of-the-art WSD systems .
Although our model was based on a simple framework , and was trained only on the SemCor corpus , the results that we gained were promising . They suggested that our model still has a great potential for improvement .
Our next interest is to combine our framework with the recently-developed semi-supervised frameworks .
The combination of the local and syntactic dependencies with the global information is expected to further the WSD research .
Generating short summary videos for rushes is a challenging task due to the difficulty in eliminating redundancy and determining the important objects and events to be placed in the summary .
Redundancy elimination is difficult since repetitive segments , which are takes of the same scene , usually have different lengths and motion patterns .
This makes approaches using one keyframe for a shot representation fail when trying to form a cluster .
In addition , even repetitive segments can be precisely determined , but the summary generated by concatenating together the selected segments still takes longer than the upper limit .
It is questionable to select a sub-segment so that it conveys information of the scene as much as possible .
,We introduce two approaches to solve these problems .
In the first approach , one keyframe is used for representing a shot when forming a cluster; and sub-segments are selected using the motion information for generating the summary .
Meanwhile , in the second approach , all the frames of a given shot are used for clustering; and a simple skimming method is used to select the sub-segments .
The experimental results on the TRECVID 2008 dataset and a comparison between the two approaches are also reported .
With the availability of multimedia databases growing at an exponential rate , users are increasingly requiring assistance in accessing digital video contents .
Video summarization significantly helps to meet this need by developing a condensed version of a full length digital video using only the most important contents \CITE .
Summary videos can help users more efficiently and effectively browse and navigate through large video archives .
Generating summary videos for BBC rushes \CITE is a challenging task due to the difficulty with redundancy elimination and determining the most important objects and events to be placed in the summary .
Since the length of the summary is limited to 2\% duration of the original video , there is a trade-off between the recall and usability ( e.g. user friendly through smooth presentation , / being easy to understand ) .
High recall , i.e. many objects and events ( called scenes ) included in the summary , usually reduces the number of frames for each scene .
For example , the maximum duration for a summary of a 30 minute video is 36 seconds ( \MATH ) .
If the summary consists of 20 scenes , the average duration for each scene is 1.8 seconds .
For an event such as " `Woman attacks man on bench on left and runs off with large bag .
" ', with this length constraint , it would be difficult to present it in a pleasant tempo and rhythm .
On the other hand , a smooth presentation of these events would consume a large number of frames , which would decrease the recall .
In general , generating summary videos consists of the following steps :
Video segmentation : This step breaks down the original video into segments , such as shots or sub-shots .
Each segment should be aligned so that it is a part of a scene .
Redundancy elimination : This step groups the segments that belong to the same take into clusters .
Only one representative segment is used for the final summary video .
The others are discarded .
Junk elimination : This step removes the color bars , clapboards , and the all black or all white frames that are unnecessary in the final summary video .
Summary generation : This step selects the frames from the representative segments of clusters and concatenates them to form the final summary video .
While the steps for video segmentation and junk elimination are easy to handle , the steps for redundancy elimination and summary generation are difficult .
For example , as for redundancy elimination , the question is how to represent a segment in a feature vector and how to compute the similarity between two segments having different lengths and motion patterns .
In the other case , assuming that we have selected the appropriate segments , the total length of these segments is usually larger than that of the final summary .
The question is how to determine the most important parts of the selected segments so that they convey as much of the information of the scene as possible .
In this paper , we present two approaches for handling these difficult steps .
The first approach represents each segment by using one key-frame and groups similar segments by clustering them on these key-frames .
Then the portion of each segment that has the highest motion is included in the final summary .
Meanwhile , the second approach uses another strategy for redundancy elimination .
Specifically , for each segment , a set of frames are extracted by sampling at a certain time interval ( e.g. 5 frames ) .
The clustering process is performed on the frames of all the segments .
Then , segments that share a large enough number of frames with respect to their size are merged into one cluster .
In order to generate the final summary , with each representative segment , the middle part is selected with a skim rate of 2 frames .
This paper is organized as follows : section \REF introduces the details of the first approach; , while section \REF presents the details of the second approach .
Section \REF describes our experimental results on the TRECVID 2008 dataset .
Finally , section \REF and section \REF conclude the paper .
By definition , all rushes are unedited; therefore they must consist of hard cuts only .
The shot boundary detection algorithm in \CITE is used to determine the shot boundary and to partition the input video into shots .
A local color histogram is extracted by dividing a video frame into \MATH blocks .
The \MATH distance is used to compute the distance between each block of frames \MATH and \MATH .
Next , these values are sorted into ascending order .
The sum of the middle eight of these 16 values is used to define the cut between frames \MATH and \MATH if these values exceed the threshold \MATH .
However , this algorithm cannot distinguish between hard cuts and the motion of large objects .
To overcome this problem , motion-based features are computed for each video frame using the Lucas-Kanade point-based tracking functions provided in the OpenCV toolkit\footnote{http : //opencvlibrary.sourceforge.net / } .
The magnitude is computed from the motion vector for each frame .
Therefore , if the algorithm detected a cut between frames \MATH and \MATH , whose magnitude is larger than the threshold \MATH , these cuts are rejected since they are the motions of large objects .
Finally , short shots of less than 25 frames ( 1 second ) are removed .
The sub-shot segmentation algorithm in \CITE is used to divide shots into smaller units .
The first frame of the shot is chosen as the base frame \MATH and the next frame \MATH for a comparison .
The \MATH distance used to compute the distance of the frame sequence until the sum of the sorted value of the lower eight is larger than the threshold \MATH . //[distance / length?]
The frames from \MATH to \MATH , then , form a sub-shot and frame \MATH is used as the next base frame .
Finally , the short sub-shots of less than 25 frames are removed .
We use the keyframe extraction algorithm proposed in \CITE to extract the representative keyframes from each sub-shot .
In this approach , the cosine distance is used to measure the difference between neighboring frames in each sub-shot .
Keyframes are selected at the midpoints between two consecutive high curvature points where the high curvature points are detected from the curve of the cumulative frame difference .
The characteristics of color bars are vertically averaged , and the color histograms for each block in the same column should be similar .
We used the algorithm proposed in \CITE by using the \MATH distance to compute the histogram differences between any two neighboring blocks in each column .
Next , we sort these values into ascending order .
If the value of the \MATH is smaller than the threshold \MATH , then these sub-shots are defined as a color bar sub-shot .
From the properties of a single color image , the dominant color in its global histogram is large .
If the value of the \MATH of the global color histogram is larger than the threshold \MATH , then these sub-shots are defined as a single color sub-shot .
In rushes videos , there are many types of clapper boards , but the same type of clapper board is often used in the same movie .
There are many types of clapper boards , such as scale , rotation , and illumination changes .
The NDK algorithm , proposed in \CITE , is invariant to image scaling , translation , rotation , illumination changes , and affine or 3D projection .
A set of 80 example keyframes of clapper boards were extracted from the development set and is used as a set of queries .
Next , we extract the keypoints of the keyframes given from section \REF and match them with the query .
If the result of the NDK algorithm returns a match from a keyframe with a query then the sub-shot is defined as a clapper board sub-shot .
The unused keyframes containing story units for the generated video summary are removed .
However , rushes videos containing a repetitive story , such as a retake of scenes , are unedited .
To efficiently create rushes videos , the repetitive contents must be eliminated .
Generally , a group of continuous contents often share some properties .
With this characteristic in mind , a clustering technique can be used to separate the data into groups of similar contents .
Each group , called a cluster , consists of contents that are similar between themselves and dissimilar to the contents of other groups .
GreedyRSC , proposed in \CITE , is used to find clusters at high precision and the number of clusters is automatically determined .
To do clustering on keyframes , three different features , including the mean , variance , and skew , are extracted from the local color histogram .
These values are used to represent the keyframes content and are defined as follows :
Figure \REF shows an example of a clustering result .
So far , we have completely removed the unused contents from rushes videos and reduced any repetition of the story contents .
The objective of rushes summarization at TRECVID 2008 is to generate short summaries ( the upper limit of the duration of a summary is 2\% of the original video ) , less repetitive content , and must have as many objects and events as possible .
To reach this objective , only the most important keyframes should be selected to generate a summary video .
To generate a summary , we first compute its maximum duration in seconds \MATH ,
where \MATH is the maximum duration for the summary .
Second , we compute the quota length for each cluster based on the cluster size \MATH .
Third , merge the consecutive sub-shots in each cluster into shots and compute the priority of each shot based on the priority of the shot weighted duration and shot weighted average motion magnitude using the following equation : \MATH</p>
Next , these \MATH values are sorted into descending order and the first shot is selected .
Fourth , sub-shots in the selected shot in descending order are sorted based on the average motion magnitude .
The sub-shots are selected from top to bottom until the quota length for that shot is reached .
Fifth , for each selected sub-shot , 25 frames ( 1 second ) around the middle are extracted to generate the final summary .
This system has some modifications from the system developed for the same task last year \CITE .
Specifically , the original video is broken down into segments , which are shots with a hard cut transition .
These segments are further broken down into fragments so that each fragment represents a portion of a scene .
In order to reduce the computation time , we only extract a subset of the frames from the original video by sampling it at a five frame interval ( i.e. extract frames 0 , 5th , 10th , and so on ) .
For each frame , we use grid color moments with the same configuration as in \CITE for feature representation .
The segment boundary , which is located at the hard cut transition , is determined by using a loose threshold on the Euclidean distance between two consecutive frames .
Meanwhile , the fragment boundary is determined by using a strict threshold to detect any dramatic motion .
Instead of selecting one keyframe to represent one fragment as many other systems do , we use all the frames of each fragment for the redundancy elimination .
We use GreedyRSC \CITE to do the clustering on the set of all the sampled frames extracted from the original video .
The number of clusters is determined automatically using this method .
Frames that belong to the same cluster are assigned the same label .
By this discretization process , we can cast one fragment as one string whose characters are the labels of its frames .
We compute the similarity between two fragments by counting the number of shared characters between two strings and being normalized to the size of each string .
If this value is larger than the threshold , these two segments are merged into one cluster .
We found that this approach is more effective than the approach using one keyframe for one fragment since the more keyframes that are used , the more information is available to make the right decision .
We select junk frames such as color bar frames , and single color ( black or white ) frames to form the reference junk frame set .
To check whether a fragment is junk , we compare the frames of this fragment to the frames of the reference junk frame set .
The similarity between two frames is the Euclidean distance between two grid color moment feature vectors .
We empirically select the thresholds for each type of junk .
If the similarity between one frame in the input fragment and one frame in the reference junk frame set is lower than the predefined thresholds, the input fragment is considered junk and all the fragments of the cluster containing the junk fragment are eliminated .
In our system, we only check the fragments that are located at the two ends of the original video for reducing the computation time .
However, by using the clustering result, junk fragments that are not checked against the reference junk frame set are also removed .
For each cluster, we merge adjacent fragments into longer fragments and select the longest fragment as the representative fragment to be included in the final summary .
Since the length of these fragments is still larger than the maximum length of the final summary, we use the following simple strategy to shrink these fragments .
First, we assign a quota, which is the maximum duration, for each fragment by dividing the maximum duration for the summary to the number of clusters .
Second, for each fragment, we extract the portion that is expanded from the central part of the fragment .
This portion covers a duration twice the size of the fragment quota by selecting the frames with a sampling rate of two frames .
Specifically, we select frames \MATH, \MATH, ..., \MATH, \MATH, ..., \MATH, \MATH, where \MATH is the middle frame of the fragment, and \MATH is half the number of frames computed from the quota\MATH and the frame rate ( 25fps ) \MATH :
We have tested our approaches on 40 videos from the TRECVID 2008 test set .
Table \REF presents a comparison between these approaches for the measures used in evaluation of this task \CITE .
The NII-2system achieves a higher recall ( IN ) than the NII-1 system because NII-1 only uses one keyframe for each sub-shot and has a shorter duration ( DU ) for summary videos .
However, NII-1 has better quality .
The summary videos generated by NII-1 have less duplication ( RE ), are presented in a smoother way ( TE ), and are easy to judge for inclusions ( TT ) .
In terms of efficiency, NII-2 is much better .
The clapper board detection process using NDK consumes around half of the processing time of NII-1, but its performance is low due to the large variations in clapper boards in the videos ( see Figure \REF ) .
The comparable performance in the junk elimination of both systems suggests that simpler methods are more favorable .
In addition, by using simple features and sampling frames in the original video, NII-2 significantly increases the processing time ( computed from the time the input video is taken to the time the summary video is picked ) to quasi real-time .
Practical summarization systems usually have a good balance between the fraction of inclusions and user-friendliness .
In Table \REF, we present the performance of such systems .
The 14 systems listed in this table have an IN score that is above the median ( 0.45 ); and other scores, such as RE and TE, are larger than half of the maximum score ( 2.5 ) .
Compared to the other systems listed in this table, our NII-2system is one of the fastest .
Compared to the other systems participating in this task of TRECVID 2008, NII-1 performed better in such measures as DU and TT ( see Figure \REF and Figure \REF; while NII-2 performs well in the IN measure ( see Figure \REF ) .
One of the most difficult steps is redundancy elimination .
The lack of discriminative representation of the segments and robust clustering methods is the main reason \CITE .
Two typical cases that usually happen in clustering results are fragmentation and outliers .
Fragmentation is where samples of one cluster are put into several different clusters .
Outliers are irrelevant and noisy samples in one cluster due to the poor determination of the cluster boundary .
Therefore, it is necessary to develop robust methods for detecting repetitive segments .
Using all the frames of one segment instead of using one keyframe as proposed in NII-2 is one of the current efforts being made towards this end .
Although the results are not as high as expected, we still believe that this approach is promising .
We have presented two different approaches for generating a short summary for rushes videos .
In the first approach, NII-1, clustering the set of keyframes extracted from the sub-shots helps to eliminate redundancy .
With each representative segment of each cluster, the portion with the highest degree of motion is selected to form the summary .
This approach has a good usability score but is not very good at recall .
In the second approach, NII-2, all the frames of each sub-shot are used to compute the similarity among the sub-shots in the clustering process .
With each representative segment of each cluster, the middle part is selected to form the summary with a skipping rate of two frames .
This approach is good for recall and has a reasonably good usability score .
Compared to other systems participating in the TRECVID 2008 summarization task, NII-2 is among the best systems with a good balance between recall and usability .
Face Retrieval Improvement by the Learning of Visual Consistency
Searching for images of people is one of the essential tasks required by users for image and video search engines .
However , the current search engines have limited capabilities for this task since they usually rely on texts associated with image and video , which are likely to return many irrelevant results .
We propose a method to effectively retrieve relevant faces for one person by learning visual consistency from results retrieved from text correlation based search engines .
This problem is challenging because ( i ) there is no label provided making it difficult to use supervised-based ranking methods .
( ii ) current face recognition techniques are still immature with wild-face databases even with supervised learning methods .
In the proposed method , we treat this problem as a classification problem in which input faces are classified as 'person-X' ( the queried person ) or 'non-person-X' , and the faces are ranked based on their relevant score inferred from the classifier 's probability output .
To train this classifier , we use a bagging-based framework to combine results from multiple weak classifiers , which are trained using different subsets .
These training subsets are extracted and labeled automatically from the rank list produced from the classifier trained from the previous step .
In addition , outlier detection methods are used to produce the rank list for initialization .
Experimental results on various face sets retrieved from the captions of news photos show that the retrieval performance improved after each iteration with the final performance outperforming the baseline algorithms .
With the rapid growth of digital technology , large image and video databases are more available than ever to users .
Therefore , effective and efficient tools are needed for indexing and retrieving based on visual contents .
A typical example for this application is searching for a specific person by providing his or her name .
Usually , most current search engines use the texts associated with images or videos as significant clues for returning results .
However , other un-queried faces and names appear simultaneously and are aligned ( as shown in Figure \REF ) , which significantly lowers retrieval performance .
Therefore , it is necessary to improve the retrieval performance by taking into account the visual information from the retrieved faces .
This problem is challenging due to the following reasons :
-Large variations in face appearance due to pose changes , illumination conditions , occlusions , and facial expressions make face recognition difficult even with state of the art techniques \CITE .
-The fact the retrieved face set consists of faces of several people with no label makes supervised learning methods as well as unsupervised learning methods such as , \MATH -means , inapplicable .
We propose a method to solve the above-mentioned problem .
The main idea is to assume that there is visual consistency among the results returned from current text-based search engines .
This method consists of two stages .
In the first stage , we explore local density of faces to identify potential candidates for relevant faces .
This stage is based on the observation that facial images of the queried person tend to form dense clusters while irrelevant facial images are sparse since they look different from each other .
We use an outlier detection method for this purpose .
The output is a rank list in which faces with larger number of neighbors within a certain distance are considered as relevant and are therefore put at the top of the list . //[What do you mean by �gneighbors�h ? Do you mean the un-queried faces ? ]
Since the above ranking method is based on the number of neighbors , it is sensitive to the specified distance .
A second stage is necessary to improve this rank list .
We model this problem as a classification problem in which input faces are classified as person-X ( the queried person ) or non-person-X ( the irrelevant person ) .
The faces are ranked based on their relevancy score that is inferred from the classifier 's probability output .
Since annotation data is not available , the rank list from the previous step is used to assign labels for a subset of faces .
This subset then is used to train a classifier using supervised methods such as support vector machines ( SVM ) .
The trained classifier is used to re-rank faces in the original input set .
This step is repeated a number of times to get the final rank list .
Since automatically assigning labels from the rank list is not reliable , the trained classifiers are weak .
In order to get the final strong classifier , we use the idea of ensemble learning \CITE in which weak classifiers trained on different subsets are combined to improve the stability and classification accuracy of single classifiers .
This stage is effective for improving the rank list for the following reasons :
-Supervised learning methods such , as SVMs , provide a strong theoretical background in finding optimal decision boundary even with existence of noisy data .
Furthermore , recent studies suggest that \CITE SVM classifiers provide probability outputs that are suitable for ranking .
-Bagging framework helps to leverage noises in the unsupervised labeling process .
Our contribution is two-fold :
-We propose a general framework to boost the face retrieval performance from results retrieved from text correlation-based search engines by the learning of visual consistency .
It seamlessly integrates current data mining methods such as outlier detection , supervised learning , and unsupervised learning based on bagging for a practical problem . //[What or who is �glearning�h visual consistency ? Are the search engines learning ? ]
Our framework requires few parameters and works stably .
-We demonstrate the feasibility of using tolerance of supervised learning methods when working with noisy datasets combined with ensemble learning to improve the final performance .
There are several more proposed approaches for general object classification than for those for face retrieval .
For example , as described in \CITE , objects are retrieved by an image search engine and then are re-ranked by the learning of visual consistencies from the retrieved objects .
Compared to the problem of face-based recognition , the problem of object classification is easier since classification of different object types such as airplane and non-airplane only needs to handle inter-variations between different categories , while discriminating between person-A and person-B requires handling of both intra-variations and inter-variations of the same category .
Furthermore , in order to work in unsupervised mode , these approaches need a method to collect negative samples ( e.g. non-airplane ) , which are inapplicable to our problem .
A graph-based approach was proposed by \CITE , in which a graph is formed by faces as nodes , and the weights of edges linked between nodes are the similarity of faces , is closely related to our problem .
Assuming that the number of faces of the queried person is larger than that of others and that these faces tend to form the most similar subset among the set of retrieved faces , this problem is considered equal to the problem of finding the densest subgraph of a full graph with an available solution . //[Do graphs have solutions ? They just provide information .]
Although , experimental results showed the effectiveness of this method , it is still questionable whether the densest subgraph intuitively describes most of relevant faces of the queried person .
Furthermore , choosing an optimal threshold to convert the initial graph into a binary graph is difficult and rather ad hoc due to dimensionality .
In another work \CITE , a clustering-based approach was proposed for associating names and faces in news photos .
To solve the problem of ambiguity between several names and one face , a modified \MATH -means clustering process was used in which faces are assigned to the closest cluster ( each cluster corresponding to one name ) after a number of iterations .
Although the result was impressive , it is not easy to apply it to our problem since a large number of irrelevant faces ( more than 12% ) are eliminated manually before performing clustering .
This paper is organized as follows : Section \REF introduces our proposed framework .
Section \REF briefly introduces typical outlier detection methods .
Experiments and results are described in section \REF .
Finally , section \REF concludes the paper .
Given a set of faces returned by any text-based correlation search engine , our method is used to perform a ranking process summarized as follows :
-Step 1 : Detect eye positions , and then perform face normalizations .
-Step 2 : Compute an eigenface space and project the input faces into this subspace .
-Step 3 : Estimate ranks of faces using an outlier detection method mentioned in \REF .
-Step 4 : Train an ensemble classifier \MATH using this rank list by Bag-Rank-SVM .
-Step 5 : Use the classifier \MATH to estimate the probability of faces in the original set .
Rank these faces using their probability scores .
-Step 6 : Repeat steps 4 and 5 $T$ times and return ranked faces produced by the last classifier \MATH to users .
Steps 1 and 2 are typical for any face processing system and described in detail in \REF .
Step 3 used to find initial ranks for faces described in \REF .
We used a simple outlier detection method for this step .
The Bag-Rank-SVM algorithm is described as follows :
-Step 1 : Select a set \MATH including \MATH top ranked faces and then randomly select a subset \MATH from \MATH .
Label faces in \MATH as positive samples .
-Step 2 : Select a set \MATH including \MATH bottom ranked faces and then randomly select a subset \MATH from \MATH .
Label faces in \MATH as negative samples .
-Step 3 : Use \MATH and \MATH to train a weak classifier \MATH using LibSVM \CITE with probability outputs .
-Step 4 : Repeat steps Step 1 to Step 3 \MATH times .
-Step 5 : Return \MATH .
Since it is not guaranteed that the top \MATH and bottom \MATH of faces in the rank list correctly correspond to the faces of the queried person-\MATH and faces of non person-\MATH as shown in Figure \REF , randomly selecting subsets to train weak classifiers , and then combining these classifiers might help reduce the risk of using noisy training sets .
In our framework , outlier detection methods are used to initialize the rank list that is then used to label a subset of samples for training SVM classifiers .
We introduce two common outlier detection methods , distance-based outlier detection ( DBO ) \CITE and local outlier factor-based method ( LOF ) \CITE .
Adapting the definition from Knorr \CITE , given a set of objects \MATH , an object \MATH is considered as an outlier if there are fewer than \MATH neighboring objects in \MATH lying within a distance \MATH .
This outlier detection process is summarized as follows :
-Step 1 : Compute the distance between every pair of data objects .
-Step 2 : For each object , compute \MATH , which is the number of neighboring objects lying within a distance \MATH .
-Step 3 : Rank objects based on their scores \MATH .
In our experiments , the distance between two objects is the Euclidean distance between two faces and is computed in the eigen-subspace ( described in section \REF ) .
Figure \REF shows two examples of good and bad performances using this method for ranking relevant faces .
According to the method described in \CITE , the local outlier factor of an object \MATH is computed by the following steps and then used to rank faces :
-Step 1 : For each data object \MATH compute the \MATH ( the distance to the \MATH nearest neighbor ) and \MATH ( all points in a \MATH sphere ) .
- Step 2 : Compute the reachability distance for each data object \MATH with respect to data object \MATH as : \MATH , where \MATH is the distance from data object \MATH to data object \MATH .
-Step 3 : Compute local reachability density of data object \MATH as inverse of the average reachability distance based on the \MATH ( minimum number of data objects ) of the nearest neighbors to data object \MATH .
-Step 4 : Compute LOF of data object \MATH as the average of the ratios of the local reachability density of data object \MATH and local reachability density of \MATH of nearest neighbors .
We used the dataset described in \CITE for our experiments .
This dataset consisted of approximately half a million news pictures and captions from Yahoo News over a period of roughly two years .
Using a robust face detector , 44 , 773 faces were detected and normalized to the size of 86\MATH86 pixels .
After eliminating faces whose facial features were poorly detected by a rectification process and faces whose associated names were not extracted properly from the corresponding captions , 30 , 281 faces were kept .
Figure \REF shows an example of a news photo and its caption .
We selected sixteen government leaders including George W . Bush ( US ) , Vladimir Putin ( Russia ) , Ziang Jemin ( China ) , Tony Blair ( UK ) , Junichiro Koizumi ( Japan ) , Roh Moo-hyun ( Korea ) , Abdullah Gul ( Turkey ) , and other key individuals such as John Paul II ( the Former Pope ) and Kofi Annan and Hans Blix ( UN ) since their images appeared frequently in the dataset \CITE .
For each person , variations of his name were collected . For example , George W . Bush , President Bush , U . S . President , etc are variations of U . S . President Bush .
We indexed image captions and then used this index to retrieve faces associated with the captions containing names of the queried person .
The faces retrieved from different names of each person were merged into a set used for our ranking process .
Figure \REF shows faces retrieved when searching Mr . Kofi Annan .
Figure \REF shows the distribution of retrieved faces from this method and the corresponding number of relevant faces for these ten individuals .
In total , 3 , 907 faces were retrieved in which 2 , 094 faces were relevant .
On average , the precision was 52.49% . //[precision / accuracy ? ]
We used an eye detector to detect eye positions of detected faces .
These eye positions were used to align faces to a predefined canonical pose .
To compensate for illumination effects , the subtraction of the best-fit brightness plane followed by histogram equalization was applied .
This normalization process is shown in Figure \REF .
We then used principle component analysis \CITE to reduce the number of dimensions of the feature vector for face representation .
Eigenfaces were computed from the original face set returned by the text-based query method .
A number of eigenfaces was selected so that 97% of the total energy was retained \CITE . //[What is that number ? ]
We evaluated the retrieval performance with measures that are commonly used in information retrieval such as precision , recall , and average precision .
Given a queried person , assuming that \MATH is the total number of faces returned , \MATH is the number of relevant faces , \MATH is the number of relevant faces , we calculated recall and precision as follows : //[Nrel and Nhit are exactly the same here . They should be different .]
Precision and recall only evaluate the quality of an unordered set of retrieved faces .
To evaluate ranked lists , average precision is used .
The average precision is computed by taking the average of the interpolated precision measured at the 11 recall levels of 0.0 , 0.1 , 0.2 , ... , 1.0 .
The interpolated precision \MATH at a certain recall level \MATH is defined as the highest precision found for any recall level \MATH :
In addition , to evaluate the performance of multiple queries , we used mean average precision , which is the mean of average precisions computed from queries .
We show in Figure \REF the retrieval performance of the outlier detection methods and the baseline method using text correlation .
In the baseline method , faces were sorted by the time the associated news article was published .
It indicated that the DBO-based method outperformed the others .
The baseline method performed the worst .
The LOF-based method tends to be less sensitive when the threshold is changed .
This suggests that the input face sets were quite dense .
We studied the effect of choosing the number of times \MATH appeared in the Bag-Rank-SVM algorithm .
We used DBO as the method for making the initial rank list from which 30 training subsets were generated and used for training SVM classifiers using linear kernels with probability output .
To select one subset , we set \MATH and \MATH which means 20% of the highest ranked faces were used for \MATH and 30% of the lowest ranked faces were used for \MATH .
The subsets \MATH and \MATH were generated by randomly selecting with replacement 70% samples of \MATH and \MATH .[�gWith replacement�h does not make sense here . I am not sure what you want to say .]
Figure \REF shows the performance of single and ensemble classifiers .
It suggests that the performance does not change significantly after five iterations .
In addition , the performance of the ranking process improved when the ensemble classifier was used .
We set the number of iterations for the Bag-Rank-SVM algorithm at five and set the number of iterations of the outer loop $T=30$ to see how much the final performance changes .
As shown in Figure \REF , the performance did not change much after five iterations .
From these experiments , \MATH and \MATH are suitable values for the proposed method .
The performance of different methods shown in Figure \REF indicates that our proposed method outperformed the distance-based outlier detection method and performed comparable to the supervised method using 5% annotation data .
As shown in Figures \REF , \REF , \REF , our proposed method produced better results in terms of average precision in which relevant faces were put at the top of the returned list .
We presented a method for effectively ranking faces retrieved using text-based correlation methods when searching for a specific person .
Using the rank list estimated from the previous steps , we automatically selected a subset of positive and negative samples to train a classifier using SVM with probability outputs . //[Since this is the conclusion , you might want to be more specific on what �gthe previous steps�h are . ]
This classifier was used to rank input faces for the next step .
Since the labels of training sets were still noisy , the classifiers trained from these datasets were weak .
By combining multiple weak classifiers in a bagging framework , we constructed the final strong classifier , which produced good results .
To obtain the initial rank for the first step , we proposed using a common outlier detection method .
Experiments on a large number of persons with thousands of retrieved images showed the effectiveness of the proposed method .
Face detection , tracking , and recognition for broadcast video
Human face processing techniques for broadcast video , including face detection , tracking , and recognition , have long been a topic that has attracted a lot of research interest due to its crucial value in various applications , such as in video structuring , indexing , retrieval , and summarization .
The main reason for this is that the human face provides rich information for people 's appearances , such as for a government leader in a news video , a pitcher in a sports video or a hero in a movie , and is the basis for interpreting facts .
This article describes some state-of-the art techniques for face detection , tracking , and recognition with applications to broadcast video .
Face detection , which is the task of localizing faces in an input image , is a fundamental part of any face processing system .
The extracted faces can then be used for initializing face tracking or automatic face recognition .
An ideal face detector should possess the following characteristics :
- Robustness : it should be capable of handling appearance variations , such as pose changes , size , illuminations , occlusions , complex backgrounds , facial expressions , and low resolutions .
- Quickness : it should be fast in order to perform real-time processing , which is an important factor in processing large video archives .
- Simplicity : the training process should be simple .
For example , the training time is short , the number of parameters is small , and training samples are collected cheaply .
Many approaches have been proposed for building faster and more robust face detectors \CITE .
Among them , those using advanced learning methods , such as neural network , support vector machines and boosting , are the best .
Typically , detecting the faces in an image takes the following steps :
- Window scanning : in order to detect faces at multiple locations and sizes , a fixed window size ( e.g. 24 x 24 pixels ) is used to extract image patterns at every location and scale .
The number of patterns extracted from a 320 x 240 frame image is large , approximately 160 ,000 , in which only a small number of patterns contain a face .
- Feature extraction : given an image pattern , the features are extracted .
The most popular feature type is the Haar wavelet because it is very fast to compute using the integral image \CITE .
Other feature types can be listed including the pixel intensity \CITE , local binary patterns \CITE , and edge orientation histogram \CITE .
- Classification : the extracted features are passed through a classifier that has been previously trained to classify the input pattern associated with these features as a face or a non-face . //[trained / programmed ?]
- Merging overlapping detections : since the classifier is insensitive to small changes in translation and scale , there might be multiple detections around each face .
In order to return a single final detection per face , it is necessary to combine the overlapping detections into a single detection .
Since the vast majority of processed patterns are non-face , the single classifier based systems , such as the neural network \CITE and the support vector machines \CITE , are usually slow .
To overcome this problem , a combination of simple-to-complex classifiers has been proposed \CITE leading to the first real-time robust face detector in the world .
In this structure , fast and simple classifiers are used as filters in the earliest stages to quickly reject a large number of the non-face patterns and then slower but more accurate classifiers are used for classifying the face-like patterns .
In this way , the complexity of classifiers can be adapted to correspond to the increasing difficulty with the input patterns .
Training classifiers usually consist of the following steps :
- Training set preparation : Supervised learning methods require a large number of training samples to obtain accurate classifiers .
The training samples are patterns that must be labeled as face ( positive samples ) or non-face ( negative samples ) in advance .
Face patterns are manually collected from images containing faces and then are scaled to the same size and normalized to a canonical pose in which the eyes , mouth , and nose are aligned .
Then these face patterns can be used to generate other artificial faces by randomly rotating the images ( about their center points ) by up to 10 degrees , scaling them between 90 and 110% , translating them up to half a pixel , and mirroring them to enlarge the number of positive samples \CITE .
The collection of non-face patterns is usually done automatically by scanning through images which contain no faces .
The accurate classifier described in \CITE requires about five thousand original face patterns and hundreds of millions of non-face patterns extracted from 9 ,500 non-face images .
In \CITE a smaller number of training samples can be used to build a robust face detector by using an edge orientation histogram .
- Learning method selection : Basically , in an ideal situation with the proper settings , the advanced learning methods , such as the neural network , support vector machines , and AdaBoost , can perform similarly .
However , in practice , it is difficult to find these proper settings .
Using a neural network requires the design of layers , nodes , etc. , which is complicated .
Therefore , it is preferable to use support vector machines because only two parameters are necessary if a RBF kernel is used and many tools are available .
Another learning method that has been widely used in many object detection systems is AdaBoost and its variants .
The advantage of AdaBoost is it can be used for both selecting features and learning the classifier .
Face tracking is the process of locating a moving face or several of them over a period of time using a camera , as illustrated in Fig. 1 .
A given face is first initialized manually or by a face detector .
The face tracker then analyzes the subsequent video frames and outputs the location of the initialized face within these frames by estimating the motion parameters of the moving face .
This is different from face detection , the outcome of which is the position and scale of one single face in one single frame ; face tracking enables the information acquisition of multiple consecutive faces within consecutive video frames .
More important , these faces have the same identity .
Although frame-based face detection techniques have been successfully demonstrated on real images , the current ability for detecting faces from video is still primitive .
The quality of the detector responses can decrease due to different reasons including occlusions , lighting conditions , and face poses .
Without any additional information , these responses can easily be rejected , even if they indicate the presence of a face .
It is therefore important to incorporate the temporal information in a video sequence to provide more complete video segments displaying the person of interest , which is always named as / already called ? face tracking .
One of the main applications for face tracking is in the person retrieval from broadcast video , for example : " Intelligent fast-forwards�E, where the video jumps to the next scene containing a certain person / actor ; or retrieval of different TV interventions , e.g. interviews , shows , etc. , of a given person in a video or a large collection of TV broadcast videos .
In [5] , the person retrieval system for a feature-length movie video is proposed using straightforward face tracking .
At run time a user outlines a face in a video frame , and the face tracks within the movie are then ranked according to their similarity to the outlined query face in the same way as Google .
Since one face track corresponds to one identity , the workload of intra-shot face matching is greatly reduced , which is not available in frame-based face detection .
In addition , face tracking provides multiple examples of the same character 's appearance to help with inter-shot face matching .
Face tracking is also used in the area of face-name association , the objective of which is to label television or movie footage with the identity of the person present in each frame of the video .
Everingham et al. [8] proposed an automatic face-name association system .
This system uses a face tracker similar to the one in [5] that can extract a few hundred tracks of each particular character in a single shot .
Based on the temporal information obtained from the face tracker , the textual information for TV and the movie footage including the subtitles and transcripts is employed to assign the character 's name to each face track .
For instance , shots containing a particular person can be retrieved by a keyword like " Bush " or " Julia Roberts " instead of the use of an outlined query face as used in [5] .
Besides broadcast video , face tracker also has important applications in the videos used in humanoid robotics , visual surveillance , human-computer interaction ( HCI ) , video conferencing , and face-based biometric person authentication among others .
Choosing a face tracker can be a difficult task because of the variety of face trackers currently available .
The application provider will have to decide which face tracker is best suited to his / her individual needs and , of course , the type of video that he / she wants to use as the target .
Generally speaking , the important issues that should be addressed include speed , robustness , and accuracy .
Can the system run in real time ? Similar to many other processing tools for broadcast video , speed is not the most critical issue because offline processing is permitted in most video structuring and indexing cases .
However , a real-time face tracker will become necessary if a target archive is established from too large a quantity of videos , e.g. 24-hour continuous video recording that needs daily structuring .
On the other hand , the speed of the tracker is critical in most of the application cases for non-broadcast video , e.g. HCI .
It should be noted that there is always a tradeoff between speed and performance-related issues including the robustness and accuracy .
Can the system cope with varying illuminations , facial expressions , scales , poses , camerawork , occlusion , and large head motions ? A number of illumination factors , e.g. light sources , background colors , luminance levels , and media , impact greatly on the change in appearance of a moving face , for instance , when tracking a person who is moving from an indoor to an outdoor environment .
Face tracking also tends to fail under large facial deformations of the eyes , nose , mouth , etc. due to the facial expression variation .
Different from non-broadcast video , e.g. video used for HCI , faces appearing in broadcast video vary from large close-up faces to small faces taken by a long-shot .
A smaller face scale always leads to a lower resolution and will reject most face trackers designed by computer vision researchers .
Pose variations , i.e. head rotations including the pitch , roll , and yaw , is another influencing factor , which can cause disappearances of parts of faces .
In some cases , the scale and pose variations might be caused by camerawork changes .
The partial disappearance of a face is also apt to happen due to occlusion by other objects , and motion information may be distracted by an alternate motion .
Moreover , the task of face tracking becomes even more difficult when the head is moving fast relative to the frame rate , so that the tracker fails to �arrive in time�E.
How accurate is the tracking ? The first factor that affects the accuracy might be the false face detections generated when initializing the tracker by a face detector .
This problem is difficult to solve because it has a fixed threshold .
Lowering the threshold of the face detector reduces the number of false rejections , but increases the number of false detections , and vice versa .
The drifting or the long sequence motion problem is another factor that might affect the accuracy .
This problem always happens due to the imperfect motion estimation technique .
A tracker might accumulate motion errors and eventually lose track of a face , for instance , when tracking faces that change from a frontal view to a profile position .
Face tracking can be considered an algorithm that analyzes the video frames and outputs the location of moving faces within the video frame .
For each tracked face , three steps are involved , which are the initialization , tracking , and stopping procedures , as illustrated in Fig. 2 .
Most of the developed methods use a face detector for the initialization of their tracking processes .
An always ignored but existing difficulty with this step lies in the control of the false face detections described above .
Another problem is the difficulty in handling the appearance of new non-frontal faces .
Although there have been literatures on profile or intermediate pose face detectors , this kind of work suffers from the false-detection problem far more than a frontal face detector .
To alleviate these two problems , Chaudhury et al. [1] used two face probability maps instead of a fixed threshold to initialize the face tracker , one for frontal views and one for profiles .
All local maxima in these maps are chosen as the face candidates , the face probabilities of which are propagated throughout the temporal sequence .
Candidates whose probabilities either go to zero or remain low over time are determined as non-face and eliminated .
The information from the two face probability maps is combined to represent an intermediate head pose .
Their experiments showed that the proposed probabilistic detector improved the accuracy more than a traditional face detector and is able to handle the head movement covering a range of �90 degrees out-of-plane rotation ( yaw ) .
After initialization , one should choose what features to track before tracking a face .
The exploitation of color is one of the more common choices in order to be invariant to facial expressions , scale , and pose changes [4 , 9] .
However , color-based face trackers often depend on a learning set dedicated to the type of processed videos and are not guaranteed to be easily expendable to unknown videos with varying illumination conditions or different races .
Also , color is susceptible to occlusion by other head-like objects .
Two other choices are the key-point [5 , 8] and facial features [3 , 6 , 10] , e.g. eyes , nose , mouth , etc. , both of which are more robust to varying illuminations and occlusions .
Although the generality of key-points allows for tracking different kinds of objects , without any face-specific knowledge its discriminant power between the target and clutter might be in peril under tough conditions , e.g. strong background noise .
Facial features enable the tracking of higher-level information from a human face , but are weak in lower video quality .
Most facial-feature-based face trackers [6 , 10] have been tested using only non-broadcast video , e.g. webcam video , and their application potentiality to broadcast video is questionable .
Note that these different cues described above may be combined .
An appearance-based or featureless tracker matches an observation model of the entire facial appearance with the input image , instead of choosing only a few features to track .
One example of an appearance-based face tracker is [1] , which was introduced above .
Another example was proposed by Li et al. [9] , which uses a multi-view face detector to detect and track faces from different poses .
Besides the face-based observation model , a head model is also included to represent the information of head rear .
It is based on the idea that a head can be considered an object of interest instead of a face , because the face is not always present in the tracking process .
An extended particle filter is proposed to fuse these two interrelated information together so as to handle the occlusion due to out-of-plane head rotation ( yaw ) that is more than �90 degrees .
During the tracking procedure , face tracking systems usually use a motion model that describes how the image of the target might change for different possible motions of the face to track .
Some examples of simple motion models are as follows .
Based on the assumption that a face can be considered a planar object , the corresponding motion model can be a 2D transformation , e.g. affine transformation or homography , of an image of the face , e.g. the initial frame [3 , 6] .
Some researchers view a face as a rigid 3D object , thus the motion model defines its aspect depending on its 3D position and orientation [10] .
However , a face is actually both 3D and deformable .
Some systems try to model faces in this sense , and the image of deformed face can be covered with a mesh , i.e. a sophisticated geometry and texture face model [2 , 7] .
The motion of the face is defined by the position of the nodes of the mesh .
Generally if the quality of the video is high , a more sophisticated motion model is used , and then the face tracker generates a more accurate result .
For instance , a sophisticated geometry and texture model might suffer from false face detections and a level of drifting [less than / that is worse than ?] a simple 2D transformation model .
However , it must be noted that most 3D-based and mesh-based face trackers require a relatively clear appearance , high resolution , and a limited pose variation of the face , e.g. out-of-plane head rotations ( roll and yaw ) that are far less than �90 degrees .
Both of these requirements are always unavailable in the case of broadcast video .
Therefore , most 3D-based and mesh-based face trackers are only tested by using non-broadcast video , e.g. webcam video [2 , 7 , 10] .
Finally , the stopping procedure is rarely discussed .
This constitutes a major deficiency for the face tracking algorithms that are generally not able to stop a face track in case of tracking errors , i.e. drifting .
Arnaud et al. [3] proposed an approach that uses a general object tracker for face tracking and a stopping criterion based on the addition of an eye tracker to alleviate drifting .
The two positions of the tracked eyes are compared with the tracked face position .
If neither of the eyes is in the face region , it will be determined as drifting and the tracking process will be stopped .
In addition , most mesh-based and top-down trackers are assumed to be able to avoid drifting .
Face tracking has attracted much attention from researchers in communities including multimedia content analysis , computer vision , etc. because of its wide applications .
However , while most of the attempts have been on the face tracking for high-quality videos by computer vision researchers , only a limited number of face trackers are designed for broadcast video .
This is because the current ability of face tracking still depends on a relatively clear appearance , high resolution , and limited pose variation of the face , which are unavailable in broadcast video .
On the other hand , currently proposed face trackers are still evaluated by using different types of videos and different criteria .
A general evaluation criterion , in terms of speed , robustness , and accuracy , is needed for a performance comparison between the face trackers with different purposes .
Unsupervised Face Annotation by Mining the Web
Searching for images of people is an essential task for image and video search engines .
However , current search engines have limited capabilities for this task since they rely on text associated with images and video , and such text is likely to return many irrelevant results .
We propose a method for retrieving relevant faces of one person by learning the visual consistency among results retrieved from text-correlation-based search engines .
The method consists of two steps .
In the first step , each candidate face obtained from a text-based search engine is ranked with a score that measures the distribution of visual similarities among the faces .
Faces that are possibly very relevant or irrelevant are ranked at the top or bottom of the list , respectively .
The second step improves this ranking by treating this problem as a classification problem in which input faces are classified as 'person-$X$' or 'non-person-$X$' ; and the faces are re-ranked according to their relevant score inferred from the classifier 's probability output .
To train this classifier , we use a bagging-based framework to combine results from multiple weak classifiers trained using different subsets .
These training subsets are extracted and labeled automatically from the rank list produced from the classifier trained from the previous step .
In this way , the accuracy of the ranked list increases after a number of iterations .
Experimental results on various face sets retrieved from captions of news photos show that the retrieval performance improved after each iteration , with the final performance being higher than those of the existing algorithms .
With the rapid growth of digital technology , large image and video databases have become more available than ever to users .
This trend has shown the need for effective and efficient tools for indexing and retrieving visual content .
A typical application is searching for a specific person by providing his or her name .
Most current search engines use the text associated with images and video as significant clues for returning results .
However , other un-queried faces and names may appear with the queried ones ( Figure xx ) , and this significantly lowers the retrieval performance .
One way to improve the retrieval performance is to take into account visual information present in the retrieved faces .
This task is challenging for the following reasons :
-Large variations in facial appearance due to pose changes , illumination conditions , occlusions , and facial expressions make face recognition difficult even with state-of-the-art techniques\CITE ( see example in Figure xx ) .
-The fact that the retrieved face set consists of faces of several people with no labels makes supervised and unsupervised learning methods inapplicable .
We propose a method for solving the above problem .
The main idea is the assumption that there is visual consistency among the results returned from text-based search engines and this visual consistency is then learned through an interactive process .
This method consists of two stages .
In the first stage , we explore the local density of faces to identify potential candidates for relevant faces and irrelevant faces .
This stage reflects the fact that the facial images of the queried person tend to form dense clusters , whereas irrelevant facial images are sparse since they look different from each other .
For each face , we define a score to measure the density of its neighbor set .
This score is used to form a ranked list , in which faces with high-density scores are considered relevant and are put at the top .
The above ranking method is weak since dense clusters have no guarantee of containing relevant faces .
Therefore , a second stage is necessary to improve this ranked list .
We model this problem as a classification problem in which input faces are classified as person-\MATH ( the queried person ) or non-person-\MATH ( the un-queried person ) .
The faces are ranked according to a relevancy score that is inferred from the classifier 's probability output .
Since annotation data is not available , the rank list from the previous step is used to assign labels for a subset of faces .
This subset is then used to train a classifier using supervised methods such as a support vector machine ( SVM ) .
The trained classifier is used to re-rank faces in the original input set .
This step is repeated a number of times to get the final ranked list .
Since automatically assigning labels from the ranked list is not reliable , the trained classifiers are weak .
To obtain the final strong classifier , we use the [idea / concept?] of ensemble learning \CITE in which weak classifiers trained on different subsets are combined to improve the stability and classification accuracy of single classifiers .
The learned classifier can be further used for recognizing new facial images of the queried person .
The second stage improves the ranked list and recognition performance for the following reasons :
-Supervised learning methods , such as an SVM , provide a strong theoretical background for finding the optimal decision boundary even with noisy data .
Furthermore , recent studies \CITE suggest that SVM classifiers provide probability outputs that are suitable for ranking .
-The bagging framework helps to leverage noises in the unsupervised labeling process .
Our contribution is two-fold :
-We propose a general framework to boost the face retrieval performance of text-based search engines by visual consistency learning .
The framework seamlessly integrates data mining techniques such as supervised learning and unsupervised learning based on bagging .
-Our framework requires only a few parameters and works stably .
We demonstrate its feasibility with a practical web mining application .
A comprehensive evaluation on a large face dataset of many people was carried out and confirmed that our approach is promising .
There are several approaches for re-ranking and learning models from web images .
Their underlying assumption is that text-based search engines return a large fraction of relevant images .
The challenge is how to model what is common in the relevant images .
One approach is to model this problem in a probabilistic framework in which the returned images are used to learn the parameters of the model .
For examples , as described by Fergus et al. \CITE , [Reference numbers generally should not be grammatically part of the sentence .
It is better to use the authors�f names .] objects retrieved using an image search engine are re-ranked by extending the constellation model .
Another proposal , described in \CITE , uses a non-parametric graphical model and an interactive framework to simultaneously learn object class models and collect object class datasets .
The main contribution of these approaches is probabilistic models that can be learned with a small number of training images .
However , these models are complicated since they require several hundred parameters for learning and are susceptible to over-fitting .
Furthermore , to obtain robust models , a small amount of supervision is required to select seed images .
Another study \CITE proposed a clustering-based method for associating names and faces in news photos .
To solve the problem of ambiguity between several names and one face , a modified \MATH-means clustering process was used in which faces are assigned to the closest cluster ( each cluster corresponding to one name ) after a number of iterations .
Although the result was impressive , it is not easy to apply it to our problem since it is based on a strong assumption that requires a perfect alignment when a news photo only has one face and its caption only has one name .
Furthermore , a large number of irrelevant faces ( more than 12\% ) have to be manually eliminated before clustering .
A graph-based approach was proposed by Ozkan and Duygu \CITE , in which a graph is formed from faces as nodes , and the weights of edges linked between nodes are the similarity of faces , is closely related to our problem .
Assuming that the number of faces of the queried person is larger than that of others and that these faces tend to form the most similar subset among the set of retrieved faces , this problem is considered equal to the problem of finding the densest subgraph of a full graph ; and can therefore , be solved by taking an available solution . //It might be unclear as to what " available solution " you are talking about . You might want to give more detail here .
Although experimental results showed the effectiveness of this method , it is still questionable whether the densest subgraph intuitively describes most of the relevant faces of the queried person and it is easy to extend for the ranking problem .
Furthermore , choosing an optimal threshold to convert the initial graph into a binary one is difficult and rather ad hoc due to dimensionality .
An advantage of these methods \CITE is they are fully unsupervised .
However , a disadvantage is that no model is learned for predicting new images of the same category .
Furthermore , they are used for performing hard categorization on input images that are inapplicable for re-ranking . //It is not clear if " hard categorization " is inapplicable or if the " input images " are inapplicable .
The balance of recall and precision was not addressed .
Typically , these approaches tend to ignore the recall to obtain high precision .
This leads to the reduction in the number of collected images .
Our approach combines a number of advances over the existing approaches .
Specifically , we learn a model for each query from the returned images for purposes such as re-ranking and predicting new images .
However , we used an unsupervised method to select training samples automatically , which is different from the methods proposed by Fergus et al. and Li et al. \CITE .
This unsupervised method is different from the one by Ozkan and Dugyu \CITE in the modeling of the distribution of relevant images .
We use density-based estimation rather than the densest graph .
Given a set of images returned by any text-based search engine for a queried person ( e.g. 'George Bush' ) , we perform a ranking process and learning of person |\MATH 's model as follows :
-Step 1 : Detect faces and eye positions , and then perform face normalizations .
-Step 2 : Compute an eigenface space and project the input faces into this subspace .
-Step 3 : Estimate the ranked list of these faces by rank-by-local-density score .
-Step 4 : Improve this ranked list using rank-by-bagging-probSVM . //I found not hits for " rank-by-bagging-probSVM " on the Internet. You might want to double check to see if this is a standard term . The same is true for " rank-by-local-density score " . If this is your own term , you might want to specify this at some point .
Steps 1 and 2 are typical for any face processing system , and they are described in section \REF .
The algorithms used in Steps 3 and 4 are described in section \REF and section \REF , respectively .
Figure \REF illustrates the proposed framework .
Among the faces retrieved by text-based search engines for a query of person-\MATH , as shown in Figure \REF , relevant faces usually look similar and forms the largest cluster .
One approach of re-ranking these faces is to cluster based on visual similarity .
However , to obtain ideal clustering results is impossible since these faces are high dimensional data and the clusters are in different shapes , sizes , and densities .
Instead , a graph-based approach was proposed by Ozkan and Dugyu \CITE in which the nodes are faces and edge weights are the similarities between two faces .
With the observation that the nodes ( faces ) of the queried person are similar to each other and different from other nodes in the graph , the densest component of the full graph ? the set of highly connected nodes in the graph ? will correspond to the face of the queried person .
The main drawback of this approach is it needs a threshold to convert the initial weighted graph to a binary graph .
Choosing this threshold in high dimensional spaces is difficult since different persons might have different optimal thresholds .
We use the idea of density-based clustering described by Ester et al. and Breunig et al. \CITE to solve this problem . //idea / concept?
Specifically , we define the local density score ( LDS ) of a point \MATH( i.e. a face ) as the average distance to its k-nearest neighbors .
where \MATH is the set of \MATH - neighbors of \MATH , and \MATH is the similarity between \MATH and \MATH .
Since faces are represented in high dimensional feature space , and face clusters might have different sizes , shapes , and densities , we do not directly use the Euclidean distance between two points in this feature space for \MATH .
Instead , we use another similarity measure defined by the number of shared neighbors between two points .
The efficiency of this similarity measure for density-based clustering methods was described . //There is no period here , so it is not clear if there should be a period or there should be more to this sentence that is not here . If the sentence does end here , you might want to go into more detail about who or what " described " this .
A high value of \MATH indicates a strong association between \MATH and its neighbors .
Therefore , we can use this local density score to rank faces .
Faces with higher scores are considered to be potential candidates that are relevant to person-\MATH , while faces with lower scores are considered as outliers and thus are potential candidates for non-person-\MATH .
Algorithm 1 : Rank-By-Local-Density-Score Step 1 : For each face p , compute LDS( p , k ) , where k is the number of neighbors of p and is the input of the ranking process .
Step 2 : Rank these faces using LDS( p , k ) ( The higher the score the more relevant ) .
One limitation of the local density score based ranking is it cannot handle faces of another person strongly associated in the \MATH-neighbor set ( for example , many duplicates ) .
Therefore , another step is proposed for handling this case .
As a result , we have a model that can be used for both re-ranking current faces and predicting new incoming faces .
The main idea is to use a probabilistic model to measure the relevancy of a face to person-\MATH , \MATH .
Since the labels are not available for training , we use the input rank list found from the previous step to extract a subset of faces lying at the top and bottom of the ranked list to form the training set .
After that , we use an SVM with probabilistic output \CITE implemented in LibSVM \CITE to learn the person-\MATH model .
This model is applied to faces of the original set , and the output probabilistic scores are used to re-rank these faces .
Since it is not guaranteed that faces lying at two ends of the input rank list correctly correspond to the faces of person-\MATH and faces of non person-\MATH , we adopt the [idea / concept?] of a bagging framework \CITE in which randomly selecting subsets to train weak classifiers , and then combining these classifiers help reduce the risk of using noisy training sets .
The details of the Rank-By-Bagging-ProbSVM-InnerLoop method , improving an input rank list by combining weak classifiers trained from subsets annotated by that rank list , are described in Algorithm 2 .
Step 1 : Train a weak classifier , hi .
Step 1 .1 : Select a set Spos including p% of top ranked faces and then randomly select a subset S?pos from Spos .
Label faces in S?pos as positive samples .
Step 1 .2 : Select a set Sneg including p% of bottom ranked faces and then randomly select a subset S? neg from Sneg .
Label faces in S? neg as negative samples .
Step 1 .3 : Use S?pos and S? neg to train a weak classifier , hj , using LibSVM [8] with probability outputs .
Step 2 : Compute ensemble classifier Hi = Pij=1 hj .
Step 3 : Apply Hi to the original face set and form the rank list , Ranki , using the output probabilistic scores .
Step 4 : Repeat steps 1 to 3 until Dist2RankList( Ranki?1 ,Ranki ) <= ? .
Step 5 : Return Hi = Pij=1 hj .
Step 1 : Rankcur = Rank-By-Bagging-ProbSVM-InnerLoop ( Rankprev ) .
Step 2 : dist = Dist2RankList ( Rankprev ,Rankcur ) .
Step 3 : Rankfinal = Rankcur .
Step 4 : Rankprev = Rankcur .
Step 5 : Repeat steps 1 to 4 until dist <= ? .
Step 6 : Return Rankfinal .
Given an input ranked list , Rank-By-Bagging-ProbSVM-InnerLoop is used to improve this list .
We repeat the process a number of times whereby the ranked list output from the previous step is used as the input ranked list of the next step .
In this way , the iterations significantly improve the final ranked list .
The details are described in Algorithm 3 .
To determine the number of iterations of Rank-By-Bagging-ProbSVM-InnerLoop and Rank-By-Bagging-ProbSVM-OuterLoop , we use the \MATH distance \CITE , which is a metric that counts the number of pairwise disagreements between two lists .
The larger the distance , the more dissimilar the two lists are .
The \MATH distance between two lists , \MATH and \MATH , is defined as follows :
Since the maximum value of \MATH is \MATH , where \MATH is the number of members of the list , the normalized Kendall tau distance can be written as follows :
Using this measure for checking when the loops stop means that if the ranked list does not change significantly after a number of iterations , it is reasonable to stop .
We used the dataset described by Berg et al. \CITE for our experiments .
This dataset consists of approximately half a million news pictures and captions from Yahoo News collected over a period of roughly two years .
This dataset is better than datasets collected from image search engines such as Google that usually limit the total number of returned images to 1 ,000 .
Furthermore , it has annotations that are valuable for evaluation of methods .
Note that these annotations are used for evaluation purpose only .
Our method is fully unsupervised , so it assumes the annotations are not available at running time .
Only the front of faces were considered since current frontal face detection systems \CITE work in real time and have accuracies exceeding 95\% .
44 ,773 faces were detected and normalized to 86\MATH86 pixels .
We selected fifteen government leaders , including George W. Bush ( US ) , Vladimir Putin ( Russia ) , Ziang Jemin ( China ) , Tony Blair ( UK ) , Junichiro Koizumi ( Japan ) , Roh Moo-hyun ( Korea ) , Abdullah Gul ( Turkey ) , and other key individuals , such as John Paul II ( the Former Pope ) and Hans Blix ( UN ) , because their images frequently appear in the dataset \CITE .
Variations in each person 's name were collected .
For example , George W. Bush , President Bush , U.S. President , etc. , all refer to the current U.S. president .
We performed simple string search in captions to check whether a caption contained one of these names .
The faces extracted from the corresponding image associated with this caption were returned .
The faces retrieved from the different name queries were merged into one set and used as input for ranking .
Figure \REF shows the distribution of retrieved faces from this method and the corresponding number of relevant faces for these fifteen individuals .
In total , 5 ,603 faces were retrieved in which 3 ,374 faces were relevant .
On average , the accuracy was 60 .22\% .
We used an eye detector to detect the positions of the eyes of the detected faces .
The eye detector , built with the same approach as that of Viola and jones \CITE , had an accuracy of more than 95\% .
If the eye positions were not detected , predefined eye locations were assigned .
The eye positions were used to align faces to a predefined canonical pose .
To compensate for illumination effects , the subtraction of the best-fit brightness plane followed by histogram equalization was applied .
This normalization process is shown in Figure \REF .
We then used principle component analysis \CITE to reduce the number of dimensions of the feature vector for face representation .
Eigenfaces were computed from the original face set returned using the text-based query method .
The number of eigenfaces used to form the eigen space was selected so that 97\% of the total energy was retained \CITE . //It is not clear what you mean by " energy " in this context . This is the first time you mention this term . You might want to specify what kind of energy you are talking about .
The number of dimensions of these feature spaces ranged from 80 to 500 .
We evaluated the retrieval performance with measures that are commonly used in information retrieval , such as precision , recall , and average precision .
Given a queried person and letting \MATH be the total number of faces returned , \MATH the number of relevant faces , and \MATH the total number of relevant faces , recall and precision can be calculated as follows :
Precision and recall are only used to evaluate the quality of an unordered set of retrieved faces .
To evaluate ranked lists in which both recall and precision are taken into account , average precision is usually used .
The average precision is computed by taking the average of the interpolated precision measured at the 11 recall levels of 0 .0 , 0 .1 , 0 .2 , . . . , 1 .0 .
The interpolated precision \MATH at a certain recall level \MATH is defined as the highest precision found for any recall level \MATH :
In addition , to evaluate the performance of multiple queries , we used mean average precision , which is the mean of average precisions computed from queries
The parameters of our method include :
-\MATH : the fraction of faces at the top and bottom of the ranked list that are used to form a positive set \MATH and negative set \MATH for training weak classifiers in Rank-By-Bagging-ProbSVM-InnerLoop .
We empirically selected \MATH ( i .e 40\% samples of the rank list were used ) since a larger \MATH will increase the number of incorrect labels , and a smaller \MATH will cause over-fitting .
In addition , \MATH consists of \MATH samples that are selected randomly with replacement from \MATH .
This sampling strategy is adopted from the bagging framework \CITE .
The same setting was used for \MATH .
-\MATH : the maximum Kendall tau distance \MATH between two rank lists \MATH and \MATH .
This value is used to determine when the inner loop and the outer loop stop .
We set \MATH for balancing between accuracy and processing time .
Note that a smaller \MATH requires more iterations , making the system 's speed slower .
-\MATH : the kernel type is used for the SVM .
The default is a linear kernel that is defined as : \MATH .
We have tested other kernel types , such as RBF or polynomial , but the performance did not change much .
Therefore , we used the linear kernel for simplicity .
We performed a comparison between our proposed method with other ones .
Text Based Baseline ( TBL ) : Once faces corresponding with images whose captions contain the query name are returned , they are ranked in time order .
This is a rather naive method in which no prior knowledge between names and faces is used .
Distance-Based Outlier ( DBO ) : We adopted the idea of distance-based outlier detection for ranking \CITE .
Given a threshold \MATH , for each point \MATH , we counted the number of points \MATH so that \MATH , where \MATH is the Euclidean distance between \MATH and \MATH in the feature space mentioned in section \REF .
This number was then used as the score to rank faces .
We selected a range of \MATH values for experiments : \MATH .}
Densest Sub-Graph based Method ( DSG ) : We re-implemented the densest sub-graph based method \CITE for ranking .
Once the densest subgraph was found after an edge elimination process , we counted the number of surviving edges of each node ( i .e face ) and used this number as the ranking score .
To form the graph , the Euclidean distance \MATH was used to assign the weight for the edge linked between node $p$ and node \MATH .
DSG requires a threshold \MATH to convert the weighted graph to the binary graph before searching for the densest subgraph .
We selected a range of \MATH values that are the same as the values used in DBO : \MATH .
Local Density Score ( LDS ) : This is the first stage of our proposed method .
It requires the input value \MATH to compute the local density score .
Since we do not know the number of returned faces from text-based search engines , we used another input value \MATH , defined as the fraction of neighbors , and estimated \MATH by the formula : \MATH , where \MATH is the number of returned faces .
We used a range of $fraction$ values for experiments : \MATH .
For a large number of returned faces , we set \MATH to the maximum value of 200 : \MATH .
Unsupervised Ensemble Learning Using Local Density Score ( UEL-LDS ) : This is a combination of ranking by local density scores , and the ranked list is used for training a classifier to boost the rank list .
Supervised Learning ( SVM-SUP ) : We randomly selected a portion \MATH of the data with annotations to train the classifier ; and then used this classifier to re-rank the remaining faces .
This process was repeated five times and the average performance was reported .
We used a range of portion \MATH values for experiments : \MATH .
Figure \REF shows a performance comparison of these methods .
Our proposed methods ( LDS and UEL-LDS ) outperform other unsupervised methods such as TBL , DBO , and DSG .
Furthermore , the DBO and DSG methods are sensitive to the distance threshold , while the performance of our proposed method is less sensitive .
It confirms that the similarity measure using shared nearest neighbors is reliable for estimation of the local density score .
The performance of UEL-LDS is slightly better than LDS since the training sets labeled automatically from the ranked list are noisy .
However , UEL-LDS improves significantly even when the performance of LDS is poor .
These performances are worse than that of SVM-SUP using a small number of labeled samples .
Figure \REF shows an examples of the top 50 faces ranked using the TBL , DBO , DSG , and LDS methods .
The performance of DBO is poor since a low threshold is used .
This ranks irrelevant faces that are near duplicates ( rows 2 and 3 in Figure \REF( b ) ) higher than relevant faces .
This explains the same situation with DSG .
In Figure \REF , we show the performance of five single classifiers and that of five ensemble classifiers .
The ensemble classifier \MATH is formed by combining single classifiers from \MATH to \MATH .
It clearly indicates that the ensemble classifier is more stable than single weak classifiers . //You use both plural and singular forms of " classifier " here , so it is a bit confusing if you are talking about a single classifier or more than one . I suggest you use the same form throughout if applicable .]
We conducted another experiment to show the effectiveness of our approach in which learned models are used to annotate new faces of other databases .
We used each name in the list as a query to obtain the top 500 images from the Google Image Search Engine ( GoogleSE ) .
Next , these images were processed using the steps described in section \REF : extracting faces , detecting eyes , and doing normalization .
We projected these faces to the PCA subspace trained for that name and used the learned model to re-rank faces .
There were 4 ,103 faces ( including false positives - non-faces detected as faces ) detected from 7 ,500 returned images .
We manually labeled these faces and there were 2 ,342 relevant faces .
On average , the accuracy of the GoogleSE is 57 .08\% .
In Table \REF , we compare the performance of the methods .
The performance of UEL-LDS was obtained by running the best system , which is shown as the peak of the UEL-LDS curve in Figure \REF .
The performances of SVM-SUP-05 and SVM-SUP-10 correspond to the supervised systems ( cf . section \REF ) that used \MATH of the data set , respectively .
We evaluated the performance by calculating the precision of the top 20 returned faces , which is common for image search engines and recall and precision on all detected faces of the test set .
UEL-LDS achieved comparable performance to the supervised methods and outperformed the baseline GoogleSE .
The precision of the top 20 of SVM-SUP-05 is poorer than that of UEL-LDS due to the small number of training samples .
Figure \REF shows top 20 faces ranked using these two methods .
Our approach works fairly well for well known people , where the main assumption that text-based search engines return a large fraction of relevant images is satisfied .
Figure \REF shows an example where this assumption is broken .
Consequently , as shown in Figure \REF , the model learned by this set performed poorly in recognizing new faces returned by GoogleSE .
Our approach solely relies on the above assumption ; therefore , it is not affected by the ranking of text-based search engines .
The iteration of bagging SVM classifiers does not guarantee a significant improvement in performance .
The aim of our future work is to study how to improve the quality of the training sets used in this iteration .
We presented a method for ranking faces retrieved using text-based correlation methods in searches for a specific person .
This method learns the visual consistency among faces in a two-stage process .
In the first stage , a relative density score is used to form a ranked list in which faces ranked at the top or bottom of the list are likely to be relevant or irrelevant faces , respectively .
In the second stage , a bagging framework is used to combine weak classifiers trained on subsets labeled from the ranked list into a strong classifier .
This strong classifier is then applied to the original set to re-rank faces on the basis of the output probabilistic scores .
Experiments on various face sets showed the effectiveness of this method .
Our approach is beneficial when there are several faces in a returned image , as shown in Figure \REF .
A Text Segmentation Based Approach to Video Shot Boundary Detection
Video shot boundary detection is one of the fundamental tasks of video indexing and retrieval applications .
Although many methods have been proposed for this task , finding a general and robust shot boundary method that is able to handle the various transition types caused by photo flashes , rapid camera movement , and object movement is still challenging .
We present a novel approach for detecting video shot boundaries in which we cast the problem of shot boundary detection into the problem of text segmentation in natural language processing . //detecting / determining?
This is possible by assuming that each frame is a word and then the shot boundaries are treated as text segment boundaries ( e.g. topics ) .
The text segmentation based approaches in natural language processing can be used .
The experimental results from various long video sequences have proven the effectiveness of our approach .
Recent advances in digital technology have made many video archives readily available .
Therefore scalable , efficient , and effective tools for indexing and retrieving video are needed .
With a large amount of information encoded in one video , typically the first step of any video processing tools is to segment the input video into elementary shots in which each shot is defined as a continuous frame from a single camera at a given moment .
By breaking down a video into individual shots and then extracting the keyframes from these shots , a 30-minute video containing 54 ,000 frames can be represented by around 500 keyframes ( 108 times smaller ) that are easily manageable for many video applications [in / such as? / including?] indexing , browsing , summarization , and retrieval .
There are many types of transitions between shots .
According to TRECVID 's categorization \CITE , shot boundaries can be classified into two main categories : cut and gradual .
A cut is an abrupt shot change that occurs in a single frame while a gradual is a slow change that occurs over a number of consecutive frames .
With the gradual type , fades and dissolves are common .
A fade is usually a change in brightness with one or several solid black frames in between the key frames , while a dissolve occurs when the images in the current shot get dimmer and the images of the next shot get brighter \CITE .
Figure \REF shows examples of shot boundary types .
Many approaches have been proposed for shot boundary detection .
The simplest approach is to compute the differences between the color distributions of consecutive frames and use a threshold to classify whether a hard cut occurs .
In order to detect gradual transitions , edge change ratios or motion vectors can be used \CITE .
Since these approaches use threshold-based models for detection , their advantage is they are fast .
Nevertheless , they are sensitive to changes in illumination and motion .
Furthermore , they are difficult to generalize for new datasets .
Recent works \CITE use machine learning methods for making decisions and have received impressive results on the test videos of TRECVID \CITE , which is a de-facto benchmark for evaluating the various techniques used in shot boundary detection .
In this study , we propose a new approach that was inspired by the natural language processing text segmentation techniques in which the problem of shot boundary detection is treated similarly to the problem in text segmentation .
Specifically , each frame is considered a word and a set of consecutive frames , forming a shot , is considered a text segment .
Then , the text segmentation problem can be considered a sequential tagging problem in which each word is labeled by one of the following labels :
PRESEG ( word beginning of a segment ) , INSEG ( word inside a segment ) , and POSTSEG ( word outside a segment ) .
Given a sequence of labeled words , the boundary between text segments can be identified .
The remainder of this paper is organized as follows .
In section \REF , we present an overview of our framework .
Section \REF introduces our experiments on different long video sequences from the TRECVID dataset .
Section \REF concludes the paper .
The shot boundary detection process for a given video is carried out through two main stages .
In the first stage , frames are extracted and labeled with pre-defined labels .
In the second stage , the shot boundaries are identified by grouping the labeled frames into segments .
We use the following six labels to label frames in a video : NORM -FRM ( frame of a normal shot ) , PRE -CUT ( pre-frame of a CUT transition ) , POST -CUT ( post-frame of a CUT transition ) , PRE -GRAD ( pre-frame of a GRADUAL transition ) , IN -GRAD ( frame inside a GRADUAL transition ) , and POST -GRAD ( post-frame of a GRADUAL transition ) .
Given a sequence of labeled frames , the shot boundaries and transition types are identified by looking up and processing the frames marked with a non NORM -FRM label .
For example , if we encounter two consecutive frames respectively marked by IN-CUT and POST-CUT , we can declare that a shot boundary occurs at these frames and the transition type is a CUT .
In another case , if we encounter a number of frames marked by xxx-GRAD , we can declare that a GRADUAL shot boundary occurs at these frames .
Figure \REF shows an example of the labeled frames of a shot transition .
To label a frame in a video , we must firstly extract the features for that frame and then use a classifier , which has been trained in advance by the annotated frames , to classify it into one of the six categories mentioned above .
The feature extraction process and classifier learning using a support vector machine ( SVM ) are described in detail below .
We use two typical features , which are the color moments and edge direction histogram , to represent the visual information of each frame .
However , using this representation is not discriminative enough for frame categorization since the frames of a shot transition usually strongly relate to their neighboring frames .
For example , an abrupt change in illumination between two consecutive frames is a strong cue for a hard cut , or one solid black frame in between dark and then bright frames might help to identify a fade shot transition .
Therefore , in this study , we do not directly use the above features .
Instead , we use them indirectly to model the difference and motion between the current frame and its neighboring frames .
In particular , for each frame , we compute \MATH distances between the current frame \MATH and neighboring frames ranging from \MATH .
These distances are used to form a feature vector for frame \MATH in the training and testing process later .
In this way , we can have a unified framework for the shot boundary detection and consequently avoid having to give special treatment to the different shot boundary types as described in many of the works that participated the TRECVID benchmark \CITE .
Color moments have been successfully used in retrieval systems and proved to be efficient and effective in representing the color distributions of images \CITE .
The first order ( mean ) , the second order ( variance ) , and the third order ( skewness ) color moments are defined as :
where \MATH is the value of the \MATH -th color component of image pixel \MATH , and \MATH is the number of pixels in the image .
Edge orientation histogram has also been widely used in shot boundary detection \CITE .
The basic steps for computing the edge orientation histogram features are as follows :
Extract edges from the input image by using Canny edge detector .
Compute a \MATH -bin histogram of edge and non-edge pixels .
The first \MATH bins are used to represent the edge directions quantized at a \MATH interval and the remaining bin is used for counting the non-edge pixels .
The histogram is normalized by the total number of all the pixels to compensate for different image sizes .
We use color moments and an edge orientation histogram to compute the distances between the current frame \MATH and its neighboring frames as follows :
The input image is converted to a LUV color space ( for GCM ) or grayscale ( for EOH ) and then divided into sub-images by a \MATH grid .
The color moments and edge orientation histogram are extracted from these sub-images .
For color moments , there are \MATH values .
For the edge orientation histogram , there are \MATH values for each input frame image .
Compute \MATH values , which are the Euclidean distances between the current frame \MATH and its neighboring frames ranging from \MATH .
In other words , we compute \MATH , where \MATH .
These values \MATH are then used to form the feature vector for frame \MATH .
Support Vector Machines ( SVM ) are a statistical learning method based on the structure risk minimization principle \CITE .
They have been very efficiently proved to be useful in many pattern recognition applications \CITE .
In the case of binary classification , the objective of the SVM is to find the best separating hyperplane with a maximum margin .
The form of the SVM classifiers is : \MATH
where \MATH is the d-dimensional vector of an observation example , \MATH is the class label , \MATH is the vector of the \MATH training example , \MATH is the number of training examples , and \MATH is a kernel function , \MATH is learned through the learning process .
SVMs were originally designed for binary classification .
There are two common approaches for handling multi-class classification .
The first one is the one-against-all method that combines \MATH binary classifiers , where \MATH is the number of classes .
The \MATH SVM classifier is trained using positive samples as examples of the \MATH class and negative samples as the examples of the other classes .
The second one is the one-against-one method that combines \MATH binary classifiers in which each classifier is trained on examples from the two classes .
There are seven classes in our framework : NORM FRM ( frame of a normal shot ) , PRE CUT ( pre-frame of a CUT transition ) , POST CUT ( postframe
of a CUT transition ) , PRE GRAD ( pre-frame of a GRADUAL transition ) , IN GRAD ( frame inside a GRADUALtransition ) , POST GRAD ( post-frame of a GRADUAL transition ) , and NORM-FRM ( normal frame that does not belong to any shot transitions ) .
To train this classifier , we manually annotated frames in the training data . //learn / learn about? / find? / educate? / develop? / train?
Using the trained classifier , we can label a sequence of frames with the tags mentioned above .
A gradual transition usually has a " ` . . . , PRE-GRAD , IN-GRAD , IN-GRAD , . . . , IN-GRAD , POS-GRAD , . . . " ' pattern and a cut transition usually has a " ` . . . , PRE-CUT , IN-CUT , . . . , IN-CUT , POST-CUT , . . . " 'pattern .
The shot boundary detection process is started by checking for these transition patterns in the tagged sequence .
Once a pattern is encountered , PRE-xxx and POST-xxx tags are used to identify the shot boundary and the two ends of the shot transition .
Since the classifier occasionally produces false predictions due to the variations caused by photo flashes , rapid camera movement , and object movement , only using the perfect match between the predefined patterns and sub-sequences usually skips many of the true shot boundaries .
Instead , we use a more flexible matching algorithm in which a match is declared if a portion of the predefined pattern is found in the input sub-sequence .
We used annotated data sets from the TRECVID 2003 test sets for the training and testing .
We divided eight videos , each 30-minute long , into two sets : a training set and a test set .
The number of frames , the number of shot boundaries , and the types of these sets are shown in Table \REF .
Note that , the number of shot boundaries is equal to the number of frames with a PRE-CUT / GRAD label and the number of frames with a PRE-CUT / GRAD label is equal to the number of frames within a POST-CUT / GRAD label .
We used \MATH grid to divide the input image into sub-images .
As for the edge orientation histogram , we used 12-bins for the edge pixels and one bin for the non-edge pixels .
Furthermore , we used 20 neighboring frames before and after the current frame ( \MATH ) for computing the distances .
These parameters were selected from our empirical studies when participating in TRECVID 's tasks .
The extracted features are normalized to zero mean and a unit standard deviation and then stored for training and testing .
Specifically , the normalized vector \MATH
where \MATH is the \MATH-th element of the feature vectors \MATH , respectively , and \MATH is the number of dimensions .
In order to handle the problem of imbalanced training sets where the number of NORM-FRM frames is much larger than other frames , we randomly take the \MATH of NORM-FRM frames and 100\% of the other frames to form the training set .
We use LibSVM \CITE to train the SVM classifiers with a RBF kernel .
The optimal \MATH parameters are found by conducting a grid search with a 5-fold cross validation on a subset of 10 ,000 samples stratified selected from the original dataset .
As for the multi-class classification , LibSVM used the one-against-one approach .
The results that were evaluated by a tool provided by TRECVID with a standard measurements , such as the precision , recall , and F1 score , clearly show that our proposed method significantly outperforms the baseline method and the combination of GCM+EOH obtains the best result .
We evaluated the performance of our system with different choices for taking the number of NORM -FRM frames used in training process . //for / by?
Specifically , we selected three sampling rates \MATH , which were \MATH and \MATH .
As shown in Figure \REF , the best performance was obtained at a sampling rate of \MATH .
In Table \REF , we list the evaluation results when using different features to form the feature vector using the distances between the current frames and their neighbors .
The first one is GCM , the second one is EOH , and the last one GCM+EOH is a combination of the distances using GCM and the distances using EOH .
The number of dimensions of the feature vectors using GCM and EOH was 20 , while that of feature vectors using GCM+EOH was 40 .
We also compared the proposed method with the baseline method that computes the differences in the color histograms between two consecutive frames , and then decides the shot transition by using a predefined threshold .
In Figure \REF , we superimposed our result on the results reported in the shot boundary detection task of TRECVID 2003 .
Our system achieves a high precision and recall for the CUT transition and this result is comparable to the third-ranked system .
Note that our system is general and has no special treatment for particular shot transitions .
Many previous shot boundary detectors usually divide the system into sub-systems in which special treatments are proposed to handle different types of shot transitions .
Therefore , it is generalization is difficult for new test sets .
We have proposed a unified and general framework for shot boundary detection that uses a text segmentation based approach .
Firstly , we label the frames with one of the six labels defined for different types of frames : NORM -FRM , PRE -CUT , POST -CUT , PRE -GRAD , IN -GRAD , and POST -GRAD .
Then we extract the shot boundaries and types from these labeled frames .
In order to label frames , we proposed a new feature type to model the difference and motion in color and the edges between the frames and used it in the classification with SVM classifiers .
The experiments we conducted on various videos from TRECVID 2003 have shown that our approach is effective .
Ent-Boost : Boosting Using Entropy Measures
for Robust Object Detection
Recently , boosting has come to be used widely in object detection applications because of its impressive performance in both speed and accuracy .
However , learning weak classifiers , which is one of the most significant tasks in using boosting , is left to users . //learning / training / identifying / finding?<--Here and throughout , I am not sure that " learning " is the best word choice . If you change it here , it should be changed throughout .
In Discrete AdaBoost , weak classifiers with binary output are too weak to boost when the training data is complex .
Meanwhile , determining the appropriate number of bins for weak classifiers learned by Real AdaBoost is a challenging task because small ones might not accurately approximate the real distribution while large ones might cause over-fitting , increase computation time , and waste storage space .
We have developed Ent-Boost , a novel method for efficiently learning weak classifiers using entropy measures . //method / boosting scheme?
Class entropy information is used to automatically estimate the optimal number of bins through discretization .
Then Kullback-Leibler divergence , which is the relative entropy between probability distributions of positive and negative samples , is used to select the best weak classifier in the weak classifier set .
Experiments showed that strong classifiers learned by Ent-Boost can achieve good performance and be stored compactly . //[be stored compactly / achieve compact storage?]
The results of building a robust face detector using Ent-Boost showed the boosting scheme to be effective .
Building a robust and reliable classifier is always a fundamental problem of pattern recognition .
Several kinds of classifiers , such as neural networks [1] and support vector machines [2] , have been proposed and applied successfully in many object-detection systems .
Boosting [3] and its variants [4] ? [10] have recently gained much attention from researchers because of their excellent performance .
In regard to face detection , for example , the methods described in [4] , [5] , and [10] are state-of-the-art in terms of both accuracy and running speed .
The main idea of boosting is to combine the performance of weak classifiers to form a strong classifier .
Typically , a weak classifier is any classifier whose performance is better than random guessing ( i.e. , its error rate is less than 0 .5 ) .
The performances of these weak classifiers are integrated into the final form of a strong classifier through a learning process in which more accurate weak classifiers have larger weights in final voting .
In practical problems , designing and learning weak classifiers leave practitioners with two main challenges : computational evaluation and discriminant power .
Generally , for efficient computation , the dimensions of the input space of weak classifiers are reduced be to much smaller than those of the strong classifier[s?] .
In object-detection frameworks [4] , [5] , [11] ? [13] , weak classifiers are usually constructed from one or several features .
For example , a weak classifier can be constructed from one Haar wavelet feature that is evaluated very rapidly through an integral image [4] .
Given a feature type , choosing the suitable way to form a weak classifier that balances efficiency and computation is still an open problem [14] .
Two key trends exist for seeking the most discriminant weak classifier .
The first trend is dealing with the problem of how to design features for best representing the target object .
Besides Haar wavelet features [4] , Gabor wavelets [5] , edge orientation histograms ( EOH ) [11] , orientation dominants [12] , scale invariant feature transform ( SIFT )-based high-level features [13] , and local binary patterns ( LBP ) [15] have also been used .
The second trend is studying how to optimally select the best weak classifier from a weak classifier set .
In Discrete AdaBoost [16] , weak classifiers are threshold-functions whose output is restricted to binary data. //[data / values??I think you need a noun here?binary what?]
This leads weak classifiers to be too weak to boost when handling complex data sets .
For example , in later layers of the cascaded face classifiers [4] , the error rate of weak classifiers is between 0 .4 and 0 .5 .
Meanwhile , in Real AdaBoost [3] , a generalized version of Discrete AdaBoost , weak classifiers are piece-wise functions whose output is a real value representing the confidence-rated prediction .
Normally , to construct such weak classifiers , one splits the input space \MATH into non-overlapping blocks ( or subspaces ) \MATH , \MATH , . . . , \MATH so that the predictions of the weak classifier are the same for all instances falling into the same block .
In the case of one-feature-based weak classifiers , this is equivalent to dividing the real line into intervals .
Typically , most current works [5] , [6] , [8] , [10] , [17] split the data into \MATH bins that are equal in width . This method suffers from the following limitations : //[works / systems?]
-The way to choose the appropriate number of bins is undetermined .
Normally , it has been done by trial and error [6] , [17] ? a tedious task .
In the training cascade of classifiers [6] , [17] , when the complexity of the training data changes over time , using the same number of bins for training every layer is not optimal .
-Choosing a large number of bins might cause over-fitting because of outliers in the case of noisy data [18] .
Furthermore , it might lengthen computation and training time and waste storage space , which is critical in applications with limited resources , for example , face detection on mobile phones .
Choosing a small number of bins , however , might not accurately approximate the real densities of the data distribution and could influence the selection of the best weak classifier .
A deterministic method is therefore needed to automatically and optimally choose the number of bins .
This problem can be formulated as a discretization problem in which subspace boundaries are found by some criteria . //[some criteria?This sounds a bit vague . Could you be more specific?]
Among discretization methods , the entropy-based method [19] has been proved most efficient . Hence , we propose using it to solve the problem .
The entropy-based discretization method is an algorithm that automatically selects appropriate thresholds to split feature values into optimal bins by using entropy measurement .
It is a supervised discretization method that takes into account class information and data distribution , so it is generic and can be applied to any kind of input data .
Furthermore , many studies have shown that the discretization process might help to improve performance in induction tasks [18] and it can also work with a weighted data distribution . Therefore , it is most appropriate for boosting-based methods .
Besides learning weak classifiers , selecting the best weak classifier in the large set of weak classifiers in each round of boosting is also important .
Following the method used in [5] , it is done by choosing the weak classifier that maximizes Kullback-Leibler ( KL ) divergence between two distributions of positive and negative samples . // [used / proposed?]
The integration of the entropy-based discretization process and optimal weak classifier selection into the current boosting framework formed a new variant of AdaBoost , called Ent-Boost .
Experiments on building a robust face detector have shown the effectiveness of this new boosting scheme .
Originally , Discrete AdaBoost , proposed by Freund and Schapire [16] , was a learning method of combining weak classifiers to form a strong classier .
Given a training set \MATH , where \MATH and \MATH , a weak classifier \MATH has the form \MATH .
Normally , a weak classifier is any classifier whose performance measured by error rate is less than 0 .5 .
Therefore , in many applications [4] , [5] , [7] , it is simplified by associating with one feature \MATH .
Through boosting processing , weak classifiers are combined into a strong classifier \MATH where \MATH are values that measure the performance of the selected weak classifier .
In the boosting process , a distribution \MATH or set of weights over the training samples are maintained and updated so that subsequent weak classifiers focus on the strong-classified samples . //[hard / strong?]
Real AdaBoost [3] is a generalized version of Discrete AdaBoost in that weak classifiers are real-valued functions instead of binary ones and \MATH is found numerically instead of by predescription . //[This method also involves?NOTE : A method cannot propose something .
Do you mean that the creators of this system proposed this?] designing weak classifiers that partition the input space into subspaces so that the predictions are unique in each subspace .
Such weak classifiers are used widely in current state-of-the-art object detection systems [5] , [8] , [17] .
Suppose that \MATH , \MATH , . . . , \MATH is a partition of the domain \MATH on which such weak classifiers $h$ are defined .
The prediction of \MATH depends only on which block \MATH a given instance falls into .
On the other hand , \MATH for all \MATH .
In the case of one-feature-based weak classifier , the histograms of positive and negative samples are computed as follows \MATH where \MATH .
It is proven in [3] that the most appropriate choice for the prediction of the weak classifier on block \MATH to maximize the margin is \MATH where \MATH is a smoothed value in order to handle cases in which \MATH is very small or even zero .
A summary of the Real AdaBoost algorithm is given in Algorithm 1 .
Real AdaBoost is easy to implement , but in practical applications , designing and learning weak classifiers depend on specific applications .
In such face detection systems as [those described in?] [5] , [6] , [8] , and [17] , weak classifiers are usually associated with one feature .
With a very large number of available features ? hundreds of thousands ? [there are many candidates from which to / many choices must be made to?] select one weak classifier for each round of boosting .
Optimally selecting the suitable weak classifier makes the final strong classifier more robust and efficient .
Furthermore , optimal selection can reduce the number of boosting rounds , thus directly shortening training time .
Most studies so far have been focused on how to measure the discriminant power of weak classifiers in order to select the best weak classifier .
Many measurements have been proposed , for example , Bhattacharyya distance [6] , Kullback-Leibler divergence [5] , and recently , Jensen-Shannon divergence [8] and mutual information [9] ( Table 1 ) .
Meanwhile , few studies have been made on efficiently partitioning subspaces .
As shown in Figure 1 , using a fixed number of bins , strong classifiers trained by the above measures give similar performances . //[measurements / measures?]
However , as section 5 will show , these performances are affected dramatically if different subspace splitting methods are used .
The proposed boosting scheme , Ent-Boost , is an integration of adaptive entropy-based subspace splitting and the symmetric KL divergence-based weak classifier selection .
In Ent-Boost , each weak classifier is constructed from one feature and trained on weighted training samples similar to [those used in?] Real AdaBoost .
However , instead of using the equal-width binning method used in Real AdaBoost [6] , [17] which has a hard time predicting the suitable number of bins in advance , we use the entropy-based discretization method [19] to split the input space into subspaces .
This subspace splitting process is totally automatic ; the stopping criteria of the splitting process are determined using minimum description length principles ( MDLP ) . This process will be described in greater detail in the next section .
To select the best weak classifier from the input weak classifier set , we use symmetric KL divergence as in [5] , which measures the distance between two distributions as follows : \MATH where \MATH and \MATH are probability distributions of a discrete random variable .
This formula can be rewritten in entropy terms : \MATH or \MATH where \MATH and \MATH are entropy and \MATH is cross entropy of \MATH and \MATH .
The outline of Ent-Boost is shown in Algorithm 2 .
Note that the discretization process is performed in every round of boosting to adapt to new distributions of samples .
As a result , the number of intervals of the selected weak classifier varies . //[classifier varies / classifiers vary?]
This is different from previous methods , which fix the number of equal-width intervals in advance .
This section briefly describes automatic subspace splitting using entropy-based discretization .
Discretization is a quantizing process that converts continuous values into discrete values . It typically consists of four steps [18] .
Step 1 : Sorting the continuous values of the feature to be discretized .
Step 2 : Evaluating candidate cut-points and selecting the best cut-point for splitting .
A cut-point is a threshold value that divides the range of continuous values into two intervals ; one interval is less than or equal to the threshold , and the other interval is greater than the threshold .
Step 3 : Splitting the data into two intervals using the cut-point selected in step 2 .
Step 4 : Continuing discretization with each interval until a stopping criteria is satisfied .
The stopping criteria are usually selected by considering a trade-off between lower arity ( the number of intervals or the number of bins ) and its effect on the accuracy of classification tasks .
A higher arity can make the complicate the understanding of an attribute , while a very low arity may damage predictive accuracy .
Given a set \MATH of sorted continuous values \MATH , candidate cut-points are usually selected as mid-points of every successive pair of \MATH .
On the other hand , candidate cut-points are \MATH .
For each cut-point \MATH that splits set \MATH into two subsets \MATH , the class entropy of a subset \MATH is defined as \MATH where \MATH is the number of classes \MATH , and \MATH is the proportion of examples in \MATH that have class \MATH .
To evaluate the resulting class entropy after set \MATH is partitioned into two sets \MATH and \MATH , the class-information entropy of the partition induced by cut-point T is defined by taking the weighted average of their resulting class entropies \MATH he best cut-point selected in step 2 is the cut-point \MATH for which \MATH is minimal amongst all the candidate cut-points .
Given set S and a potential binary partition \MATH , specified on S by the given cut-point \MATH , a stopping criteria is used to decide whether or not this partition should be accepted .
If the answer is YES , the discretization will continue with each partition given by \MATH ; otherwise , the discretization process will stop .
Suppose \MATH is the probability of a \MATH answer , and \MATH is the probability of a \MATH answer .
Partition \MATH is only accepted if \MATH .
However , in practice , there is no easy way to estimate these probabilities directly .
Instead , Fayyad and Irani [19] proposed using MDLP to indirectly estimate them .
The minimum description length of an object is defined as the minimum number of bits required to uniquely specify that object out of the universe of all objects .
To employ MDLP in choosing the stopping criteria , Fayyad and Irani formulated the above problem as a communication problem between a sender and a receiver .
It is assumed that the sender has the entire set of training examples , while the receiver has the examples without their class labels .
The sender needs to convey needed information for the proper class labeling of the example set to the receiver .
It says that the partition induced by a cut-point is accepted if and only if the length of the message required to be sent before the partition is more than the length of the message required to be sent after the partition .
By inferring from coding hypothesis , the stopping criteria is defined as follows : MDLP Criteria :A partition induced by cut-point \MATH for a set \MATH of \MATH examples is accepted iff :\MATH
where \MATH and \MATH where\MATH is the number of classes in \MATH Extensive experiments [18] , [19] recommended that this method should be the first choice for variable discretization because it gives a small number of cut-points while maintaining consistency .
For our experiments , face and non-face patterns were of size 24x24 . //[what is the unit here?]
A set of 10 ,000 face patterns were collected from the Internet .
Another set of 10 ,000 hard non-face patterns were false positives collected by running a cascade of 17 AdaBoost classifiers at different locations and scales on 8 ,440 images with various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
The 10 ,000 patterns in each set were divided into a training set of 6 ,000 patterns and a test set of 4 ,000 examples .
Some examples of the collected 24x24 face and non-face patterns are shown in Figure 2 .
Haar wavelet features , which have been used in many face detection systems [4] , [6] , [14] , were used in our experiments .
These consisted of four kinds of features modeled from adjacent basic rectangles with the same size and shape .
The feature value was defined as the difference of the sum of the pixels within rectangles ( Figure 3 ) .
In total , 134 ,736 features were used for training classifiers .
Figure 4 shows a comparison of the performances of strong classifiers trained by the different boosting schemes : AdaBoost [4] , Real AdaBoost [17] , and Ent-Boost .
Each strong classifier is a combination of 80 weak classifiers ( using more weak classifiers does not much improve the performance ) .
For Real AdaBoost , subspace splitting is done by equal-width binning in which the number of bins is arbitrarily selected to be 64 and 128 .
The curves indicate that the performances of Real AdaBoost and Ent-Boost were better than that of AdaBoost .
In addition , the performance of Real AdaBoost classifiers varied when using different numbers of bins .
Overall , Ent-Boost produced the best result .
As for storage space , the Ent-Boost-based classifier only uses 6 .79 bins on average , which is much fewer than the number used by Real AdaBoost-based classifiers .
Using Ent-Boost , a robust face detector was built .
It was a cascade of Ent-Boost-based classifiers that were trained [through a process similar to that used in] [4] .
The resulting cascade has 25 layers using 3 ,850 features .
The performances of the AdaBoost-based face detector [4] and our Ent-Boost-based face detector on the MIT+CMU test set [1] confirmed the effectiveness of our proposed boosting scheme ( Table 2 ) .
Some detection results are given in Figure 5 .
We have described Ent-Boost , a variant of AdaBoost , which uses entropy measures for automatic subspace splitting and optimal weak classifier selection .
The resultant strong classifier has good performance and achieves compact storage .
Furthermore , this new boosting scheme overcomes the main limitation of Real AdaBoost , which is difficulty in determining the suitable number of bins for subspace splitting .
Because it considers the class information and the distribution of the input data in the splitting process , this method is generic and can be used for other applications .
Experiments have shown promising results , especially in the building of a robust face detector .
ROBUST OBJECT DETECTION USING FAST FEATURE SELECTION FROM HUGE FEATURE SETS
This paper describes an efficient feature selection method which that quickly selects a small subset out of a given huge feature set ; the proposed method for will be useful for building robust object detection systems .
In this filter-based method , features are selected so that not only to maximizeing their relevance with the target class but also to minimizeing their mutual dependency .
As a result , the selected feature set only contains only highly informative and non-redundant features , which significantly improve classification performance when combined together , significantly improve classification performance .
The relevance and mutual dependency of features are measured by using conditional mutual information ( CMI ), in which features and classes are treated as discrete random variables . //[ ,?<--A comma can be used here if the following describes CMI in general .]
Experiments on different huge feature sets have shown that the proposed CMI-based feature selection can both reduce significantly the training time significantly and achieve high accuracy .
One of the fundamental research issues in pattern recognition is feature selection , which is the task of finding a small subset out of a given large set of features .
Improving the method of accomplishing this task is important due to the following three reasons .
First , there are many ways can be used to represent a target object , and this variety leadsleading to a huge feature set .
For example , the number of Haar wavelet features used in [1] for face detection is hundreds of thousands .
However , only small and incomplete training sets are available .
As a result , these systems suffer from the curse of dimensionality and over-fitting .
Second , a huge feature set usually includes many irrelevant and redundant features that can degrade the generalization performance of classifiers , waste storage space , and increase training time [2 , 3] .
Third , selecting an optimal feature subset from a huge feature set can improve the performance and speed of classifiers .
Furthermore , less complex models is are easier to understand and verify .
In face detection , the success of systems such as those in [1 , 4] comes mainly from efficient feature selection methods .
Generally , feature selection methods can be categorized into two kinds : the filter-based approach and the wrapper-based approach [5] .
The filter-based approach is independent of any induction algorithm , while but the wrapper-based approach is associated with a specific induction algorithm to evaluate the quality of the selected feature subset . //[goodness / quality / appropriateness?<--If " goodness " is the word you would usually use in your field for this , it is fine , but I would suggest a different word choice otherwise . " Goodness " seems vague , so in what sense do you mean " good " ?]
In the filter-based approach , features are normally selected based on their individual predictive power . This power is measured by Fisher scores , Pearson correlation [6] , or mutual information [7] .
The major advantage of these measurement methods is their speed and ability to scale to huge feature sets .
However , because the mutual relationships between features is are often not taken into account , leading the selected features might be highly redundant and less informative because two features with high individual predictive power , when combined together , might not bring significant performance improvement . Combining compared with two features of which one of them has low predictive power but is useful when combined with others would thus be more effective for improving performance .
Since wrapper-based feature selection methods use machine learning algorithms as a black box in the selection process , they can suffer from over-fitting in situations of when applied to small training sets . //[when used with / when applied to?]
Furthermore , in practical object detection systems as in [1 , 8] , the feature sets usually have hundreds of thousands of features , so using wrapper-based methods is obviously inefficient because of the very high computation costs they incur .
For example , in the state- of- the- art face detection system in [1] , choosing a 6 ,061- feature set out of a 180 ,000-feature set by using AdaBoost has takentook several weeks . //[by using / generated by?]
Consequently , feature selection methods based on conditional mutual information ( CMI ) based feature selection methods have been proposed [9 , 8 , 7 , 10] to take full advantage of the above approaches for handling large scale feature sets .
The main goal of these CMI-based methods is to select features which that maximize their relevance with the target class and to simultaneously minimize mutual dependency between selected ones . //[idea / goal?]
It doesThese methods do not select a feature similar to ones already selected ones , even if itthe feature is individually powerful , as because selecting it might not do much to increase much information about the target class [7] .
One of the important tasks in using CMI-based methods is mutual information estimation , which involves to computecomputing the probability densities of continuous random variables .
In [9] , Kwak and Choi used a Parzen windows -based density estimation method in which many parameters such as kernel function and window width are complicated to determine .
For simplification , discretizing features is often used on the features . //[discretizing features is often used on the features / the features are often discretized?]
So far , in object detection systems like [8 , 7] treat , features are treated as binary random variables by choosing appropriate thresholds .
However , binarizing features is not a suitable way to handle highly complex data for which it is hard to finding the best threshold is difficult .
Using multiple thresholds to discretize data is better than using a binary approach .
Such a simple method is equal-width binning , which divides the range of feature values into m equally sized bins , where m must be known in advance .
Our method is also a CMI-based feature selection method .
However , the method�fs main distinguishing point is that it employs the entropy-based discretization method [11] to discretize features . //[distinguishing / unique?]
This discretization method is simpler than the Parzen window-s based density estimation method and is more efficient than binary discretization .
Furthermore , contrary to equal-width binning , it can automatically evaluate the optimal number of bins based on data distribution . //[evaluate / determine?]
Experiments show that the proposed method can well capably handle huge feature sets of data such as Haar wavelets [1] and Gabor wavelets [12] for face detection , significantly reducinge the training time while maintaining high classification performance .
FEATURE SELECTION " >
Huge feature sets usually contain four kinds of features : ( i ) irrelevant features , ( ii ) weakly relevant and redundant features , ( iii ) weakly relevant but non-redundant features , and ( iv ) strongly relevant features ; in which ( iii ) and ( iv ) are the objectives of feature selection methods [13] .
To measure the relevance of a feature , an entropy-based measure , which quantifies the uncertainty of random variables , is normally used .
The entropy of a discrete random variable X is defined as : \MATH and the conditional entropy of X after another variable Y is known is defined as \MATH
The mutual dependence between two random variables is measured by mutual information : \MATH .
The conditional mutual information is defined as : \MATH .
In the first step , the most relevant feature F1 , which has the highest largest amount of mutual information , is selected .
However , iIn the second step , however , the condition to select feature F2 is not its mutual information alone , but how much information of F2 can add with respect to the already existing F1 .
Therefore , F2 is selected so that maximizingas to maximize the information it can add :\MATH .
Following the same scheme, we iteratively add the feature that brings the highest increase of the information content contained in the current selected feature set . //[the / an?<-- " An " is correct if there is more than one such measure .]
The next feature Ft to be added at iteration t is defined by :\MATH .
To simply estimate mutual information , the easiest way is to discretize features are discretized in binary values by specifying thresholds [8 , 7] .
However , for complex data , doing thisit is not efficient ; therefore , we use the entropy-based method proposed by Fayyad and Irani [11] for discretization .
This method is a supervised method , thus so it is generic and can adapt very well to any kind of data distributions .
Discretization is essentially a quantizing process that converts continuous values into discrete values .
Suppose that we are given a set of instances S , a feature A , and a cut-point T . ( A cut-point is a threshold value that divides the range of continuous values into two intervals ; one interval is less than or equal to the threshold , and the other interval is greater than the threshold . ) .
The class-information entropy of the partition induced by T is defined as :
Among candidate cut-points , the best candidate cut-point Tmin , which minimizes the entropy function \MATH , is selected to split \MATH into two partitions \MATH and \MATH .
This process can then be repeated recursively forto \MATH and \MATH until some stopping condition is satisfied , thus creating multiple intervals on the feature \MATH .
Using MDLP , the stopping criteria is was proposed by Fayyad and Irani [11] as follows :
MDLP Criteria : A partition induced by cut-point T for a set S of N examples is accepted if : \MATH wWhere \MATH ,where \MATH , \MATH , and \MATH is are the numbers of classes in \MATH , \MATH , and \MATH , respectively .
Extensive experiments [11 , 14] have shown that this method is one of the best in variable discretization one because it gives a small number of cut-points while maintaining consistency .
The outline of the proposed feature selection method is shown in Algorithm 1 .
For experiments , a set of face and non-face patterns of size 24x24 was used .
A set of 10 ,000 face patterns were collected from the Internet .
Another set of 10 ,000 complex non-face patterns were false positives collected by running a face detector based on a cascade of 17 AdaBoost classifiers at different locations and scales on 8 ,440 images that contained no faces ; the images with included various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
The 10 ,000 patterns in each set were divided into a training set of 6 ,000 patterns and a test set of 4 ,000 patterns .
Some examples of the collected 24x24 face and non-face patterns are shown in Figure 1 .
Two types of features ?that are Haar wavelet features and Gabor wavelet features ? were used in our experiments .
Haar wavelet features have been widely used in many face detection systems [1 , 15] .
They consists of four kinds of features modeled from adjacent basic rectangles with the same size and shape . //I�fm not 100 percent clear on what " they " points to here . " These Haar wavelet features , " perhaps? But can features consist of other kinds of features? You may want to clarify here .]
The feature value is defined as the difference of the sum of the pixels within the rectangles .
In total , 134 ,736 features were used for training classifiers .
Gabor wavelet features have also often been used often in face recognition systems [12] and are defined as : \MATH , where \MATH and \MATH define the orientation and scale of the Gabor kernels respectively , \MATH , and the wave vector \MATH , is defined as : \MATH where \MATH , \MATH and \MATH .
The Gabor representation of a face image is computed by convolving the face image with the Gabor filters .
Let \MATH be the face image ; , its convolution with a Gabor filter �� ,_( z ) is defined as : \MATH where \MATH denotes the convolution operator .
Similar to [12] , Gabor kernels at five scales , \MATH , and eight orientations , \MATH , were used .
At each pixel position , 40 Gabor features are computed by convolving the input image with the real part of Gabor filters .
As a result , one \MATH training sample hasthere are \MATH Gabor features for one 24x24 training sample .
To prove the effectiveness of the proposed feature selection method ( CMI-Multi ) , we compared it with two other feature selection methods ?that are forward feature selection ( FFS ) [16] and a CMI-based methods using binary features ( CMI-Binary ) [8 , 7] ? on the data set and feature sets mentioned described above .
All classifiers were trained using AdaBoost similar to [1] .
We chose the forward feature selection proposed by Wu et. al. [16] because it has very impressive results , when not only reducing significantly the training time of the AdaBoost-based face detection systems [1] by ( about 100 times , ) but also maintaining comparable performance .
Figure 2 shows performance of classifiers trained by Haar feature subsets selected by three feature selection methods .
The figureIt indicates that , the proposed method , CMI-Multi , outperforms the others while the performances of FFS and CMI-Binary have were comparable performanceto one another .
The A similar result is was also shown when the three feature selection methods were tested on Gabor wavelet features .
In this case , CMI-based feature selection methods obviously clearly outperformed FFS , and CMI-Multi is was confirmed to be more efficient than CMI-Binary .
Because our proposed method uses same principle as FFS , which only trains weak classifiers once , it is extremely fast compared with AdaBoost [1] .
We built two cascades of AdaBoost classifiers that use CMI-Multi and AdaBoost [1] as feature selection methods .
Testing on the standard benchmark MIT+CMU test set , they hadve comparable performance .
However , CMI-Multi wasis trained faster than was AdaBoost by approximately 70 times .
We have presented a fast feature selection method using conditional mutual information to handle huge feature sets .
The estimation of mutual information is simplified by using an MDLP- based discretization method .
Integrated into AdaBoost-based object detection systems , our proposed methodit can not only reduces the training time significantly , but also achieves high classification performance .
Experiments on two popular feature sets have demonstrated the effectiveness of the proposed method . //[Please note : I am not sure which of the following you mean .--> one composed of such as Haar wavelets and the other composed of Gabor wavelets / ? Haar wavelets and Gabor wavelets ?]
A Multi-Stage Approach to Fast Face Detection
A multi-stage approach that is fast , robust , and easy to train is proposed for a face-detection system .
Motivated by the work of Viola and Jones [1] , this approach uses a cascade of classifiers to yield a coarse-to-fine strategy to significantly reduce detection time while maintaining a high detection rate .
However , our [system / approach?] is distinguished from previous work by two features .
First , a new stage has been added to detect face candidate regions more quickly by using a larger window size and larger moving step size .
Second , support vector machine ( SVM ) classifiers are used instead of AdaBoost classifiers in the last stage , and Haar wavelet features selected by the previous stage are reused for the SVM classifier robustly and efficiently .
By combining AdaBoost and SVM classifiers , the final system can achieve both fast and robust detection because most non-face patterns are rejected quickly in earlier layers , while only a small number of promising face patterns are classified robustly in later layers .
The proposed multi-stage-based system has been shown to run faster than the original AdaBoost-based system while maintaining comparable accuracy .
Face detection is one of the most active research areas in computer vision because of its many interesting applications in fields such as security , surveillance , multimedia retrieval , and human-computer interaction .
For example , face detection is combined with other modules to identify a person in a video sequence [2] .
Face locations , the results of a face detection system , can be used for applications such as face recognition and video indexing [3] .
Although this area has been studied for more than 30 years , developing a fast and robust face detection system that can handle the variations found in different faces in real applications , such as facial expressions , pose changes , illumination changes , complex backgrounds , and low resolutions , is still a challenging research target [4] .
Recently , with advances in machine learning research , neural networks [5] , [6] , support vector machines ( SVM ) [7] , [8] , [9] and AdaBoost [1] , [10] , [11] , [12] , [13] are typical choices for building robust face detectors .
Current research is focusing on feature extractions and appropriate structures for combining classifiers .
Generally , to classify an input pattern of intensities as a face or non-face , features must be extracted and normalized before passing [the image / the pattern / the results?] to a classifier [14] .
Many kinds of features have been used , ranging from simple ones such as intensity values [7] , [5] and eigenspace [15] to complex ones such as wavelets [16] , [1] , [12] , edge orientation histograms [17] , [18] , and Bayesian discriminating features ( BDF ) [19] .
Discriminative and informative features usually increase detection rates and reduce the complexity of training procedures [17] .
In a typical face detector that is scale- and location-free , the number of analyzed patterns is usually very large ( 160 ,000 patterns for a 320x240 pixel image ) because the face classifier has to scan over the input image at every location and every scale .
However , the vast majority of the analyzed patterns are non-face .
Statistics from [9] have shown that the ratio of non-face to face patterns is about 50 ,000 to 1 .
Face detectors based on single classifiers such as SVM [7] , [8] , [9] and neural networks [6] , [5] are usually slow because they equally process non-face and face regions in the input image .
To deal with the problem of processing a large number of patterns , a combination of simple-to-complex classifiers has been proposed [8] , [1] , [9] , [20] , [21] , [11] .
In particular , fast and simple classifiers are [recommended to be?] used as filters at the earliest stages to quickly reject a large number of non-face patterns and a slower yet more accurate classifier is then recommended to be used for classifying face-like patterns .
In this way , the complexity of classifiers can be adapted corresponding to the difficulty in the input patterns . / / [is / can be?]
In [8] , nonlinear SVM classifiers using pixel-based features were arranged into a sequence by increasing the number of support vectors , while in [9] , linear SVM classifiers trained at different resolutions were used for rejection and a reduced set of principle component analysis ( PCA )-based features were used with the nonlinear SVM at the classification stage in order to reduce computation time .
In [1] , AdaBoost-based classifiers were arranged in a degeneration decision tree or a cascade .
Using about 10 features of the first two layers , more than 90\% of non-face patterns were rejected .
Recently , a boosting chain [20] and a nested cascade [11] have also been proposed for improvements .
It is believed that the cascade structure of classifiers is the key factor in enhancement of current real-time face detectors . / / It is believed?This sounds vague?who believes this? " May researchers believe , " for example , would be clearer and sound more believable .]
This work is motivated by Viola and Jones [1] , who proposed a framework for fast and robust face detection .
Their success comes mainly from three contributions :
-The cascaded structure of simple-to-complex classifiers reduces computation time dramatically .
-AdaBoost is used to select discriminative and significant features from a pool of a very large number of features and then construct the classifier .
The output classifier built from these selected features is very fast and robust in classification .
Compared to SVM-based classifiers or neural network-based classifiers , AdaBoost-based classifiers are hundreds of times faster .
-Haar wavelet features used for all stages are informative [22] and can be evaluated extremely quickly due to the introduction of the integral image .
However , this framework still has the following problems :
-First , the cascaded classifiers that use AdaBoost and Haar wavelet features are only efficient in quickly rejecting simple non-face patterns .
To robustly classify complex patterns , it is necessary to use a larger number of features and layer classifiers .
This need is apparent because when face and non-face patterns become hard to distinguish , weak classifiers are too weak to boost [22] .
With the first several layers in our experiment ( cf . Figure 1 ) , using some 800 weak classifiers , more than \MATH of non-face patterns were rejected .
However , enabling the later layers to robustly classify a smaller number of remaining patterns requires many more weak classifiers ( around 5 ,660 ) , thus making the training task much more complicated .
-Second , the training process is complicated .
It requires a long time because the training time is proportional to the number of features in the input feature set ( which is normally hundreds of thousands ) and the number of training samples ( which is generally tens of thousands ) .
In our experiment , with 20 ,000 training samples and 134 ,736 features , the average training time for choosing one feature associated with the weak classifier was about 30 minutes on a PC ( Pentium 4 , 2 .8 MHz , 512-MB RAM ) .
Therefore , training a cascade of classifiers with around 6 ,060 features [1] might take on the order of several weeks .
Another thing that complicates the training process is that AdaBoost-based classifiers are constructed by adding features after each round of boosting , so several training parameters must be tuned manually while training .
In practice , for stopping training a classifier , at least the following three parameters must be determined in advance : minimum detection rate , maximum false positive rate , and maximum number of boosting rounds ( or the number of weak classifiers of each layer ) .
Because the complexity of the training sets varies throughout the layers in the cascade , a way to choose these parameters automatically and optimally has not been determined .
For example , in the first layers , it is quite easy to train a classifier with a minimum detection rate of \MATH and a maximum false-positive rate of \MATH .
However , in later layers , choosing the detection rate of \MATH will give a false positive rate greater than \MATH [22] .
Adding more features directly increases computation time and might cause over-fitting .
The authors therefore propose a multi-stage approach to build a face-detection system by adopting the advantages of Viola and Jones' approach and by introducing a method to address the above problems .
Specifically , for quick rejection of non-face patterns , we have reused two key ingredients of Viola and Jones' system , that is , the cascaded structure of simple-to-complex classifiers and AdaBoost trained with Haar wavelet features .
Furthermore , for robust classification and simple training , we propose using SVM classifiers for later layers .
The contribution of this approach is threefold :
-First , to detect the face candidate regions , a new stage ( using a larger window size and a larger moving step size ) has been added .
We use 36 x 36-pixel window-based classifiers with a moving step size of 12 pixels to quickly estimate the candidate face regions .
The idea of using larger windows and moving the step size was adopted in [5] , but it severely degraded performance .
To improve speed while maintaining high accuracy , our approach takes advantage of the combination of the Haar wavelet features and the AdaBoost learning for fast and robust evaluation .
Second , we have investigated how to efficiently reuse the features selected by AdaBoost in the previous stage for the SVM classifiers of the last stage .
Reusing these features brings two advantages : ( i ) Haar wavelet features are very fast in being evaluated and normalized [1] .
Furthermore , these features do not need to be re-evaluated because they have already been evaluated .
( ii ) By using SVM classifiers with powerful generalization , using too many features in the cascade is avoided , with the important results of saving training time and avoiding over-fitting .
Third , the training time of AdaBoost classifiers has been shortened by using simple sampling techniques to reduce the number of features in the feature set .
Experiments showed that for rejection , the performance gained by using a sampled feature set was comparable to that of a full feature set .
Along with using several SVM classifiers instead of many AdaBoost classifiers in later layers , the total training time has been significantly reduced .
Several studies have worked on addressing the drawbacks of Viola and Jones' system .
Wu et al. [23] used direct feature selection to reduce training time while maintaining comparable performance .
Their idea is to separate the training process into two stages : feature selection and classifier construction .
In Viola and Jones' work , features are selected by the discriminative performance of their associated weak classifiers through the boosting process .
This process is very time consuming because all weak classifiers must be trained every time one feature is selected .
With the new proposal of Wu et al. , weak classifiers are trained only once and features are selected by the direct feature selection method , which directly maximizes the learning objective of the output classifier .
They claim that their method is 100 times faster than Viola and Jones' method .
Another direction is to optimally build the cascade to improve its overall performance .
Sun et al. [24] and [25] proposed a scheme to optimally tune parameters in layer classifiers .
However , their approach is somewhat complicated and is not easy to implement .
Xiao et al. [20] and Huang et al. [11] proposed a boosting chain structure in which subsequent layers utilize the historical information of the previous layers .
This significantly reduces the number of features used in each layer .
Discrete AdaBoost uses a binary weak classifier that is too weak to boost in the case of a hard distinguished dataset .
Studies based on RealBoost [26] , such as [12] , [10] , [27] , and [11] , introduced new kinds of weak classifiers that are stronger than binary weak classifiers .
These new real-valued weak classifiers can effectively discriminate face and non-face distributions , so the total number of features used is also reduced dramatically .
Face detection systems such as [27] and [11] only use around 800 features .
However , the main problem with these systems is how to choose the most appropriate number of bins .
A small number of bins might not accurately approximate the real distribution , while a large number of bins might cause over-fitting , increase computation time , and waste storage space .
However , our system can benefit from this approach when building the rejection stage and can thus reduce the training time even further .
The proposed face detection system consists of three stages that classify a 24x24-pixel window as either a face or a non-face .
To detect faces of different sizes and locations , the detector is applied at every location and scale in the input image with a scale factor of 1 .2 , which is similar to other approaches [5] , [6] , [9] .
An outline of this system is given in Figure 2 .
The first stage is a cascade of classifiers used to estimate face candidate regions by evaluating 36x36 input windows , with a moving step of 12 pixels .
If a 36x36-pixel window is detected as the existence of a face , 144 ( i.e. , 12x12 ) likely face positions are collected and passed to the next stage .
The second stage is a cascade of classifiers used to investigate 24x24 window face candidate locations returned from the previous stage .
The main purpose of designing these two stages is trying to filter out a large number of non-face patterns as quickly as possible before passing complex patterns to the final stage classifier .
This is done by taking advantage of Viola and Jones' approach [1] , in which Haar wavelet features and the cascaded AdaBoost classifiers enable extremely fast computation .
Although the cascade of \MATH AdaBoost classifiers rejects non-face patterns rapidly , it is still influenced by the large number of \MATH patterns that it must process .
For this reason , the first stage , which is a cascade of \MATH classifiers , is added is to decrease the number of analyzed patterns .
To this end , this stage is trained specially to make the classifiers invariant to small face translations .
These classifiers can detect faces that are off-center by up to six pixels in any direction .
An illustration of the difference between 24x24 and \MATH face training samples is depicted in Figure 3 .
The \MATH window is chosen in accordance with the idea in [5] that the classifier can be trained to be invariant to translation by up to \MATH of the original window size .
With this flexible classifier , the moving step size can be increased up to 12 pixels to dramatically reduce the number of analyzed patterns .
The efficiency of this stage will be discussed further in section 6 .3 .
The last stage is a cascade of nonlinear SVM classifiers that reuses features that have been selected by AdaBoost in the second stage classifier .
These feature values are evaluated and scaled to be between 0 and 1 to form a feature vector .
In our experiments , only 100 features were used , making classification faster than it would have been using pixel-based SVM classifiers [8] , [9] .
The same feature set proposed in [1] was used ( cf . Figure 4 ) .
It consists of four kinds of features modeled from adjacent basic rectangles of the same size and shape .
The feature value is defined as the difference of the sum of the pixels within rectangles .
Each feature is parameterized by four parameters : the position within the window \MATH , the width \MATH , and the height \MATH ( cf . Figure 5 ) .
By using integral image definition [1] , the feature values of these rectangles can be computed extremely quickly .
The integral image at location \MATH is defined as \MATH , where \MATH is the integral image and \MATH is the original image .
In practice , \MATH can be computed simply by using the following recurrent function :\MATH , and sum of the pixels within a rectangle can be computed from four integral image values of its vertices , for example , \MATH .
Boosting is used to improve the classification performance of any given simple learning algorithm [28] .
Given \MATH weak classifiers \MATH learned through \MATH rounds of boosting , the strong classifier is formed by a linear combination : \MATH , where \MATH are coefficients found in the boosting process .
Each weak classifier \MATH is associated with a feature \MATH and a threshold \MATH such that the number of incorrectly classified examples corresponding to the weak classifier is minimized : \MATH , where polarity \MATH indicates the direction of the inequality sign .
In each round of boosting , the best weak classifier \MATH that has the lowest error \MATH will be chosen .
The error of each weak classifier is measured with respect to the set of weights over each example of the training set \MATH , where \MATH and \MATH are the respective weight and label of the training example \MATH .
After each round , these weights are updated such that the weak learner will focus much more on the hard examples in the next round .
The main idea of building a cascade of classifiers is to reduce the computation time by giving different treatments to different complexities of input windows ( cf .
Figure 7 ) .
Only input windows that have passed through all layers of the cascade are classified as faces .
Training cascaded classifiers that can achieve both good detection rates and less computation time is quite complex ; a higher detection rate requires more features , but more features correspond to more time needed for evaluation .
To simplify this , the detection rate goal and the false positive rate goal for each layer are usually set beforehand .
Viola and Jones [1] stated that , if the layer classifier has achieved the predefined target goals after 200 features are used , the training process will stop and a new layer will be added .
1 .	<section label= " SVM Classifier " >
The support vector machine is a statistical learning method based on the structure-risk minimization principle .
It has been very efficiently proven in many pattern recognition applications [29] , [8] , [9] .
In the binary classification case , the objective of the SVM is to find the best separating hyperplane with a maximum margin .
The form of SVM classifiers is : \MATH where \MATH is the d-dimensional vector of an observation example , \MATH is a class label , and \MATH is the vector of the \MATH training example .
All the \MATH corresponding to non-zero \MATH are called support vectors .
It is important to choose the appropriate kernel and parameter \MATH in order to obtain the robust SVM classifier .
Although many kernels have been introduced by researchers , the following four kernels are commonly used : \MATH where \MATH , and \MATH are kernel parameters .
Compared to AdaBoost classifiers , SVM classifiers run much more slowly because of the large number of support vectors and the heavy kernel computation .
To control the trade-off between the number of support vectors and errors , Scholkopf et al. [30] proposed using a new parameter \MATH instead of the parameter \MATH .
They proved that the parameter \MATH is an upper bound of the fraction of margin errors and a lower bound of the fraction of support vectors .
The implementations of \MATH and \MATH are provided by LibSVM [31] .
For training , we collected 7 ,500 , 24x24-size face patterns from the Internet . / / size / pixel?
Non-face patterns were generated at different locations and scales from 8 ,440 images with various subjects , such as rocks , trees , buildings , scenery , and flowers , containing no faces .
Some examples of the collected 24x24 face patterns are shown in Figure 8 .
Face patterns for training the 36x36 classifiers were generated by selecting 36x36 windows containing the 24x24 face window of the input image .
Figure 9 shows some examples of 36x36 face patterns that include various kinds of floating positions and backgrounds .
To train the cascade of 24x24 AdaBoost classifiers used in the rejection stage , the same 7 ,500 face patterns were used for all layers .
Non-face patterns of the training and the validating sets of the first layer in the cascade were selected randomly .
Non-face patterns of the subsequent layer classifiers are false positives collected by the partially trained cascade on the set of non-face images .
For each layer classifier , 7 ,500 non-face patterns were used for training and 7 ,500 other non-face patterns were used for validating .
To compare the performance of classifiers , we implemented a full cascade of classifiers trained by AdaBoost , similar to that used by Viola and Jones [1] .
The training parameters of each layer were set as follows .
The minimum of the detection rate was \MATH , the maximum of the false positive rate was \MATH , and the maximum of the number of features in each layer was 200 .
This setting resulted in a face detector that consists of 38 layers with 6 ,360 features .
All experiments were run on a PC ( Pentium 4 , 2 .8 MHz , 512-MB RAM ) .
The training process was terminated when no more false positives were found in the non-face images of the data set .
If \MATH is the number of Haar wavelet features and \MATH is the number of training patterns , the learning time of AdaBoost to train \MATH weak classifiers is roughly [1] .
Therefore , if the number of training patterns is fixed , the learning time can be shortened when either the number of features in the feature set or the number of weak classifiers in the final cascade is reduced .
In our approach , the cascaded classifiers are only used for efficient rejection , so we can reduce both of these numbers in order to keep the training time for the full system reasonable .
As mentioned in section 4 .1 , each feature is parameterized by a tuple of four parameters \MATH . / / If this ( and other places ) do not display with spaces after the commas , spaces must be insert . A comma should always be followed by a space . I recommend checking this carefully throughout .]
A set of features is then formed by changing these parameters in corresponding steps \MATH .
A feature set , on the other hand , is parameterized by \MATH .
One of the simplest ways to sub-sample the feature set is to change parameters \MATH , for example , from a full feature set \MATH to a reduced feature set \MATH .
Because the full feature set is redundant , this sub-sampling is expected not to significantly affect the rejection performance of AdaBoost classifiers .
We carried out experiments to compare the performance of classifiers trained on these two feature sets : the full feature set \MATH , containing 134 ,736 features and the reduced feature set \MATH , containing 14 ,807 features ( excluding features of small size ) .
Two classifiers were trained up to the maximum of 200 features .
The classifier 's threshold was changed to meet the detection rate of \MATH .
The training set contains 7 ,500 face patterns and 7 ,500 non-face patterns .
Rejection performance was evaluated through the false positive rate on a validation test set that contains 500 ,000 non-face patterns .
All non-face patterns were selected randomly from the training set mentioned above .
The results shown in Figure 10 indicate that the performances of these two classifiers were no different , especially when the number of features was large enough , for example , more than 50 .
As a result , by using the reduced feature set , the training time can be shortened to approximately one-ninth .
Another experiment we conducted showed that , for similar performance , an AdaBoost classifier trained on the reduced feature set that uses larger sampling step sizes requires more features than one trained on the full feature set . / / [Do you need a reference here , or is this still talking about the experiments you report in this paper?]
Therefore , only the sampling parameter \MATH was used in training the 24x24 AdaBoost classifiers .
In our system , the first stage is a cascade of classifiers that processes 36x36 patterns with a moving step size of 12 pixels .
By taking advantage of simplification in training classifiers only for rejection , as demonstrated in section 6 .2 , training this cascade only uses the feature set generated from a 36x36 window with sampling parameters \MATH .
As a result , 12 ,223 features are produced .
The training set contains 12 ,000 face patterns and 12 ,000 non-face patterns .
Since a 36x36 face sample contains a large proportion of background outside the 24x24 face region and the classifier is required to be fast and to keep all possible face regions , a minimum detection rate of \MATH and a maximum of false positive rate of \MATH were set as the training parameters .
In our experiments , after reaching 50 features , the classifier 's performance did not significantly increase , so the maximum number of features for each layer is set to 50 .
To keep a balance between computation speed and robustness , the maximum number of layers is set to three because using more layers would degrade the overall detection rate dramatically .
Figure 11( a ) shows several features of the first 36x36 layer classifier selected by AdaBoost .
They are somehow similar to the features of the first 24x24 layer classifier as shown in Figure 11( b ) . / / [somehow?This sounds vague . How are they similar?]
In addition , Figure 12 shows an example of face candidate regions estimated by using this cascade .
Two main issues surrounding the reuse of features selected by AdaBoost are : ( i ) which layer�fs features should be reused for SVM and ( ii ) how many features should be used .
For comparison of the performance of SVM classifiers , 2 ,450 face patterns and 7 ,500 non-face patterns that were separated from the training set ( section 6 .1 ) were used .
The SVM classifiers were trained with a RBF kernel whose parameter \MATH is \MATH .
The parameter \MATH was set to \MATH .
These parameters were found by using a cross-validation test .
Figure 13 compares the performance of classifiers trained on 200-feature sets selected by different layers in the cascade ( layers 14 , 17 , 20 , and 25 ) .
These comparable performances suggest that the second stage ( using AdaBoost ) can be switched to the final stage ( using SVM ) at any time .
As a result , the total training time of the system can easily be controlled .
To determine the number of features is that would be sufficiently robust , we used the 200-feature set selected in layer 17 to generate different subsets of features with different numbers of features .
Features in each set were selected in the order in which they were added in the training process .
For example , a 25-feature set consists of the first 25 features selected by AdaBoost when training layer 17 .
The results shown in Figure 14 indicate that with more than 100 features , the performance of the classifiers was comparable . / / [to what?]
Basically , the speed of a SVM classifier is proportional to the number of features used , so the greater the number of features used , the slower the classifier will be .
Figure 15 shows the processing speed of SVM classifiers using different subsets of features .
The SVM classifier using 25 features ran the fastest , while the SVM classifier using 200 features was the slowest .
The speeds of SVM classifiers using 100 , 125 , and 175 features were not importantly different because their difference in terms of number of features and number of support vectors were not large enough to have a significant impact .
Therefore , 100 features might be the best trade-off between speed and performance .
We carried out an experiment to show the efficiency of a single SVM classifier over a cascade of AdaBoost classifiers .
In this experiment , 40 ,000 false positives were gathered by running a cascade of 17 AdaBoost classifiers ( CAB17 ) on the set of non-face images mentioned in section 6 .1 .
These false positives then were used as hard non-face patterns to train and test the performance of two classifiers : a single RBF SVM classifier and a cascade of other 18 AdaBoost classifiers .
Of 40 ,000 non-face patterns , 7 ,500 non-face patterns were used along with 7 ,500 face patterns to train these two classifiers .
The remaining 34 ,000 non-face patterns and other 2 ,450 face patterns were used to compare the accuracy of the classifiers .
The cascade of AdaBoost classifiers were trained with the parameters set as in section 6 .1 .
The RBF SVM classifier reused 100 features selected by the last layer of CAB17 as the feature vector and was trained by an RBF kernel whose parameter \MATH is \MATH .
The parameter \MATH was set to \MATH .
These parameters were found by using a cross-validation test .
The result shown in Figure 16 demonstrates that with hard classified patterns that later layers of the cascade will process , the single SVM classifier can achieve higher accuracy than the cascade of AdaBoost classifiers trained by roughly predefined training parameters . / / ?NOTE : I believe that I hyphenated this term in your previous document , but after seeing it used here , I would say that it does not need to be hyphenated. My apologies for any confusion . A better way to express this , however , might be " patterns that have been classified as difficult " or " patterns shown to be difficult to classify .]
Furthermore , the training time of a single SVM ( which takes several hours ) is much shorter than that of a cascade of AdaBoost classifiers ( which might take several weeks ) .
The final system consists of three stages .
In the first stage , the cascaded 36x36 classifiers consist of three layers , making for a total of 120 features .
The second stage consists of 17 layers with 2 ,160 features .
Compared to the system with 6 ,061 features used in [1] , our system uses fewer features and can thus save significant training time ; the training time needed using the new system is approximately 27 times shorter / approximately 27 rounds of training are needed in the new system . / / <--I think that the first choice here is your intended meaning , but please check carefully .
The final stage is a cascade of three SVM classifiers that take 100 features of the last layer in the second stage as the feature vectors .
Each SVM classifier was trained by using 7 ,500 face patterns and 7 ,500 non-face patterns .
The same 7 ,500 face patterns were used in training all these SVM classifiers .
By running the cascade of AdaBoost classifiers of the second stage on the set of non-face images , 40 ,000 false positives were collected and used as non-face patterns to train the SVM classifiers .
The 7 ,500 non-face patterns used to train the first SVM classifier were selected randomly from the 40 ,000 non-face patterns .
Non-face patterns in the subsequent SVM classifiers were false positives collected by the partially cascaded SVM classifiers on these 40 ,000 non-face patterns .
To control the number of support vectors , the parameter \MATH was used instead of the parameter \MATH .
All SVM classifiers were trained by using the RBF kernel with \MATH .
All these parameters were found by using a cross-validation test tool provided by LibSVM [31] . / / ?NOTE : I believe that I hyphenated this term in your previous document , but after seeing it used here , I would say that it does not need to be hyphenated
This training procedure yielded three SVM classifiers whose numbers of support vectors are 4 ,725 , 5 ,043 , and 4 ,847 .
The average evaluating speed of a SVM classifier is approximately 610 WPS ( windows per second ) .
We tested our system on the MIT+CMU frontal-face standard test set [5] , which consists of 124 images with 480 frontal faces ( excluding images containing hand-drawn , cartoon , and small faces ) .
The configuration and rejection performance of the classifiers are listed in Tables 1 and 2 .
The first row presents the number of features of each layer and the second row shows the fraction of the remaining patterns after each layer were processed . / / [fraction / percentage?<--Here and after , you use " percentage " in the graph , so you may want to keep the same term here .]
The last row indicates the fraction of time that each layer consumed . / / [fraction / percentage?]
All these statistics were extracted by running the classifiers on the MIT+CMU test set .
The fraction of the remaining patterns on these two tables indicates that most of the non-face patterns , i.e. , \MATH , were rejected by the first stage , the cascade of 36x36 AdaBoost classifiers .
When the first 24x24 layer classifier was added to the cascade of 36x36 classifiers , this combination rejected 85 .91\% of analyzed patterns compared to \MATH of using only the first layer of the single cascade of 24x24 classifiers .
Furthermore , the rejection of this very large number of patterns was done extremely quickly , only using \MATH of the total processing time . / / [the total / the standard?]
It also shows that most of the processing time used by the AdaBoost+SVM system , \MATH , was used for SVM classifiers .
The detection rate and speed of the classifiers with ten false positives are listed in Table 3 .
It is clear that our multi-stage system ran faster than the single cascade of 24x24 AdaBoost classifiers while achieving comparable detection rates .
This performance was possible for three reasons .
First , the cascade of 36x36 AdaBoost classifiers rejected many of non-face patterns extremely quickly , while slow SVM classifiers only processed a very small number of the remaining patterns .
Second , many images in the MIT+CMU test set contain large portion of background , which [9] mentioned has a ratio of non-face to face patterns of about 50 ,000 to 1 .
Experimental results showed that the AdaBoost+SVM system ran faster than that of the original AdaBoost on \MATH of the total number of images in this test set .
Third , at a small number of false positives , some true face candidate regions rejected by 36x36 classifiers did not severely affect the final performance because they might also be rejected by 24x24 classifiers in later layers .
Some detection results are given in Figure 17 .
We have developed a method to build a fast and robust face detection system based on a multi-stage approach .
The cascaded structure of AdaBoost-based classifiers in the two first stages allows the system to best adapt to various complexities of input patterns , while nonlinear SVM classifiers at the final stage are robust enough to achieve good results .
Extensive experiments demonstrated that a significant computation time is devoted to potential face regions because almost all non-face patterns are rejected quickly by the two first stages , and only a very small number of face-like patterns are processed by the slow SVM classifiers . / / [are / need to be?]
Discriminant Haar wavelet features selected from AdaBoost are used for all stage classifiers to take advantage of their efficient representation and fast evaluation .
Unsupervised Face Re-Ranking By Mining the Web and Video Archives
It is necessary to utilize visual information to improve the efficiency of retrieval in image-search engines that use textual information for indexing .
One popular approach has been to learn visual consistency between images returned by these search engines .
Most state-of-the-art methods of learning visual consistency usually learn one specific classifier for each query to re-rank the returned images .
The main drawback with these methods is that they require computational cost and processing time that are unsuitable for handling a large number of queries .
We propose a method in which one generic classifier is learned and is then used for all queries .
Different from query-specific based methods that learn classifiers for recognition concepts encoded in each query , the generic classifier in our method learns relevance between images and the query for re-ranking purposes .
The key contribution of this research is to introduce a query-dependent feature to represent this relevance and an unsupervised method of collecting training samples to learn the generic classifier .
The generic classifier is built automatically and is independent of existing ranking algorithms for input search engines .
The experimental results demonstrated that the proposed method performed very well in various datasets .
Image searches are essential for many search engines .
Most existing image-search engines usually use text information to determine relevance , resulting in poor precision .
To improve the accuracy of retrieval , it is necessary to use visual information from images to re-rank them .
However , understanding content-based images remains a challenging and unsolved problem .
In addition , using visual information requires much greater computational cost than using text .
One popular approach \CITE combining both text and visual information has been to use text information to quickly retrieve a set of candidates and then do post-processing ( i . e . , re-ranking ) on this set to improve precision .
There are two ways of doing post-processing : The first \CITE has been to build a ranker or a classifier specific to the given query using the returned images .
Building such classifiers involves large computational cost and time .
As a result , this way is not scalable for applications that process very large numbers of queries .
The second way \CITE has been to build a generic classifier once and then use it for all new queries .
This is more scalable and can be used for practical applications such as meta-search engines .
We pursued the latter way to solve the problem with face retrieval in which the system enables users to search people's appearances by their names .
Our system re-ranks the faces returned by text-based search engines with a generic classifier that is trained in advance using visual information before returning them to the user .
Building such generic classifiers requires two problems to be solved : finding a good query-relative representation of faces and collecting a large labeled dataset to train the classifier .
Our contribution by addressing these problems is two-fold :
-We propose a general framework for re-ranking faces returned by existing text-based search engines .
We learn a relevance classifier that classifies whether an input face is relevant to the associated query or not in this framework .
The output scores returned by this classifier are used to re-rank the faces .
The more relevant a face is to the query , the higher score is .
This approach is different from existing ones \CITE that learn a classifier to recognize the identity of the returned faces .
For example , it recognizes a face as the appearance of 'personX' or not the appearance of 'personX' .
Instead , the relevance classifier is learned to classify a face being relevant or irrelevant to the query .
As this classifier is independent of the identity of faces , it can be shared for multiple queries ( cf . Figure \REF ) .
We propose a novel representation for each face that models the relevance between that face and the query .
Once this query-dependent feature for each face is extracted , one relevance classifier can be shared by the faces of various queries .
The experimental results demonstrated that the relevance classifier that is independent of the underlying ranking algorithms of existing search engines could significantly boost performance .
-We propose a simple yet efficient mining technique of automatically collecting labeled data to train the generic classifier .
We specifically detected and grouped faces of people appearing in video programs in face tracks in which each face track contained the faces of one person .
To distinguish the face tracks of different people , we assumed that if multiple faces were detected at different locations in one frame , they would be of different people ( cf .
Using this assumption , we collected face tracks whose faces were detected in the same frames to guarantee that each face track was associated with one unique person .
We used video programs from multiple genres and channels to increase the number of such face tracks .
We could artificially generate face sets from these faces similar to the sets returned by search engines given people's names .
Since we knew the relevance of these faces to the artificial sets , the labels for each face could be easily generated and no human intervention was needed in this process .
Note that the labels of faces in our approach did not identity those faces but the relevance between the faces and the associated query .
Collecting training sets from such external sources as video archives is easy and efficient because , first , a large number of videos can be easily obtained .
For example , people can record broadcast videos from different channels within a certain period .
Second , a huge number of faces can be obtained by applying a face detector to all frames .
In addition , the faces of one person appearing in consecutive frames can be automatically grouped with a high degree of accuracy using temporal information .
It is essential for image-search engines to find relevant images with a high degree of precision given queries described by text , e.g. , 'airplane' or 'George Bush' .
Existing image-search engines usually use textual information associated with images such as filenames , image captions , and surrounding text for ranking that leads to poor precision .
To improve precision , visual information is used to re-rank the returned images .
The idea is to rely on the visual consistency between these images to learn visual classifiers that measure the relevance between an image and the input query .
There have been different approaches \CITE to re-ranking images containing general objects and faces returned from text-based search engines .
Work \CITE has extended to topics on models using probabilistic Late Semantic Analysis , Latent Dirichlet Allocation , or the Hierarchical Dirichlet Process to learn generative model-based classifiers .
These models can handle noisy image data to some degree .
However , they have many parameters that need to be tuned such as the number of topics and feature configurations .
In addition , how the best topic is selected associated with the input query to identify the target label is still a difficult issue \CITE .
Textual information has been used to build a text ranker to re-rank the returned images \CITE .
The top images in this ranked list were used as positive samples to train visual classifiers using SVM ( Support vector machines ) .
This method made the training data cleaner and led to improved performance .
A multiple-instance learning framework has been used to learn category models from images associated with keywords \CITE .
The returned images were treated as a positive bag .
Negative bags were collected from image sets corresponding to unrelated keywords .
The learned model was used to re-rank the images .
These researchers re-ranked images containing general objects .
Gaussian mixture models have been used for re-ranking faces to build face recognizers and apply these recognizers back to the input faces for re-ranking \CITE .
Discriminative-approach-based models such as SVM and linear discriminant analysis have been used instead of Gaussian mixture models \CITE .
A densest-graph-based method has been used for finding the face group relevant to the query \CITE .
One specific classifier is built for each query in these approaches .
Therefore , many classifiers must be built , which are not suitable in practice , to handle a large number of queries .
Only one generic classifier has been built in advance \CITE and then used for all queries .
This generic classifier was a relevance classifier that learned relevance between an image and the query .
Each image for specific classifiers is classified as 'class-A' or 'non-class-A' , where 'class-A' is the category associated with the query , e.g. , 'airplane' .
In other words , each specific classifier is associated with one class label implied by the query .
Each image in a generic classifier is classified as relevant or irrelevant to the query .
Therefore , it is independent of class labels and can be used for any query .
This method works well for objects such as cars and flags , but fails to handle faces .
Our method was inspired by the generic-classifier-based approach .
We extended it in two ways : first , query-dependent features specific to faces are proposed , and second , the training data for learning the generic classifier are collected automatically by mining video archives .
Given a set of faces returned by any search engine for a queried person ( e.g. , 'George Bush' ) , our task is to re-rank these faces to improve precision .
To this end , we extract query-dependent features for each face and then use the generic classifier trained in advance to predict scores representing the relevance between that face and the query .
These scores are sorted and used for re-ranking .
The ranked list is then returned to users as shown in Figure \REF( b ) .
This approach is different from the existing approaches \CITE shown in Figure \REF( a ) in which one specific classifier is built for each query .
To build a specific classifier for re-ranking faces returned by the query of 'personX' , each face is represented by a query-independent feature such as pixel intensity around facial features such as the eyes , nose , and mouth \CITE .
The label for each face is 'personX' or 'non-personX' meaning that it is relevant or irrelevant to 'personX' .
Further , each face is represented by the query-dependent feature to build a generic classifier that is independent of any 'personX' .
The label for each face is relevant or irrelevant to the query .
The query-dependent feature is used to encode this relevance .
Query-dependent features using textual information has been proposed \CITE .
Each feature was treated as binary indicating the presence or absence of query terms in the textual data associated with the input image , e.g. , filenames , image titles , and nearby text .
Extending this query-dependent feature to use visual information is not trivial since we cannot compute the presence or absence of query terms such as 'George Bush' in each face .
Each image in \CITE is represented as a set of visual words .
The top- \MATH visual words that are strongly associated with the set of returned images for the query are selected .
The binary features for each image are computed by evaluating the presence and absence of these visual words in that image .
Since this method is suitable for general objects rather than faces , we propose another method of extracting query-dependent features to train the generic classifier that is described below .
We assumed that there would be visual consistency between faces returned by search engines for a query to be able to model the relevance between a face and that given query .
In the other words , we assumed faces that were relevant to the query would form the largest cluster .
Note that finding such clusters is still difficult since the number of clusters is not known in advance and the accuracy of clustering algorithms always depends on the discriminative power of feature representation .
This assumption is widely accepted in most of the work in this field \CITE .
We consider the problem of finding relevant and irrelevant faces in the input set to be the problem of outlier detection \CITE that is popular in the data-mining community .
We first describe several distance-based methods of outlier detection that use the distance to the \MATH -nearest neighbors to determine observations as outliers or non-outliers .
Then , adaptation is proposed to form a query-dependent feature .
Given threshold \MATH , for each point \MATH , we examine the number of points \MATH so that \MATH , where \MATH is the distance ( e.g. , Euclidean distance ) between \MATH and \MATH in the feature space .
This number of points \MATH is called the neighborhood score of \MATH and is defined as : \MATH where \MATH is the total number of points in the input dataset .
A low value for \MATH indicates \MATH is a candidate of outliers , while a high value for \MATH indicates \MATH is a member of one strong association cluster .
In practice , it is difficult to know \MATH because this depends on the underlying distribution of the input dataset .
For each point \MATH , find its \MATH -nearest neighbors \MATH ; the distance score of \MATH is the sum of the distances between \MATH and its \MATH -nearest neighbors \MATH and is defined as : \MATH
Points with larger values for \MATH have sparser neighborhoods and are more likely outliers than points belonging to dense clusters , which usually have lower values for \MATH .
Similar to the nearest neighbor score , it is difficult to determine the appropriate \MATH value for each dataset .
We consider the generic classifier as an outlier classifier that classifies an input sample as an outlier or a non-outlier .
Each face in our framework is a sample , and non-outliers / outliers mean faces are relevant / irrelevant to the query ( i.e. , target person ) .
As described above , the \MATH and \MATH of outliers and non-outliers might have the distributions in Figure \REF ; these scores can be used as feature values to discriminate non-outliers from outliers .
From this observation , the feature vector is formed by varying parameters such as \MATH and \MATH in the formula of \MATH and \MATH as follows : \MATH .
It requires a sufficient number of training samples to train the relevance classifier using supervised learning methods such as SVM .
The simplest way \CITE of collecting training samples is to pick many names , and pass them to search engines .
After collecting the returned faces , we manually label each face as to whether it is relevant to the input query or not .
This is a tedious task and involves a human-labor cost .
We propose another approach to automatically collecting training samples to train the relevant classifier .
This approach consists of two steps .
First , by mining video archives , we automatically collect a set of faces of \MATH different people \MATH , where \MATH is the set of faces of person \MATH , and \MATH is the number of people .
Second , we generate a set of subsets \MATH , where \MATH is the set of faces that is picked from \MATH , and \MATH is the number of subsets .
The restriction is that the assumption of visual consistency is satisfied .
In other words , as seen in Figure \REF , \MATH might have several face clusters and the largest cluster is equivalent to the faces relevant to the query if they are returned by a search engine .
As a result , this method can be used to stimulate face sets returned by search engines using many names as mentioned above .
To obtain \MATH , we use a simple technique for faces extracted from video archives .
We specifically use the following heuristics to pick a set of different people appearing in video archives :
-If there is more than one face appearing in different locations in one frame , they are likely to belong to different people .
Figure \REF shows an example where this has occurred .
-If two people appear in video programs broadcast by different broadcast stations ( e.g. , CNN , MSNBC , and CCTV ) , they are likely to be different .
If we have large video archives , we can collect a sufficient number of training samples to learn the relevance classifier by using these heuristics .
We form face set Generating \MATH by picking a subset of faces of Generating \MATH and randomly adding faces from other sets Generating \MATH .
To keep satisfying the assumption of visual consistency , the number of faces selected in each set Generating \MATH must be smaller than the number of faces in set Generating \MATH .
We then label faces in set Generating \MATH as relevant to the query associated with Generating \MATH , and the other faces of Generating \MATH as irrelevant to the query .
Once the training samples are collected , we use SVM with a linear kernel to learn the relevance classifier .
TRECVID dataset : We collected all video programs from the TRECVID 2006 dataset \CITE .
There were 527 video programs broadcast on seven channels in three languages including English , Chinese , and Arabic .
We extracted faces from these video programs and grouped faces belonging to one person in each shot in one face track using a similar method to that described in \CITE .
We scanned all face tracks for each channel extracted from the videos broadcast by this channel , and picked face tracks extracted from key frames where several faces were detected at different locations .
To guarantee selected face tracks representing different people , only the face tracks from one shot were picked for one channel .
As a result , there were 5 ,126 faces of 19 face tracks selected from the seven channels corresponding to 19 different people .
Note that the system did not know the identity of these faces .
It only knew any two face tracks represented different people .
The number of faces in these face tracks is shown in Figure \REF .
We generated the 133 labeled sets described in Section \REF using these face tracks and used them to train the relevance classifier .
Yahoo News Images : This dataset consists of approximately half a million news photos and captions from Yahoo News collected over a period of roughly two years \CITE .
Using people�fs names as queries , we applied a simple string search to the captions in this dataset to return a list of faces for each queried name .
We used 23 names of celebrities such as George W .
Bush , Vladimir Putin , Ziang Jemin , Tony Blair , and Abdullah Gul .
These names have widely been used in experiments \CITE .
A total of 9 ,136 faces were retrieved in which 3 ,909 faces were relevant .
The accuracy was \MATH on average .
Google Images : We used the same set of people�fs names used in the Yahoo News Images dataset and input them into the Google Image Search Engine .
We crawled a maximum of 500 images from URLs returned by Google for each query .
A total of 9 ,516 faces were extracted in which 5 ,816 faces were relevant .
The accuracy was \MATH on average .
The TRECVID dataset was used for training the generic classifier .
The datasets for Yahoo News Images and Google Images , as shown in Figure \REF , were used for testing .
We used the Viola-Jones face detector \CITE to detect frontal faces in images and video frames .
We simply used a similar technique to that described in \CITE to group faces belonging to one person in one video shot .
Using prior knowledge that faces of the same person in consecutive frames do not change much in locations and appearance , the technique used tracked points to robustly associate these faces in face tracks with a precision of \MATH .
Once faces were extracted , we used the code provided by the authors \CITE to extract features .
Each face was then represented as a point in a very high dimensional feature space .
Nine facial-feature points were specifically detected for each face , and four more facial feature points were inferred from these nine points .
There were a total of 13 feature points from which features were extracted .
The features were intensity values lying within a circle with a radius of 15 pixels .
The output feature had 13x149 = 1 ,937 dimensions .
Figure \REF illustrates this feature .
We evaluated the efficiency of retrieval with measures that are commonly used in information retrieval , such as precision , recall , and average precision .
Given a queried person and letting \MATH be the total number of faces returned , \MATH the number of relevant faces , and \MATH the total number of relevant faces , recall and precision can be calculated as : \MATH .
Precision and recall were only used to evaluate the quality of an unordered set of retrieved faces .
Average precision is usually used to evaluate ranked lists in which both recall and precision are taken into account .
The average precision is computed by taking the average of the interpolated precision measured at 11 recall levels of 0 .0 , 0 .1 , 0 .2 , . . . , 1 .0 .
The interpolated precision , \MATH , at a certain recall level , \MATH , is defined as the highest precision found for any recall level \MATH :
In addition , we used the mean average precision to evaluate the performance of multiple queries , which is the mean of average precisions computed from queries .
We compared the performance of the Maximum A-Posteriori ( MAP ) algorithm in seven systems in this experiment by testing it on YahooNews Images :
-DistScore-TrainGoogleImages : The training set was the set of annotated faces returned by Google Images Search for 23 people�fs names .
The feature vector was computed using \MATH .
-NNScore-TrainGoogleImages : The training set was the same as DistScore-TrainGoogleImages .
The feature vector was computed using \MATH .
DistScore-TrainTRECVID : The feature vector was computed using .
The training set was the set of annotated faces artificially generated with our method described in Section \REF .
-NNScore-TrainTRECVID : The training set was the same as DistScore-TrainTRECVID .
The feature vector was computed using \MATH .
-Krapac[11]-TrainGoogleImages : The training set was the same as DistScore-TrainGoogleImages .
We re-implemented the method proposed by Krapac et al. \CITE of extracting the query-dependent feature .
Since this method was proposed to handle images , not faces , we modified it to handle faces .
Each face was specifically represented as a bag of visual words .
We used 13 facial-feature points detected in each face and their descriptors using pixel intensity as visual words .
The codebook was formed by clustering all visual words extracted from all faces of the training set into 200 clusters .
The top-$k$ visual words strongly related to the returned faces of each query and the binary feature vector were computed as described in \CITE .
-Mensink[15]-GaussianModels : This method proposed by Mensink et al. \CITE modeled the returned faces by using two Gaussians , the first for the faces relevant to the target person and the second for the remaining faces .
-Mensink[15]-Friends : This method proposed by Mensink et al. \CITE used linear discriminant analysis to train a specific classifier for each query .
This method used detected people�fs names in captions associated with faces for query expansion to model faces of the target person 's friends .
Methods such as Mensink[15]-GaussianModels and Mensink[15]-Friends are state-of-the-art that learn a specific classifier for each query .
Krapac[11]-TrainGoogleImages is similar to our method in which one generic classifier is trained in advance and then used for new queries .
Figure \REF compares the performance of these systems when they were tested on the YahooNews Images dataset .
The curves plot the correlation between performance and the number of features for systems such as DistScore-TrainGoogleImages , NNScore-TrainGoogleImages , DistScore-TrainTRECVID , and NNScore-TrainTRECVID .
-DistScore performed significantly better than NNScore .
-The performance of DistScore and NNScore was not affected by selecting the number of features .
Therefore , we could use small numbers of features to reduce the computational cost .
-The performance of the system using training data generated artificially with our method was comparable to that of the system using training data returned by search engines .
-The method of DistScore-TrainTRECVID we propose performed comparably to the state-of-the-art method in the specific classifier-based approach of Mensink[15]-Friends .
It outperformed the method where only visual information was used , i.e. , Mensink[15]-GaussianModels .
-Our proposed method DistScore-TrainTRECVID outperformed the method proposed by Krapac et al. , which was customized to handle faces .
As seen in Figure \REF , DistScore-TrainTRECVID outperformed the original ranking of the Google Images Search Engine if from 20 to 50 features were used .
The results for DistScore-TrainTRECVID on the YahooNews Images set and Google Images set indicate that the relevance classifier with our proposed method was able to generalize well on different queries and was independent of underlying ranking algorithms used in search engines .
Figure \REF shows an example of re-ranking results for the top-30 faces for the query John Paul , which is one of the most difficult cases in the YahooNews Images set .
The results clearly demonstrate that our proposed method outperformed the other state-of-the-art methods .
Our query-dependent feature was based on the nearest neighbors of images in the returned image set that usually have a complexity of \MATH , where \MATH is the total number of images in the set .
However , recent studies on indexing techniques such as \MATH -d tree , locality sensitive hashing ( LSH ) , and a Self Adaptive Set of Histograms ( SASH ) \CITE could significantly speed up the nearest neighbor search .
For example , the complexity of the fast lookup of $k$ approximate nearest neighbors is \MATH \CITE .
Studying other techniques to speed up the process of query-feature extraction is our next step in future work .
We have presented a novel method of re-ranking face images returned by existing search engines .
Instead of training a specific classifier for each new query , we only trained one generic classifier and used it for ranking new queries .
This helped make the ranking application more scalable .
We propose a simple unsupervised method to train the generic classifier to obtain a large number of labeled faces from video archives .
It uses temporal information to group faces belonging to one person in one shot into one track .
Several heuristics are employed to guarantee that a subset of face tracks has the correct labels used in the training process .
Experiments revealed that although our method is unsupervised and independent of underlying algorithms in existing search engines , it successfully learned visual consistency between returned faces to boost efficiency of retrieval .
Enhancing mathematical searches with names of formulas
We present a method to enhance the performance of a mathematical search system .
By targeting mathematical formulas that appear in natural language documents , we collect the names of formulas from the surrounding text and incorporate the correspondence into the search system 's database .
The effectiveness of the approach is demonstrated through experiments using Wikipedia mathematical articles and Wolfram Functions Site data sets .
The mathematical content being published on the Web is increasing day by day , and retrieving mathematical content has become an important issue for many users .
Teachers , students , and researchers need better access to mathematical resources for teaching , studying , and obtaining information for research and development .
Moreover , users need specialized search systems to find formulas that are relevant to their needs .
Internet search engines can detect particular keywords in mathematical formulas but they mostly fail at recognizing mathematical symbols and constructs such as integral and square root symbols , fractions , and matrices .
There are some mathematically oriented search engines on the Internet .
Although such engines provide more accurate and relevant results , they usually do not provide enough information for the user .
Furthermore , these systems do not take into account the semantics of mathematical formulas as revealed by the surrounding natural language text , e.g. , the formula�fs name or the description of its variables .
The Digital Library of Mathematical Functions ( DLMF ) project is a mathematical database available on the Web [8] .
This site provides a major resource of mathematical reference data for special formulas and their applications .
But even this site does not provide a full mathematical search .
Other systems that support mathematical searches are MathFind [4] , MathWebSearch [3] .
These systems , however , provide neither similarity structures nor semantic meanings of their formulas .
The Wolfram Functions Site [7] contains a large number of mathematical formulas and also provides a semantic search for them .
This site and some recent work done by Adeel et al. [2] and Yokoi and Aizawa [1] employ similarity search methods based on MathML but they do not make use of the semantics of the formulas' surrounding text . //[ ? ? propose is unclear in the sense of a website .]
The work presented in this paper focuses on retrieving mathematical formulas on the Web by using mathematical expressions and the surrounding natural language text .
We describe our work toward creating a mathematical database that contains formulas , their names , variable descriptions , and other related information .
We implemented a mathematical search system that uses this information as its base knowledge .
This information is very helpful when performing mathematical search by reducing the need for formula input and solving the notational variation problem where mathematically equivalent formulas follow different notations .
The relationship between formulas and their names can also be used to correct errors in mathematical OCR systems , such as Infty [5] .
It also provides opportunities to make mathematics better understandable and usable for people with disabilities .
The remainder of this paper is organized as follows : we present an overview of our framework in section 2 .
We then describe the results of our experiments in section 3 .
Section 4 concludes the paper and gives avenues of future study .
Mathematical formulas on the Web have many different formats , e.g. , LaTeX and Mathematical Markup Language ( MathML ) [6] .
This diversity makes searches more difficult .
In this paper , we shall use the MathML format for mathematical formulas .
Formulas with other formats can be easily converted to MathML format by using freely available tools .
For our work , we used LaTeXML Converter , which is freely available at \URL .
We automatically collected our mathematical formulas from Wikipedia and the Wolfram Functions Site .
Figure 1 shows a page from a mathematical section on Wikipedia and the information we retrieved on this site , besides the mathematical formulas .
We used heuristics to ensure adequate matching of mathematical formulas with their names .
These heuristics are based on the type settings and distances between the name strings and formulas on the same page .
After collecting mathematical formulas from these resources , we extracted keywords for indexing .
The keywords included formulas' names , operators , variables' names , and so on .
Our system allows two ways of searching : text content and formula content .
In a text content search , users search with extracted keywords , e.g. , " sin " , " Pythagorean " or " trigonometric functions " .
In a formula content search , users directly input the formulas , for example : \MATH .
The system then looks for relevant formula names .
If found , it will return other information related to that formula .
If nothing matching is found , it looks for mathematical formulas which are similar to the input ( including formulas with a similar structure ) .
Evaluating a mathematical search system is not an easy task because we do not have any standard for this task .
The similarity between mathematical formulas is very subjective .
We consider that formulas with the same semantic meaning are relevant . //[The original is unclear the rewrite seems to be what you mean .]
For example , while searching for sin( a ) , we also consider results containing arcsin or cosin .
Our experiments were conducted on a collection of about 16 ,000 mathematical docu-ments on Wikipedia and about 155 ,000 mathematical formulas on the Wolfram Functions Site .
To show the effect of linking the formula with its name , we also set up an experimental search system without using the formula 's names .
Table 1 shows the top 5 search results for the query " sin( a + b ) " .
As can be seen , when the system associates the formulas with their names , it can provide more useful information to the user .
The system also allows the user to input the formula 's name directly .
Table 2 shows the top 10 results for the query " Pythagorean " .
Note that at this time , when the user submits a query that does not match any function 's name in our database , the system can not return anything .
We presented a new framework for mathematical searches where links between formulas and their names are automatically detected in the target documents and then utilized in the search .
Due to unavailability of a standard corpora to evaluate mathematical search systems , our evaluation at this moment remains subjective and limited .
We believe that our approach of incorporating information other than the mathematical formulas themselves showed promising results .
The experimental results showed how helpful this information is to mathematical search users .
However , this is only a first step ; many important issues are left for future study .
Using a formula 's name is only one way of taking into account the semantic meaning of the formula ; we are considering other information such as the formula 's description and its variable 's description .
Currently , our system uses only the links between formulas and their names in the same article .
Therefore , linking formulas across articles should also be taken into account .
Automatic approach to understanding mathematical expressions using MathML Parallel Markup corpora
This paper explores the use of MathML Pallel Markup Corpora for automatic understanding of mathematical expressions , the task of which is formulated as a translation from Presentation to Content MathML Markups . // <the use of capitals implies that these are software applications like PowerPoint or Word . I assume this is the right idea .> .
In contrast to previous research that mainly relied on manually encoded transformation rules , we use a statistical-machine-translation-based method to automatically extract translation rules from parallel markup corpora .
Our study shows that the structural features embedded in the MathML tree can be effectively exploited in the sub-tree alignment and the translation rules extracted from the alignment give a boost to the translation system .
Experimental results on the Wolfram Function Site show that our approach is an improvement over prior rule-based systems . // <Note : It seems that where were two prior systems that were compared . If not , you can go back to using a prior system .> .
One of the most significant discussions regarding the digitization of mathematical and scientific content and its applications is about semantic enrichment of mathematical documents , that is , adding or associating semantic tags - usually concepts - with mathematical expressions .
By encoding the underlying mathematical meaning of an expression explicitly , it is possible to interchange information more precisely between systems that semantically process mathematical objects .
The direct application of this idea enables semantic searches for mathematical expressions whereby the system 's �eunderstanding ' of the intent of the searcher and the contextual meaning of mathematical terms improves search accuracy .
It also benefits computer algebra systems , automatic reasoning systems and multi-lingual translation systems .
However , as is the case with natural language , semantic enrichment of mathematical expressions is a non-trivial task .
- First , mathematical notation , though more rigorous than natural language , is nonetheless at times ambiguous , context-dependent , and varies from community to community .
- Second , the underlying mathematical meaning of an expression needs to follow a semantic markup in a semantically rigorous way .
Because of this , in failing to follow the constraint , the computer might not be able to process that expression .
- The third problem is that new notations tend to be introduced and used when needed so a mechanism is required for referring to mathematical concepts outside of the base collection .
The aim of this paper is to describe a method of automatic semantic enrichment for mathematics that is capable of analyzing and disambiguating mathematical terms .
In our research , MathML \CITE Presentation Markup is used to display mathematical expressions and MathML Content Markup is used to convey mathematical meaning .
The semantic enrichment task then becomes one of generating Content MathML outputs from Presentation MathML expressions .
There are three reasons why we chose MathML markup in our research .
- First , since its first release in 1997 , MathML has grown to become a general format that enables mathematics to be served , received , and processed in a wide variety of applications .
- Second , MathML can be used to encode both mathematical notations and mathematical content .
- Last , large collections of formulas are available in MathML , and we can easily assess these collections .
- In the scope of this paper , we only make use the information within a mathematical expression for disambiguation when translating it into content markup .
The prior solution to this problem is SnuggleTeX \CITE , which was proposed by David McKain .
The system uses rule-based methods for disambiguation and translation .
This solution has two main limitations :
- Since it is a hand-written rule-based system , SnuggleTeX requires mathematical knowledge and human effort to develop .
- Due to the diversity of mathematical expressions , SnuggleTeX is still considered experimental and has difficulty processing complicated mathematical symbols and expressions .
In this paper , we propose an approach that automatically learns semantic inferences in a presentation from parallel markup data . // <The original has too many from to be logically clear . The rewrite is a guess . > .
This approach is based on statistical machine translation .
The underlying mathematical meaning of an expression is inferred from the probability distribution $ p( c | p ) $ that a semantic expression $ c $ is the translation of a presentation expression $ p $ .
The probability distribution is automatically learned from both Presentation and Content MathML markup data , that is , parallel markup MathML data .
The data used in this study was collected from the Wolfram Function Site \CITE .
We also prepared other parallel markup MathML data by annotating mathematical expressions in 20 papers from The Archives of the Association for Computational Linguistics \CITE ( ACL-ARC ) .
There are two main contributions in this paper :
- First , we successfully applied machine translation techniques to solving the problem of mathematic semantic enrichment .
Experimental results show that our system significantly outperforms the current rule-based system and it can handle a lot of practical cases in the semantic enrichment problem .
The quantity and quality of mathematical expressions are continuing to grow , and we believe that our system will be able to cover most mathematical expressions .
- Second , mathematics knowledge such as a symbol 's meanings or structural relations is automatically learned while training ; therefore , the system requires no human effort or expertise , and it is easier to update with more data .
Since new notations keep cropping up , it is important to update the system as quickly as possible .
We performed a ten-fold cross validation on mathematical expressions from six categories of the Wolfram Functions Site to evaluate the effectiveness of our learning method .
We performed another experiment to assess the correlation between the system 's performance and training set size and found that increasing the size of the training data boosted the system 's performance .
We also performed an extensive comparison with prior work \CITE using a data set collected from ACL-ARC scientific papers .
Our experimental results show that our approach works well in dealing with the mathematics semantic enrichment problem and it outperforms the previous work by making significantly fewer errors .
The remainder of this paper is organized as follows : In Section 2 , we give a brief overview of the background and related work on semantic enrichment of mathematical expressions .
We present our method in Section 3 and describe the experimental setup and results in Section 4 .
Section 5 concludes the paper and gives avenues for future work .
Since mathematical formulas contain both mathematical symbols and structures , a special markup is required for their representation .
Until recently , images have been used to represent mathematical formulas on the web .
This type of display does not need any markup language to decode the formulas , but it is hard to process them .
A way of dealing with mathematical formulas in this format is to convert them into another text-based format , for example , InftyReader \CITE .
\TeX{} has been used to encode mathematical formulas in scientific documents .
A formula is printed in a way a person would write by hand , or typeset the equation .
In some web pages , such as on the Wikipedia site , formulas are displayed in both image and \TeX{} formats .
The best known open markup format for representing mathematical formulas for the web is MathML \CITE , which was recommended by the W3C math working group .
It provides a standard way of representing mathematical expressions .
It is an XML application for describing mathematical notations and encoding mathematical content within a text format .
MathML has two types of encoding , content-based encoding , called Content MathML , dealing with the meaning of formulas , and presentation-based encoding , called Presentation MathML , dealing with the display of formulas .
The illustration trees of the Presentation and Content Markup of the expression $ C_{-\frac{17}{2}}= \tilde {\infty} $ are depicted in Figure \REF and Figure \REF .
Besides MathML , there are other markups such as eqn \CITE , OpenOffice .
org Math \CITE , ASCIIMathML \CITE , and OpenMath \CITE , but these markups can be converted into MathML by using freely available tools .
There are not many studies on the semantic enrichment problem .
In this section , we list some of the work on exploiting the meanings of mathematical expressions .
Grigole et al. \CITE proposed an approach to understanding mathematical expressions based on the text surrounding the mathematical expressions .
The main idea of this approach is to use the surrounding text for disambiguation based on word sense disambiguation and lexical similarity .
First , a local context C ( five nouns preceding a target mathematical expression ) is found in each sentence .
For each noun , the system identifies a Term Cluster ( derived from the OpenMath Content Dictionary ) with the highest semantic similarity according to a similarity metric .
The similarity scores obtained are weighted , summed up , and normalized by the length of the considered context .
The Term Cluster with the highest similarity score is assigned as the interpretation .
The approach was evaluated on 451 manually annotated mathematical expressions , and the best result was an F_{0.5} $ score of 68.26 $ .
To deal with the meanings of mathematical formulas , Nghiem et al. \CITE proposed an approach for extracting names or descriptions of formulas by using the natural language text surrounding them .
The most accurate extraction result using data from Wikipedia was $ 68.33 $ percent .
There are two other projects that deal with the semantic meaning of mathematical expressions .
The first is the SnuggleTeX project \CITE , which provides a free and open-source Java library for converting fragments of LaTeX into XML including Content MathML .
The other project is Lamapun \CITE .
This project investigates semantic enrichment , structural semantics , and ambiguity resolution in mathematical corpora .
Unfortunately , there are no evaluations of these systems .
To translate mathematical expressions from the Presentation MathML into Content MathML format , a list of translation rules is required .
Building these translation rules by hand is a large undertaking .
Our task is inherently domain-specific ; therefore , we devised an approach based on statistical machine learning for automatically extracting rules from a dataset .
Statistical machine translation ( SMT ) is by far the most widely studied machine translation method .
SMT uses a very large data set of good translations , that is , a corpus of texts which have already been translated into another language , and it uses those texts to automatically infer a statistical model of translation .
The statistical model is then applied to new texts to make a translation of them .
Tree-based or syntax-based SMT can be used for tree-to-tree translation but it has two drawbacks when it is applied to the problem of translating Presentation into Content MathML .
- The first drawback is that tree-based SMT focuses on generating surface texts rather than tree structures .
Mathematical expressions have strict structures , and it fails to fulfill this requirement .
- The second drawback is there are many long mathematical expressions in real-world data and translating long and complex sentences has been a critical problem in machine translation .
To overcome these limitations , we made two separate rule sets : fragment rules and translation rules .
The details are described in the next section .
The framework of the system is shown in Figure \REF .
The system has three main modules .
- Preprocessing : This module processes MathML expressions by removing error expressions or format tags with no semantic meaning .
- Rule Extraction : This module is given a dataset containing MathML parallel markup expressions , and it extracts translation rules from it . // <The original is ungrammatical and unclear . The rewrite is a guess .> .
- Content MathML Generation : This module is given mathematical expressions in Presentation MathML markup and a set of rules , and it generates Content MathML expressions to enrich the Presentation MathML expressions .
The presentation elements of Presentation MathML are divided into two classes : token elements and layout schemata .
Token elements represent the identifier 's names , function 's names , numbers , etc. // <the identifier 's names means there is one identifier with possibly many names . If this is what you want to say , it is okay . If not , maybe you mean simply " identifier names " . ><Likewise , maybe you mean " function names " .>
Layout schemata build expressions out of parts .
After investigating data on the Wolfram Function Site , we noticed that there are elements that have no specific meaning ; they are used for display purposes only and most of them are layout schemata .
For example , the $ <mtext> </mtext> $ or $ <mspace / > $ tags are used to insert some space between expressions .
Another example is pairs of parentheses ; these are used to indicate that the expressions in the parentheses go together , despite that their structure already encodes that information . // <The original is unclear . The rewrite is a guess . > .
This preprocessing step removes these elements .
We also remove mathematical expressions with error markups such as expressions that have no Content markup .
For simplification , expressions with more than 200 content nodes are also removed .
In the training phase , we use GIZA++ \CITE for aligning Presentation MathML terms and Content MathML terms .
Based on the aligned data , we use heuristics to extract rules that we call " fragment rules " .
Fragment rules are rules that define the translation from the Presentation MathML sub-trees to the Content MathML sub-trees .
These rules are used to break up a large Presentation MathML tree into smaller sub-trees while maintaining the structure of the output Content MathML trees .
These rules are extracted based on the fact that translating a small tree is easier than translating a large one .
Each rule in the fragment rule set is associated with a probability , that is , the frequency at which a rule occurs in the training data .
Once the sub-trees cannot be broken down further , we start to extract other rules , which we call " translation rules " .
We enhance the translation rule set with translation terms extracted by GIZA++ .
The pseudo code for extracting fragment rules is described in Algorithm \REF .
In the previous steps , we get two sets of rules , a fragment rule set and a translation rule set .
We then use these rules for translation .
Given mathematical expressions in Presentation MathML markup , the system will generate Content MathML markup for each expression .
- First , the expression is preprocessed to remove non-semantic elements .
- Second , the fragment rule is applied to the expression until it cannot be divided any further .
- Third , the small sub-expressions in Presentation MathML markup are translated into sub-expressions in Content MathML markup by using the translation rule set .
If no translation rule is found for a sub-expression , that expression is marked as untranslated .
- Last , sub-expressions in Content MathML markup are grouped to form the complete Content MathML expression .
Before the last step , we add a heuristic translation to translate numbers .
The reason for this is that there is an infinite number of rules . // <The rewrite is a guess .> .
The translation algorithm is described in Algorithm \REF .
The experiments were carried out using datasets from the Wolfram Function site .
This site was created as a resource for educational , mathematical , and scientific communities .
It contains the world 's most encyclopedic collection of information about mathematical functions .
All formulas on this site are available in both Presentation MathML and Content MathML format .
The datasets we used contain 205 , 653 mathematical expressions belonging to six categories .
All of these expressions have both MathML Presentation and Content Markups .
Training and testing were performed using ten-fold cross-validation ; for each category , the original corpus was partitioned into ten subsets .
Of the ten subsets , a single subset was retained as the validation data for testing the model , and the remaining subsets were used as training data .
The cross-validation process was repeated ten times , with each of the ten subsets used exactly once as the validation data .
The ten results from the folds then were averaged to produce a single estimation .
To prove the effectiveness of our models with real data , we conducted another experiment on the mathematical expressions in scientific papers .
Currently , we have 20 papers from the ACL archive , and we manually annotated all of the math expressions in these papers with both Presentation Markup and Content Markup . // The original is somewhat vague . The rewrite is a guess . Use it if it is correct . > .
We called this data ACL-ARC .
In the first experiment , the data was not compatible with SnuggleTeX since SnuggleTeX uses ASCII MathML but the Wolfram Functions site does not .
In the second experiment with ACL-ARC data , we compared our model with SnuggleTeX .
Table \REF lists the various data statistics .
Given a Presentation MathML expression $ e $ , we assume that tree $ A $ is the correct Content MathML tree of expression $ e $ and tree $ B $ is the output of the automatic translation .
The basic idea to evaluate the correctness of tree $ B $ is directly comparing it with tree $ A $ .
In the experiments , we extended the conventional definition of " Translation Error Rate " and used a metric which is a combined version of
- the Tree Edit Distance \CITE : the tree edit distance is the minimal cost to transform A into B using edit operations .
There are three types of edit operation : substituting a node , inserting a node , and deleting a node .
- the Translation Error Rate \CITE : the translation error rate is an error metric for machine translation that measures the number of edits required to change a system output into one of the references .
We called the new metric the Tree Edit Distance Rate ( TEDR ) .
TEDR is defined as the rate between ( 1 ) the minimal cost to transform a tree A into another tree B using edit operations and ( 2 ) the maximum number of nodes of A and B . // <The " rate between " is unclear to me . Do you mean , " the ratio of " >
It can be computed using Eq . \REF .
For example , the output tree using the translation system for the expression $ C_{-\frac{17}{2}}= \tilde {\infty} $ is depicted in Figure \REF .
Compared with the reference tree in Figure \REF , we need to substitute X nodes , insert Y nodes , and delete Z nodes , so that $ TED( A , B ) = x $ , while the maximum number of nodes of the two trees is y .
Therefore , $ TEDR( A \rightarrow B ) = \frac{x}{y} = z $ .
It appeared that SnuggleTeX was not applicable to the data from the Wolfram Function site since it uses ASCII MathML but the site does not .
Therefore , we could not do a comparison on this data .
Our experimental results show that our approach gives reasonable results , that is , a 20 percent TEDR with large training data .
For small data ( less than 3000 training samples ) , the results vary from 50 to 75 percent TEDR .
For ACL-ARC data , the experimental results show that our system significantly outperforms SnuggleTeX in terms of the Tree Edit Distance Rate .
Our system had a 24 percent lower TEDR in comparison with SnuggleTeX .
To investigate the correlation between the TEDR score and training set size , we set up an experiment using mathematical expressions in the Elementary Functions category .
We started with one fifth of the data and increased the data by one fifth in each run .
Our experimental results conformed with the theoretical analysis that the more training data we have , the better the results are .
Table \REF and Table \REF show the TEDR of our method on the Wolfram Functions Site data and in comparison with SnuggleTeX on ACL ARC data , respectively .
Table \REF and Figure \REF shows the correlation between TEDR score and training set size .
We discussed the problem of semantic enrichment of mathematical expressions .
Our experimental results show that our approach based on the statistical machine translation method for translating a Presentation MathML expressions to Content MathML expressions is a significant improvement over prior systems .
As we mentioned before , mathematical notations are context-dependent .
That means we need to consider not only surrounding expressions but also the document that contains the notations in order to generate the correct semantic output .
In the scope of this paper , we only considered the first sort of context information .
Since this is a first attempt to translate from Presentation to Content MathML using a machine learning method , there is room for further improvement .
Possible improvements are
- Increasing the training data so the system can cover more mathematical notations
- Expanding the work by incorporating the surrounding information of mathematical expressions , for example , definitions or other mathematical expressions .
Our approach combining automatic extraction of fragment rules and translation rules has shown promising results .
The experimental results confirm that it would be helpful for automatic understanding of mathematical expressions .
However , this is only a first step ; many important issues remain for future studies .
Currently , our system deals with a limited range of mathematical notations .
In the future , we should consider expanding it to cover all mathematical notations .
Improving protein coreference resolution by simple semantic classification
Current research has shown that major difficulties in event extraction cases for the biomedical domain are related to coreference .
Therefore , coreference resolution is believed to be useful for improving event extraction .
To address coreference resolution in molecular biology literature , the Protein Coreference ( COREF ) task was arranged in the BioNLP-ST 2011 , as a supporting task .
However , the shared task results indicated that transferring coreference resolution methods developed for other domains to the biological domain was not straightforward , due to the domain differences in the coreference phenomena .
We studied the contribution of domain-specific information , including information that indicates the protein type , in a rule-based protein coreference resolution system .
In particular , the domain-specific information is encoded into semantic classification modules for which the output is used in different components of the coreference resolution .
We compared our system with the top four systems in the BioNLP-ST 2011 ; surprisingly , we found that the minimal configuration had outperformed the best system in the BioNLP-ST 2011 .
Analysis of the experimental results revealed that semantic classification , using protein information , had contributed to an increase in performance by 2.3 % on the test data , and 4 .0% on the development data , in F-score .
The use of domain-specific information in semantic classification is important for coreference resolution .
Since it is difficult to transfer domain-specific information across different domains , we need to continue to seek methods to exploit and use it in coreference resolution .
While named entity recognition ( NER ) and relation / event extraction are regarded as standard tasks for biomedical information extraction ( IE ) , coreference resolution [ 2 , 16 , 30 ] is being recognized more and more as an important component of IE to achieve a higher performance .
Without coreference resolution , oftentimes , the IE performance issubstantially limited , due to the abundance of coreference relations in natural language text ; information pieces written in text with the involvement of a coreference relation are hard to be captured [ 9 , 14 ] .
There have been several attempts for coreference resolution ; in particular , they have been for newswire texts [ 7 , 8 , 22 , 23 , 28 , 30 ] .
Coreference resolution is also one of the lessons from the BioNLP Shared Task ( BioNLP-ST , hereafter ) 2009 , in which it was communicated that coreference relations in biomedical text substantially hinder the progress of fine-grained IE [ 10 ] .
To address the problem of coreference resolution in molecular biology literature , the Protein Coreference ( COREF ) task was arranged in BioNLP-ST 2011 as a supporting task .
This task definition focuses on protein , as a specific type of entity .
Figure 1 shows an example text segmented into four sentences , S2 - S5 , where coreferential expressions are shown in brackets .
In the figure , protein names P4 - P10 are highlighted in boldface ; the targeted anaphoric expressions of the shared task ( pronouns and definite noun phrases ) are T29 , and T32 , for which the antecedents are indicated by arrows , if found in the text .
In the example , the definite-noun-phrase expression , this transcription factor ( T32 ) , is considered coreferential with the protein mention p65 ( P10 ) .
Without knowing this coreference relation , it becomes difficult to capture the information written in the phrase , nuclear exclusion of this transcription factor , which is a localization of p65 ( out of nucleus ) , according to the framework of BioNLP-ST .
The terminologies used in this paper are similar to those in [ 25 ] .
A new term introduced in the BioNLP-ST is antecedent protein , which indicates the protein mention contained in the antecedent expression , e.g. , p65 in T28 .
There are other coreferential expressions , which are ignored in the context of this COREF task , such as : this complex and the NF-kappa B transcription factor complex ( Figure 1 ) , since our focus is on the antecedent expressions that contain and point to protein mentions .
The best system in the COREF shared task , according to the primary evaluation , found 22 .2% of the anaphoric protein references at the precision of 73 .3% ( 34 .1% F-score ) .
The results are promising , since the authors make use of an external coreference resolution tool originally built for the news domain , without much domain adaptation on the main coreference resolution algorithm .
Modifications are mostly made to the markable detection component and post-processing for the output coreference links [ 11 ] .
However , the external coreference tool " s performance drops for biological texts than for news texts , from 66 .38% to 49 .65% in MUC-score [ 11 , 27 ] , which is supposed to be caused by domain differences .
A detailed analysis on the _nal submission of the COREF task participants was reported in the organizer 's papers [ 15 , 31 ] , and is summarized in table 2 .
In this analysis , the submitted predictions on the test data set of the COREF shared task are analyzed according to four types of anaphoric expressions : DNP for definite noun phrases , RELAT for relative pronouns , PRON for other pronouns including personal , possessive , and demonstrative pronouns , and OTHER for catch-all type .
Examples of the coreference types are outlined below :
- " [ . . . ] the phosphorylation status of [ TRAF2 ] had significant effects on the ability of [ the protein ] to bind to CD40 , " ( DNP )
- " Subnuclear fractionation reveals that there are [ two ATF1 isoforms , which ] appear to differ with respect to DNA binding activity , " ( RELAT )
- " This ability of [ CIITA ] to facilitate promoter occupation is undissociable from [ its ] transactivation potential , " ( PRON )
An analysis of the results indicated that the best resolution results for definite noun phrases ( the DNP type ) , and several pronouns of the PRON type was 27 .5% F-score and 10 .1 F-score , respectively ; the scores were much lower than the F-score for relative pronouns ( the RELAT type ) , which yielded a 66 .2 % F-score .
Thus , it can be inferred that it is more difficult to resolve definite noun phrases and pronouns than relative pronouns .
The top four official results of the COREF shared task are presented in the top four rows of Table 2 .
In this paper , we compare the contributions of different features in coreference resolution ; two simple types of domain-portable information : discourse preference and number-agreement , is compared , as well as domain-specific information , which is considered to be more difficult to be transferred across different domains .
We implemented a protein coreference system that makes use of syntactic information from the parser output , and protein-indicated information encoded in rule-based semantic classification .
Experimental results showed that domain-specific semantic information is important for coreference resolution , and that simple semantic classification using semantic features helped our system to outperform the best-reported system results in the shared task .
In order to acquire insight into the problem , we took a rule-based approach , analyzing the training data of BioNLP-ST 2011 Coref task .
The performance of the system evaluated on the official test dataset of the COREF task shows a significant improvement over the official winning system of the task .
This section presents the overview and the performance evaluation of our system .
Figure 2 shows the overall design of the system , which includes five main components : preprocessing , markable detection , anaphor selection , antecedent candidate selection , and antecedent prediction .
Processing of each component is briefly described below .
More details of implementation can be found in the method section .
Step 0 - Preprocessing : The input text is preprocessed using NLP tools for sentence segmentation , and syntactic parsing .
We used the Genia Sentence Splitter and Enju Parser [ 15 ] for sentence segmentation and syntactic parsing , respectively .
( Enju parser comes with a default tokenizer and part-of-speech tagger for biological text . ) Row 1 in the example of Table 1 shows three sentences as the output from the Genia Sentence Splitter , and noun phrases as the output from the Enju Parser for the sentence , S3 .
Due to the limited space , only a part of the phrases are shown in the table .
The full parse tree for this sentence is separately shown in Figure 3 .
Step 1 - Markable detection : Text chunks that are candidate coreferential expressions , which are also called markables following the jargon of MUC-7 , are collected .
For the set of markables , noun phrases , which do not include a subordinate clause , are collected as they are analyzed by a syntactic parser ( in our case , Enju ) .
Pronouns are also collected as markables .
Then , for chunks that share the same head word , which is normally the main noun of a noun phrase , only the longest chunk is taken .
Since the Enju parser outputs head-word information for every noun phrase , we make use of this information for our processing , without any modification .
The third row of Table 1 shows the result of markable detection for the sample text .
In the sentence S3 , three noun phrases recognized by the NX and NP tags of the Enju output , role , role for c-Myc in apoptosis , and this role for c-Myc in apoptosis ( Step 0 results ) share the same head-word role ; thus , only the longest noun phrase , this role for c-Myc in apoptosis , is selected .
However , between studies and studies using . . .
apoptosis , the former chunk is selected , since the latter contains a subordinate clause .
Step 2 - Anaphor selection : Candidate anaphoric expressions , which are basically pronouns and definite noun phrases , are determined . A minority of anaphors are indefinite noun phrases or entity names , which act as appositions .
The system first considers all pronouns and definite noun phrases in the markable set as anaphors .
Then , several filters are applied to remove anaphors that are not relevant to the task definition .
We implemented two types of filters : syntactic and semantic .
Syntactic filters are used to filter out pleonastic its , or pronouns , like : he , she , which are not expected to refer to proteins .
Moreover , because our task focuses on protein references , semantic filters can be used to filter out non-protein anaphors at this stage .
In practice , for definite noun phrase type of anaphors , this is accomplished , by using a list of possible head-words of protein references ; for pronouns , their context words are used .
More details of these methods can be found in the following section .
Step 3 - Antecedent candidate selection : For each anaphor , this component collects the antecedent candidates from the preceding expressions .
One of the candidates will become the response antecedent , as a result of the antecedent prediction step .
In theory , all expressions in the set of markables can become antecedent candidates ; however , too many candidates makes it difficult to achieve correct antecedent prediction .
Moreover , we also filter out candidates that violate syntactic or semantic constraints raised by the anaphor .
In our system , this is done by using a particular window size in sentences , together with several syntactic filters .
One of the syntactic filters is based on syntactic relations among phrases outputted from the parser .
The idea behind this filter is that some types of syntactic relations imply the impossibility of coreference relations between its argument noun phrases and the inclusive expressions of these noun phrases .
For example , the two expressions : dominant negative form and its in our example in Table 1 , cannot be coreferential with each other , since they are connected via the preposition of .
Another syntactic filter removes pronouns that are not in the same pronoun family as the anaphor .
This results in the disappearance of this in candidate antecedents of its .
Pronouns in the same family as its are its , it , and itself .
Step 4 - Antecedent prediction : The best candidate in the antecedent candidate set is selected , and a response coreference link is formed .
Antecedent candidates are compared with one another using a comparison procedure .
This procedure implements a decision rule list containing four rules , encoding the following selection preference conditions :
-Rule 1 ( Number agreement - NUM-AGREE ) : The candidate , which does not conflict in number with the anaphor , is selected .
-Rule 2 ( Semantic constraint - SEM-CONS ) : If the anaphor is a protein reference , then a protein candidate is selected .
-Rule 3 ( Discourse preference - DISC-PREF ) : According to the anaphor type , the farther candidate is selected .
-Default rule ( Default discourse preference - DEFAULT ) : The closer candidate is selected .
The rules are implemented using different features of expressions , such as syntactic types of expressions , head noun , semantic types , etc. , in a similar way to [ 22 ] .
Each rule in the decision list compares two candidates , and returns the preferable candidate in concern with the anaphor .
If equility happens , the next rule in the list is applied .
The default and also last rule in the decision rule list is special in the sense that depending on the anaphor , it prefers the closer or the farther candidate .
Because of this particular rule , the decision list never results in the equility result .
In this way , candidates can be sorted , and the best candidate is selected as the antecedent .
Figure 4 illustrates how the decision list works when comparing two candidates : and .
More details concerning the implementation of the main components of our system shown in Figure 2 are presented below .
In this step , we want to filter out those pronouns and definite noun phrases that are not a target of this task . The expressions are comprised of two types : non-anaphoric expressions , and anaphoric expressions , which do not point to proteins .
The term anaphoric is used with the common sense in the NLP community .
Anaphoric expression refers to an expression that has a noun phrase as an antecedent .
Thus , expressions with a sentence or phrase antecedents , or nominal but successive antecedents , are not our target and should be filtered out .
Non-anaphoric expressions include first and second-person pronouns such as I , we , you , and pleonastic it .
First and second-person pronouns are easily recognized by the part-of-speech tags ; thus , we use part-of-speech information for the filtering .
For pleonastic it , we make use of the following four patterns , which are similar to [ 13 ] :
It be [ Adj|Adv| verb ]* that
It be Adj [ for NP ] to VP
It [ seems|appears|means|follows ] [ that ]*
NP [ makes|finds|take ] it [ Adj ]* [ for NP ]* [ to VP|Ving ]
To recognize and filter anaphoric expressions that do not point to proteins , the system is based on the protein semantic classification results determined by the method presented below .
For each anaphoric markable , the system collects a list of antecedent candidates , and select the most probable candidate to be the antecedent of the anaphor .
Basically , all of the expressions detected in the initial expression set are an antecedent candidate , with the exception of anaphoric pronouns .
However , if the list contains too many candidates , then it may be more difficult for the later antecedent-selection algorithm .
Therefore , candidates that are not probable to be an antecedent of the anaphor should be filtered out .
There are several filters that can be used :
Window size Borders are set to include or exclude antecedent candidates .
This is a common method for antecedent candidate filtering , as seen in the previous work [ 3 , 5 , 26 ] .
Since our task focuses on anaphoric coreference , antecedent expressions normally appear not too far ( in sentence distance ) from the anaphors . Thus , using window sizes is a proper technique .
Syntactic dependency relations Since arguments of some dependency relations ( such as poss-arg12 and prep-arg12 ) do not corefer with each other , they can be used to correctly eliminate the number of antecedent candidates .
For instance , two such truncated forms definitely cannot be an antecedent of the protein in this context : two such truncated forms of the protein .
After filtering non-relevant antecedent candidates for an anaphor in the step above , depending on the anaphor type , the remaining candidates are ranked by fixed rules , or by using a pairwise comparison procedure :
The relative pronoun can be said to be the easiest type of coreference resolution , because its antecedent expression is very close to the anaphor , and in many cases , it is right before the anaphor .
For these types of anaphors , any syntactic parser can be used to find the relation between relative pronouns and their arguments .
Our system accomplishes this task .
It simply produces coreference links between the relative pronouns and their arguments .
However , a disadvantage to using this method is that when the parser makes a mistake on finding the correct arguments , the coreference also fails . This is exemplified in the following : " . . .of transcription factor NF-kappa B also encodes a p70 I kappa B protein , I kappa B gamma , which is identical to the C-terminal 607 amino acids of . . . "
This procedure compares two candidate expressions at a time with respect to preferences raised by the anaphor .
The best antecedent expression is selected to form a response coreference link .
In particular , a list of rules is used to compare two candidates of an anaphor in a deterministic manner .
For each rule , both of the candidates are checked against the condition hold by that rule .
If one candidate satisfies and the other does not , the procedure ends with the result that the former will be preferable over the latter .
If both satisfy or both do not satisfy , the procedure proceeds to the next rule in the same manner .
The rules are applied in a successive order , one after another , until the inequality occurs , or until the end-of-the-rule list is reached .
The default rule of the procedure , is in the preference of the closer antecedent candidate .
By definition , two coreferential expressions are identical , which implies a semantic-constraint on coreference relationship .
In other words , semantic types of coreferents must be compatible .
In practice , this compatibility is checked based on a given taxonomy of semantic classes in the following manner : two semantic classes are considered compatible or agreed with each other , when they have a synonym relation , or hypernym-hyponym relation .
In this work , we only focus on the Protein type , ignoring other possible semantic types , so the structure of the taxonomy is not taken into account .
Therefore , the likelihood that two expressions are semantically compatible , is definitely beneficial for antecedent prediction , besides syntactic information .
Focusing on specific entity types , i.e. , Protein type , enables us to find a proper method for determining the likelihood , and method for encoding the likelihood in coreference resolution .
Since gold protein annotations are given , we can use them in combination with syntactic information to judge whether an expression is a protein-referential expression or not .
If an expression is a noun phrase with a single head word , and it contains a protein mention that completely overlaps with the head word , then the expression is classified as Protein .
In another case , when the head noun is either protein or gene , and has a protein mention as its premodifier , such as the Tax protein .
For a coordinated noun phrase , if one of its constituents is classified as a Protein , then that noun phrase is also classified as a Protein .
Pronouns , in particular , possessive pronouns , occupy the majority of anaphoric pronouns in biological texts ( Table 5 ) .
However , they do not contain very much useful information for the resolution ; thus , we need to exploit more information from its context [ 17 ] .
The analysis of BioNLP-ST 2011 also showed that we need a different strategy to resolve such pronouns [ 18 ] .
Fortunately , the key to this problem lies in the context of pronouns .
We implemented a simple function to classify the semantic type of a possessive pronoun , based on its context word .
In particular , we check the noun phrase in which the determiner is its or their ; if the noun phrase contains a protein key word , then the inclusive pronoun is classified into the Protein semantic type .
Protein key words can be a verb , a noun or an adjective that co-occurred with protein mentions , and can be used as a clue to distinguish the protein type from other semantic types .
For example , the word binding in the following noun phrases : its heterodimeric binding partner , or its binding site , is a clue to infer that it must be a protein reference .
For our preliminary experiment , we collect these keywords manually by checking the noun phrases containing its and their in the training data .
Our final protein keyword set includes 12 words : binding , expression , interaction , regulation , phosphatase activity , localization , gene , sequence , region , phosphorylation , transactivation , and transcription .
In future , the protein key words can be collected automatically using the term corpus , or other resources of proteins .
Coreferential definite noun phrases in text are used to include a broader definition of coreference .
In other words , their antecedents do not necessarily exist in the textual context ; in particular , in biomedical scientific papers , many definite noun phrases do not have antecedents , since the referenced concepts can include any concept that is understood by subject matter experts in the domain .
Distinguishing such non-anaphoric definite noun phrases from anaphoric ones is a difficult task .
Knowing their semantic type helps to filter out irrelevant candidate antecedents , thereby increasing the chance of picking up the right antecedent , and increasing the precision of antecedent prediction .
In our implementation , the decision to keep an anaphoric expression for further processing steps for an anaphoric definite noun phrase is based on a protein head word list .
We tested two different head word lists : one is built automatically from the gold anaphoric nominals in gold data ; the other word list contains the top seven common head words : protein , gene , factor , molecule , element , family , inhibitor , and receptor .
Semantic type information can be used in coreference resolution in several ways .
First , in anaphor selection , semantic information can be used to filter out non-protein anaphoric expressions .
Second , in antecedent candidate filtering , semantic agreement between the antecedent candidates and the anaphoric expression is checked .
Those candidates that are not in agreement with the anaphor in semantics are filtered out .
For example , if an anaphor is classified as a protein referent , then the non-protein antecedent candidates are removed from the candidate set of the anaphor .
Finally , in antecedent prediction : semantic agreement can again be used as a constraint when comparing two antecedent candidates to select the more probable candidate .
Our minimal system configuration includes all of the processing and filters from step 0 to step 3 , as explained in the section above ( RB-MIN ) .
For antecedent candidate selection , the window size used in step 4 is set to 2 , which means that antecedent candidates are collected in the two nearest sentences from the anaphor , and the sentence embedding the anaphor .
The statistics measured on the training set of the corpus shows that 97 .0% percent of protein coreference links have antecedents appearing in within 2 sentences .
With this window size , the average number of candidates per anaphor is 6 .1 .
Also , experiments with wider window sizes did not help .
The word list used to filter out anaphoric definite noun phrases in step 2 contains the following words : protein , gene , factor , molecule , element , family , inhibitor , and receptor .
These words are selected from the top appearing head words extracted from the training data .
Premodifiers of definite noun phrases are also limited to numbers and popular premodifiers of proteins , such as nuclear , and transcription .
Using this head word list and premodifiers , the system covers 83 .5 percent of the coreference links .
To keep the minimal configuration simple , step 4 - antecedent selection of the baseline only uses the default comparison rule , which assures that the closest antecedent candidate is selected .
Table 2 compares our system with the top four official results of the COREF shared task in BioNLP-ST 2011 [ 18 ] : UU [ 11 ] , UZ [ 29 ] , CU , and UT [ 4 ] .
The scoring scheme used throughout this paper is the protein coreference evaluation , the primary evaluation method of the COREF shared task [ 18 ] .
This primary evaluation method , which was particularly designed for the shared task , is based on protein coreference links that have been automatically generated from manually annotated coreference links .
The last column ALL shows the overall results , while its preceding three columns PRON , DNP , and RELAT shows the protein resolution results by three major subtypes of anaphors : pronouns , definite noun phrase and relative pronouns , respectively .
Note that the results from RB-MIN with minimal configuration , already surpasses the best results obtained by the UU team , with up to 7 .1% higher performance in F-score .
Since RB-MIN uses similar preprocessing tools as UU [ 11 ] , but less information in antecedent prediction , this gap in performance is likely caused by the different markable detection methods .
UU pointed in their paper that markable detection is one of the challenges of this task [ 11 ] .
In their system , UU used a machine learning approach , and tested two distinguished models for markable detection : one solved both anaphors and antecedents together , the other treated anaphors and antecedents separately .
Meanwhile , our method is basically based on the boundary of noun phrases and pronouns , as is outputted from the parser .
The patterns used to extract the proper noun phrases and pronouns , are manually designed concerning the markable boundaries annotated in the training data .
Breaking down the system performance by the different types of anaphors provides us with insight into what has been accomplished / solved by our methods , and also provides us with improvement opportunities .
Concerning the RELAT type of coreference , we can see that RB-MIN and RB-FULL both achieve comparable results with the best team in BioNLP-ST 2011 .
However , it should be noted that our antecedent prediction for the RELAT type is based solely on the output of the Enju parser for the RELAT type , so in order to improve this type of coreference , we have to find ways to overcome the parse errors on noun phrase boundary detection and relative clause attachment ( See Discussions section ) .
The increase in system performance on the PRON and DNP types by RB-FULL demonstrate the effectiveness of discourse and semantic information in the performance of protein coreference resolution .
Comparing RB-MIN , RB-FULL and RB-MIN+1 , 3 , we found that rule 3 , which stands for discourse preference , works well for the PRON type ( 2 ) .
On the other hand , the major contribution to the improvement of DNP resolution is from rule 2 .
This rule successfully utilizes the domain-specific information , which shows that coreference resolution requires domain-specific information .
To further explore the elements contributed to this significant improvement , we analyzed our system in more detail .
The analyses of the results are provided in the section entitled Discussions .
" >
Table 3 compares various configurations of the rule-based system .
The first , RB-MIN , is the minimal system .
The following three show the contribution of the three rules , NUM-AGREE , SEM-CONS , and DISC-PREF .
RB-FULL is the full system .
To emphasize the contribution of the semantic rules , it also shows RB-FULL-sem system .
The combination of rule 1 , 2 and 3 resulted in a 62 .4% F-score ( RB-MIN+1 , 2 , 3 ) ( Table 3 ) In this configuration , rule 2 contributes to a 4-point F-score increase in the development set , and 2 .3-point F-score increase on the test set , when comparing RB-MIN+1 , 3 and RB-MIN+1 , 2 , 3 .
However , the result of RB-MIN is still more than 7 points higher than in state-of-the-art performance .
This gain is due to the fact that the rule ensures that the semantic type of antecedents is the same as for their anaphors , thus enabling the correct detection of antecedents .
In other words , if an anaphor is classified as a protein reference , then the antecedent must also be a protein reference .
The following examples illustrate the way rule 2 works .
( Coreference examples in this paper are represented in the following manner : gold anaphoric and antecedent expressions are bracketed , antecedents before anaphors ; gold protein mentions are underlined ; and incorrect response antecedents are in italics . )
- " Therefore , [ IRF-1 ] may be an important contributor to IL-12 signaling , and we speculate that the defective IL-12 responses seen in IRF-1- / - mice might be attributable , in part , to the absence of [ this transcription factor ] . " ( PMID-10358173 )
In this example , without rule 2 , the faulty response antecedent of this transcription factor is part because it is the closet antecedent candidate agreeing with the anaphor on the singular number .
Meanwhile , since this transcription factor is recognized as a protein reference , its closest protein antecedent IRF-1 was successfully detected by RB-FULL .
Another example is :
- " This role for [ c-Myc ] in apoptosis is now confirmed in studies using a dominant negative form of [ its ] heterodimeric binding partner , Max , which . . . " ( PMID-7964516 )
Concerning the anaphoric pronoun its in this example , there are several antecedent candidates : this role , c-Myc , apoptosis , studies , a dominant negative form of its heterodimeric binding partner .
Although studies and a dominant negative form of its heterodimeric binding partner have been crossed out because of disagreement in numbers , and violation of abandoned syntactic constraints , correspondingly , the system would return the incorrect antecedent apoptosis instead of c-Myc .
Fortunately , the containing noun phrase of the anaphor its has the modifier word binding , which is a clue for classifying its as a protein reference ( See Semantic type classification for pronominal anaphors ) .
Rule 2 utilizes semantic classification result to make the correct selection .
In our system , domain-specific semantic information is utilized in two places : anaphor selection and antecedent prediction .
The effect of semantic information in antecedent prediction has been analyzed in the sections above .
In this subsection , we are going to explore the contribution of semantic information in the anaphor selection step .
To classify anaphors into protein or non-protein reference , our system employs a head-word based classifier for definite noun phrases , DEFNP-ANA-SEM , and a context-based classifier for pronouns , PRO-ANA-SEM ( Section Methods ) .
Without limiting the number of anaphors by using semantic information-based filtering , the precision significantly drops , causing a big decrease in the F-score ( Table 4 , RB-FULL without DEFNP-ANA-SEM ) .
This decrease is due to the fact that the semantic filter is the only way to filter out definite noun phrase anaphors .
Without the filter , all definite expressions , which include a huge amount of non-anaphoric expressions , are considered as anaphors .
Besides the anaphoric use , definite noun phrases are also used to refer to entities or concepts in the common domain knowledge shared between readers and writers .
Statistics in [ 21 ] show that only around 30% of definite noun phrases are anaphoric , and the other uses according to their classification include associative , unfamiliar / larger situation , idiom and doubt .
Distinguishing such non-anaphoric definite noun phrases from anaphoric ones is extremely difficult .
In our system , contextual information of possessive pronouns is utilized through the protein key words ( Section Methods ) , and this contributed to a 1 .8% gain in F-score ( Table 4 , RB-FULL without PRO-ANA-SEM ) .
This gain is a good indication for seeking a systematic method to develop and include such contextual information in coreference resolution .
Examples showing the effectiveness of semantic information from the context of pronouns is provided below :
- " This role for [ c-Myc ] in apoptosis is now confirmed in studies using a dominant negative form of [ its ] heterodimeric binding partner , Max , which . . . " ( MID-7964516 )
- " This ability of [ CIITA ] to facilitate promoter occupation is undissociable from [ its ] transactivation potential . " ( PMID-10221658 )
- " In transient transfectin experiments , [ BCL6 ] can repress transcription from promoters linked to [ its ] DNA target sequence and this activity is . . . " ( PMID-8692924 )
- " [ Human immunodeficiency virus type 1 ( HIV-1 ) Tat ] , an early regulatory protein that is critical for viral gene expression and replication , transactivates the HIV-1 long terminal repeat ( LTR ) via [ its ] binding to the transactivation response element ( TAR ) and , . . . " ( PMID-9261367 )
In all the examples above , the appearance of words such as binding , transactivation , DNA target sequence in the noun phrases for which the anaphor plays a role as a determiner , is a contextual indicator for the protein type .
Since the anaphors are predicted as protein reference from their context , the system correctly detects their protein antecedents .
Other challenges specific to the protein coreference task Number agreement is a constraint in English writing .
However , in the data , we found several coreferential expressions that violate this constraint .
The anaphor and antecedent in the following is an instance of this violation :
- " . . .for OTF-2 in DRA gene transcription .
In contrast , [ OTF-1-enriched protein fractions ] did not affect DRA gene transcription although [ it ] functionally enhanced the transcription of another . . . " ( PMID-1560002 )
Coreference annotation and evaluation Current protein coreference evaluation schemes generate protein links ( links between anaphors and antecedent proteins ) from surface links ( links between anaphors and antecedent expressions ) , without concerning the relative position of antecedent proteins in the antecedent expression .
Therefore , when the proteins appear in premodifiers or postmodifers of noun phrases as [ cDNAs encoding EBF or a covalent homodimer of E47 ] in this example :
- " With the aim of identifying genetic targets for these transcription factors , we stably transfected [ cDNAs encoding EBF or a covalent homodimer of E47 ] , individually or together , into immature hematopoietic Ba / F3 cells , which lack [ both factors ] . " ( PMID-9252117 )
Such proteins might not be the correct antecedent proteins .
In future , revision of corpus annotation and evaluation schemes would benefit the ease of automation of coreference resolution .
Parse error Coreference expression boundary is determined mostly based on noun phrase boundary output from the parser .
Therefore , parse error on noun phrase boundary strongly affects the performance of coreference resolution .
Examining the data , we found that many antecedent expressions of plural anaphors are coordinated noun phrases , which are unfortunately difficult cases to many parsers including Enju .
Incorporation of recent works for coordination resolution like [ 20 ] should be useful for improving the performance .
The following example shows a coordination-structured antecedent AML1 / CBF beta , C / EBP , Ets , c-Myb , HOX , and MZF-1 that failed to be detected by the parser .
The spurious response expression is transcription factors from several families .
- " granulocytic and monocytic lineages , transcription factors from several families are active , including [ AML1 / CBF beta , C / EBP , Ets , c-Myb , HOX , and MZF-1 ] .
Few of [ these factors ] are expressed exclusively in myeloid cells ; . . . " ( PMID-9291089 )
Our current work has reconfirmed that domain knowledge is indispensable for coreference resolution .
Since the biological domain has richer knowledge resources than any other domain , it would be interesting to continue studying how to exploit and employ domain-specific semantic information in coreference resolution for this domain .
Another conclusion concerns markable detection .
This sub-problem is often regarded as an easy task in coreference resolution systems ; however , in actuality , it is an important subtask , which strongly affects the performance of coreference system .
Sticking to the gold data in designing the markable detection method , as done in this paper , is one employed strategy .
However , from the perspective of coreference data creation , revision of the markable annotations would aid in automatic and robust markable detection .
For future opportunities , more effort should be spent on automating the semantic classification for coreference expressions , using context .
Furthermore , it would be interesting to test the results in this study in a machine-learning framework .
Syntactically annotated corpora have become important resources for natural language processing , due in part to the success of corpus-based methods .
Since words are often considered as primitive units of language structures , the annotation of word segmentation forms the basis of these corpora .
This is also a concern for the Vietnamese Treebank ( VTB ) , which is the first and only publicly available syntactically annotated corpus thus far for the Vietnamese language .
Although word segmentation is straight-forward for space-delimited languages like English , this is not the case for languages like Vietnamese for which a standard criterion for word segmentation does not exist .
This work explores the challenges of Vietnamese word segmentation through the detection and correction of inconsistency for VTB .
Then , by combining and splitting the inconsistent annotations that were detected , we are able to observe the influence of different word segmentation criteria on automatic word segmentation , and the applications of word segmentation , including text classification and English-Vietnamese statistical machine translation .
The analysis and experimental results showed that our methods improved the quality of VTB , which positively affected the performance of its applications .
Treebanks , which are corpora annotated with syntactic structures , have become more and more important for language processing .
In order to strengthen the automatic processing of the Vietnamese language , the Vietnamese Treebank ( VTB ) has been built as a part of the national project , `` Vietnamese language and speech processing ( VLSP ) '' ( Nguyen et al ., 2009b ) .
However , in our preliminary experiment with VTB , when we trained the Berkeley parser ( Petrov et al ., 2006 ) and evaluated it by using the corpus , the parser achieved only 65 .8% in F-score .
This score is far lower than the state-of-the-art performance reported for the Berkeley Parser on the English Penn Treebank , which reported 90 .3% in F-score ( Petrov et al ., 2006 ) .
There are two possible reasons to explain this outcome .
One reason for this outcome is the quality of VTB , including the quality of the annotation scheme , the annotation guidelines , and the annotation process .
The second reason is the difficulty of parsing Vietnamese ; we need to seek new solutions to address this problem .
VTB is annotated with three layers : word segmentation , POS tagging , and bracketing .
This paper focuses on the word segmentation , since the most basic unit of a treebank are words ( Di Sciullo and Edwin , 1987 ) , and defining `` words '' is the first step ( Xia , 2000b ,a ; Sornlertlamvanich et al ., 1997 , 1999 ) .
For languages like English , defining `` words '' is almost trivial , because the blank spaces denote word delimiters .
However , for an isolating language like Vietnamese , for which blank spaces play a role of syllable delimiters , `` What are words ? '' is not a trivial question .
For example , the sentence `` H❅c sinh h❅c sinh h❅c ( students learn biology )1 '' is composed of three words , `` h❅c sinh ( student ) '' , `` h❅c ( learn ) , '' and `` sinh h❅c ( biology ) '' . Word segmentation is expected to break down the sentence at the boundaries of these words , instead of splitting `` h❅c sinh ( student ) '' and `` sinh h❅c ( biology ) '' .
Note that the terminology `` word segmentation '' also refers to the task of extracting words statistically without concerning a gold-standard for segmentation , as in ( Ha , 2003 ; Le et al ., 2010 ) .
In such a context , the extracted words are more appropriate for building a dictionary , rather than for corpus-based language processing , which are outside of the scope of this paper .
Because of the discussed characteristics of the language , there are challenges in establishing a gold standard for Vietnamese word segmentation .
The difficulties in Vietnamese word segmentation have been recognized by many researchers ( Ha , 2003 ; Nguyen et al ., 2004 , 2006 ; Le et al ., 2010 ) .
Although most people agree that the Vietnamese language has two types of words : single and compound , there is little consensus as to the methodology for segmenting a sentence into words .
The disagreement occurs not only because of the different functions of blank spaces ( as mentioned above ) , but also because Vietnamese is not an inflectional language , as is the case for English or Japanese , for which morphological forms can provide useful clues for word segmentation .
While similar problems also occur with Chinese word segmentation ( Xia , 2000b ) , Vietnamese word segmentation may be more difficult , because the modern Vietnamese writing system is based on Latin characters , which represent the pronunciation , but not the meaning of words .
All of these characteristics make it diffcult to perform word segmentation for Vietnamese , both manually and automatically , and have thus resulted in different criteria for word segmentation .
However , so far , there have been few studies on the challenges in word segmentation , and the comparison of different word segmentation criteria .
In this paper , a brief introduction of the Vietnamese Treebank VTB and its annotation scheme are provided in Section 2 .
Then , we described our methods for the detection and correction of the problematic annotations in the VTB corpus ( Section 4 .2 ) .
We classified the problematic annotations into several patterns of inconsistency , part of which were manually fixed to improve the quality of the corpus .
The rest , which can be considered as the most difficult and controversial instances of word segmentation , were used to create different versions of the VTB corpus , representing different word segmentation criteria .
Finally , we evaluated these criteria in automatic word segmentation , and its application in text classification and English-Vietnamese statistical machine translation , in Section 4 .
This study is not only beneficial for the development of computational processing technologies for Vietnamese , a language spoken by over 90 million people , but also for similar languages such as Thai , Laos , and so on .
This study also promotes the computational linguistic studies on how to transfer methods developed for a popular language , like English , to a language that has not yet been intensively studied .
Word segmentation in VTB aims at establishing a standard for word segmentation in a context of multi-level language processing .
VTB specifies 12 types of units that should be identified as words ( Table 1 ) ( Nguyen et al ., a ) , which can be divided up into three groups : single , compound , and special `` words '' .
Single words contain only one token .
The terminology tokens refers to text spans that are separated from each other by blank spaces .
Compound words have two or more tokens , and are divided into four types : compound words composed by semantic coordination ( semantic-coordinated compound ) , compound words composed by semantic subordination ( semantic-subordinated compound ) , compound words with an affx , and reduplicated words .
Special `` words '' include idioms , locutions , proper names , date times , numbers , symbols , sentence marks , foreign words , or abbreviations .
The segmentation of these types of words forms a basis for the POS tagging , with 18 different POS tags , as shown in Table 2 ( Nguyen et al ., c ) .
Each unit in Table 1 goes with several example words ; English translations are provided in parentheses .
Furthermore , we added a translation for each token , where possible , so that readers who are unfamiliar with Vietnamese can have an intuitive idea as to how the compound words are formed .
The subscript of a token translation is the index of that token in the compound word .
However , for some tokens , we could not find any appropriate English translation , so we gave it an empty translation , marked with an asterisk .
Note that a Vietnamese word or a token in context can have other meanings , in addition to the given translations .
A classifier noun , denoted by the part-of-speech Nc in Table 2 , is a special type of word in Vietnamese .
Classifier nouns are specific to several Southeast Asian languages , like Vietnamese and Thai .
One of the functions of classifier nouns is to express the definiteness .
For example , the common noun `` bàn '' generally means tables , while `` cái bàn '' means a specific table , similar to the table in English .
In this section , we analyzed the VTB corpus to determine whether the difficulties in Vietnamese word segmentation affected the quality of VTB annotations .
The analysis revealed several types of inconsistent annotations , which are also
Vietnamese word segmentation .
Our analysis is based on two types of inconsistencies : variation and structural inconsistency , which are defined below .
Variation inconsistency : is a sequence of tokens , which has more than one way of segmentation in the corpus .
For example , `` con gái/girl '' can remain as one word , or be segmented into two words , `` con '' and `` gái '' .
A variation can be an annotation inconsistency , or an ambiguity in Vietnamese .
While ambiguity cases reflect the difficulty of the language , annotation inconsistencies are usually caused by the confusion in the decision of annotators , which should be eliminated in annotation .
We use the term variation instance to refer to a single occurrence of a variation .
Structural inconsistency : happens when different sequences have similar structures , and thus should be split in the same way , but are segmented in different ways in the corpus .
For example , `` con gái/girl '' and `` con trai/boy '' have similar structures : a combination of a classifier noun and a common noun , Nc + N , so when `` con gái/girl '' is split , and `` con trai/boy '' is not , it is considered as a structural inconsistency of Nc .
It is likely that structural inconsistency at the word segmentation level complicates the higher levels of processing , including POS tagging and bracketing .
The detection method for variation inconsistency is based on N-gram sequences and the phrase structures in the VTB , following the definition for variation inconsistency , above .
In detail , we counted N-gram sequences of different lengths in VTB that have two or more ways of word segmentation , satisfying one of the following two conditions :
N tokens are all in the same phrase , and all have the same depth in phrase .
For example , the 3-gram " nhà tình nghĩa ( house of gratitude ) " in this structure " ( NP ( Nc-H căn ) ( N nhà ) ( A tình nghĩa ) ) , " OR
nhà tình nghĩa " in this structure " ( NP ( Nc-H căn ) ( N nhà ) ( ADJP ( A tình nghĩa ) ) ) , " where the ADJP contains only one word .
Table 3 shows the overall statistics of the variation inconsistency detected by the method described above .
Most of the diffcult cases of word segmentation occur in two-token variations , occupying the majority of variations ( 92 .9% ) .
This ratio of 2-gram variations is much higher than the average ratio of two-token words in Vietnamese , as reported in ( Nguyen et al., 2009a ) , which is 80% .
Variations that have lengths of three and four tokens occupy 6 .1% and 1 .0% , respectively .
We estimated the precision of our method by randomly selecting 130 2-gram variation instances , extracted from the method described above , and manually checked whether the inconsistencies are true .
We found that 129 cases occupying 99 .2% of all extracted 2-grams are true inconsistencies .
Only one instance of inconsistency was an ambiguous sequence giá c , which is one word when it means price , and two words giá / price c / all in đàu có giá c / all have ( their own ) price .
The precision for our method is high , so we can use the extracted variations to provide insights on the word segmentation problem .
We further analyzed the 2-gram variations to understand what types of 2-grams were most confusing for annotators .
The analysis revealed that compound nouns , compound verbs , and compound adjectives are the most difficult cases of word segmentation .
We classified the 2-gram variations according to their POS sequences in case the tokens in the 2-gram are split .
There are a total of 54 patterns of POS sequences . The top 10 confusing patterns , their counts of 2-gram variations , and examples are depicted in Table 4 .
Table 5 and Table 6 show the POS patterns that are a specific POS tag , appearing at the beginning or ending of the sequence .
Investigating the inconsistent 2-grams extracted , we found that most of them are compound words , according to the VTB guidelines ( Section 2 ) .
One of the reasons why the compound words are sometimes split , is because the tokens in those compound words have their own meanings , which seem to contribute to the overall meaning of the compounds .
This can be seen through the examples provided in Table 4 , where the meanings of tokens are given with a subscript .
This scenario has proven to be problematic for the annotators of VTB .
Furthermore , by observing the POS patterns in Table 5 and Table 6 , we can see the potential for structural inconsistency , particularly for closed-set POS tags .
Among them , classifier nouns ( Nc ) and affixes ( S ) are two typical cases of structural inconsistency , which will be used in several settings for our experiments .
The same affx or classifier noun can modify different nouns , so when they are sometimes split and combined in the variations , we can conclude that classifier nouns and affixes involve in-structural inconsistencies .
In the following section , we present our detection method for structural inconsistency for classifier nouns and affixes .
The detection method for structural inconsistency of classifier nouns and affixes is simple .
We collected all affixes and classifier nouns in the VTB corpus , and then extracted 2-grams containing these affixes or classifier nouns , which are also structural inconsistencies .
For example , since " con " is tagged as a classifier noun in VTB , we extracted all 2-grams of " con " including both " con gái / girl " and " con trai / boy " .
Even though the sequence , " con trai " is always split into two words throughout the corpus , it can still be an inconsistency , if we consider similar structures such as " con gái " .
In other words , by this method , we extract sequences that may be consistent at the surface level , but are not consistent , if we consider the higher analysis levels , POS tagging .
According to the VTB POS-tagging annotation guidelines ( Nguyen et al., c ) , classifier nouns should be separated from the words that they modify .
However , in practice , it is confusing when the classifier noun can be standalone as a single word .
For example a classifier noun , e.g. , " con " in " con trai ( boy ) " , or " con gái ( girl ) " , can also be a simple word , which means " I ( first person pronoun used by a child when talking to his / her parents ) " , or part of a complex noun " con cái ( children ) " .
Therefore , in our experiments , we want to evaluate the " splitting " and " combining " of these cases , in order to see whether the solution is successful for applications of the corpus .
By examining the variations extracted by the variation inconsistency detection , we found that there are cases when a special character like a percentage ( % ) in " 30% " , is split or combined with " 30 " .
Such inconsistent annotations are manually fixed based on their textual context .
By checking structural inconsistencies of these special characters , including percentages ( % ) , hyphens ( - ) , and other symbols , we found quite a significant number of inconsistent annotations .
For example , the character , % , in " 30% " is split , but is combined with a number in " 50 % " , which is considered to be a structural inconsistency .
Note that it can be argued that splitting " N% " into two words or combined in one word is dependent on the blank space in-between N and " % " .
Higher-levels of annotation such as POS tagging is significant , because we may need one or two different POS tags for the different methods of annotation .
Therefore , we think that it is better to carefully preprocess text and segment these special characters in a consistent way .
To improve the quality of the VTB corpus , we extracted the problematic sequences using patterns of the special characters , and manually fixed this type of inconsistency .
Automatically modification is diffcult , since we must check the semantics of the special characters in their contexts .
For example , hyphens in date expressions like " 5-4-1975 " , which refers to the date , " the fifth of April , 1975 , " are combined with the numbers .
However , when the hyphen indicates " ( from ) to " or " around .
. .
or " , as in " 2-3 gi░ sáng " , meaning " around 2 or 3 o’clock in the morning " , we decided to separate it from the surrounding numbers .
As a result , we have fixed 685 inconsistent annotations of 21 special characters in VTB .
The variation inconsistency and structural inconsistency found in Section 3 can also be seen as representatives of different word segmentation criteria for Vietnamese .
We organized the inconsistency detected in seven configurations of the original VTB corpus .
Then , by using these data sets , we could observe the influence of the different word segmentation criteria on three tasks : automatic word segmentation , text classification , and English-Vietnamese statistical machine translation .
Seven data sets corresponding to different segmentation criteria are organized as follows .
ORG : The original VTB corpus .
BASE : The original VTB corpus + Manual modification of special characters done in Section 3 .3 .
VAR_SPLIT : BASE + split all variations detected in Section 3 .1 .
VAR_COMB : BASE + combine all variations detected in Section 3 .1 .
VAR_FREQ : BASE + select the segmentation with higher frequency among all variations detected in Section 3 .1 .
STRUCT_NC : BASE + combine all classifier nouns detected in Section 3 .2 with the words they modify .
STRUCT_AFFIX : BASE + combine all suffxes detected in Section 3 .2 with the words they modify .
These data sets are used in our experiments , as illustrated in Figure 1 .
The names of the data sets are also used to label our experimental configurations .
In this section , we briefly describe the task settings and the methods used for word segmentation ( WS ) , text classification ( TC ) , and English-Vietnamese statistical machine translation ( SMT ) .
We used YamCha ( Kudo and Matsumoto , 2003 ) , a multi-purpose chunking tool , to train our word segmentation models .
The core of YamCha is the Support Vector Machine ( SVM ) machine learning method , which has been proven to be effective for NLP tasks .
For the Vietnamese word segmentation problem , each token is labeled with standard B , I , or O labels , corresponding to the beginning , inside , and outside positions , respectively .
The label of each token is determined based on the lexical features of two preceding words , and the two following words of that token .
Since the Vietnamese language is not inflectional , we cannot utilize inflection features for word segmentation .
Each of the seven data sets is split into two subsets for training and testing our WS models .
The training set contains 8443 sentences , and the test set contains 2000 sentences .
Text classification is defined as a task of determining the most suitable topic from the predefined topics , for an input document .
We implemented a text classification system similar to the system presented in ( Nguyen et al., 2012 ) .
The difference is that we performed the task at the document level , instead of at the sentence level .
The processing of the system is summarized as follows .
An input document is preprocessed with word segmentation and stop-word removals .
Then , the document is represented in the form of a vector of weighted words appearing in the document .
The weight is calculated using standard tf-idf product .
An SVM-based classifier predicts the most probable topic for the vector , which also is the topic for the input document .
In our experiment , for comparison of different word segmentation criteria in topic classification , we only vary the word segmentation model used for this task , while fixing other configurations .
News articles of five topics : music , stock , entertainment , education , and fashion are used .
The sizes of the training and test data sets are summarized in Table 8 .
A	phrase-based SMT system for English-Vietnamese translation was implemented .
In this system , we used SRILM ( Stolcke , 2002 ) to build the language model , GIZA++ ( Och and Ney , 2003 ) to train the word-aligned model , and Moses ( Holmqvist et al., 2007 ) to train the phrase-based statistical translation model .
Translation results are evaluated using the BLUE score ( Papineni et al., 2002 ) .
Both training and test data are word-segmented using the word segmentation models achieved .
For the experiment , we used the VCL_EVC bilingual corpus , 18000 pairs of sentences for training , and 1000 pairs for testing .
Evaluation of word segmentation models trained on different versions of the VTB are given in Table 9 .
The experimental results with text classification and English-Vietnamese statistical machine translation are shown in Table 10 and Table 11 , respectively .
There are two important conclusions that can be drawn from these tables : ( 1 ) The quality of the treebank strongly affects the applications , since our BASE model and most of the other enhanced models improved the performance of TC and SMT systems ; ( 2 ) " Splitting " seems to be a good solution for word segmentation for controversial cases , including the split of variations , affxes , and classifier nouns .
According to the result in Table 9 , the VAR_SPLIT criterion gives the highest WS performance .
With the exception of STRUCT_NC , all of the modifications to the original VTB corpus increase the performance of WS .
However , the word segmentation criterion with higher performance is not necessarily a better criterion , but a criterion should also be judged through applications of word segmentation .
In both SMT and TC experiments , the BASE model , which is based on the manually-modified inconsistency of special characters , achieved better results than the ORG model .
In particular , in the TC experiment , the BASE model achieved 0 .66 point higher than ORG , which is a significant improvement .
The results support the conclusion that the quality of the word-segmentation corpus is very important for building NLP applications .
The SMT results show that three out of six augmented models , VAR_SPLIT , VAR_FREQ and BASE , performed better than the ORG configuration .
Among them , the best-performing model , VAR_SPLIT achieved 36 .91 BLEU score , which is 0 .55 higher than ORG .
In TC results , all six augmented models achieved higher results than ORG .
In general , the augmented models performed better than the ORG .
Additionally , because our automatic methods for inconsistency detection could not cover all of the types of inconsistencies in word segmentation annotation , further improvement of corpus quality is demanded .
Comparing the results of STRUCT_AFFIX and STRUCT_NC with BASE in WS , TC , and SMT , we can observe that combining affxes with their head nouns resulted in slightly better results for WS and TC , and did not change the performance of SMT .
However , the combination of classifier nouns with their head nouns had negative effects on WS and SMT .
Another part of the scope of our experiment is to compare two solutions for controversial cases of word segmentation , splitting and combining .
Splitting and combining variations are reflected by VAR_COMB and VAR_SPLIT , while STRUCT_AFFIX and STRUCT_NC represent the combination of affixes or classifier nouns with the words that they modify .
STRUCT_AFFIX and STRUCT_NC are contrasted with BASE where affxes and classifier nouns remain untouched .
Comparing VAR_COMB and VAR_SPLIT in both the TC experiment and SMT experiment , we see that the VAR_SPLIT results are better in both cases .
Since the ratio of combined variations in the ORG corpus is 60 .9% , it can be observed that splitting seems to be better than combining for WS , TC and SMT .
In this paper , we have provided a quantitative analysis of the difficulties in word segmentation , through the detection of problematic cases in the Vietnamese Treebank .
Based on the analysis , we automatically created data that represent the different word segmentation criteria , and evaluated the criteria indirectly through their applications .
Our experimental results showed that manual modification , done for annotation of special characters , and most other word segmentation criteria , significantly improved the performances of automatic word segmentation , text classification and statistical machine translation , in comparison with the use of the original VTB corpus .
Since the VTB corpus is the first effort in building a treebank for Vietnamese , and is the only corpus that is publicly available for NLP research , this study contributes to further improvement of the corpus quality , which is essential for building efficient NLP systems .
Face retrieval in large-scale news video datasets
Face retrieval in news video has been identified as a challenging task due to huge variations in the visual appearance of the human face .
Although several approaches have been proposed to deal with this problem , their extremely high computational cost limits their scalability to large-scale video datasets that may contain millions of faces of hundreds of characters .
In this paper , we introduce approaches to face retrieval that are scalable to such datasets while maintaining competitive performances with state-of-the-art approaches .
To utilize the variability of face appearances in video , we use a set of face images called face track to represent the appearance of a character in a video shot .
Our first proposal is an approach to extracting face tracks .
We use a point tracker to explore the connections between detected faces belonging to the same character and , then group them into one face track .
We present techniques to make the approach robust to common problems caused by sudden illumination changes , partial occlusions , and scattered appearances of characters in news videos .
In the second proposal , we introduce an efficient approach to matching face tracks for retrieval .
Instead of using all the faces in the face tracks to compute their similarity , our approach selects representative faces for each face track .
The representative faces are sampled from the original face track .
As a result , we significantly reduce the computational cost of face-track matching while taking into account the variability of faces in face tracks to achieve high matching accuracy .
Experiments are conducted on two face-track datasets extracted from real-world news videos , of such .
scales that have never been considered in the literature .
One dataset contains 1,497 face tracks of 41 characters extracted from 370 hours of TRECVID videos .
The other dataset provides 5,567 face tracks of 111 characters observed from a television news program ( NHK News 7 ) over 11 years .
We make both datasets public for the research community .
The experimental results show that our proposed approaches achieved a remarkable balance between accuracy and efficiency.
News videos play an important role as a source of information nowadays because of their rich and relevant contents .
With the advances in modern technology , a huge amount of news videos can be obtained easily .
Accordingly , this creates an urgent demand to retrieve useful information from such news video datasets .
Because most news are related to people , human face retrieval , which is defined as the task of extracting and returning faces relevant to a given query , obviously becomes an important task .
A robust face retrieval system for large-scale news video datasets is indeed of much benefit in a wide range of applications .
For example , by applying face retrieval to a news video dataset , we are returned a list of relevant shots or scenes containing the appearance of a selected well-known character .
With such a list , important events related to the character can be found or summarized.
However , developing an accurate face retrieval system is not a trivial task because of the fact that the imaged appearance of a face changes dramatically under large variations in poses , facial expressions , and complex capturing conditions .
Besides accuracy , efficiency is also an issue in such a face retrieval system because the scales of available datasets are rapidly getting larger , for instance , exceeding thousands of hours of videos with millions of faces of hundreds of characters .
Thus , accurate and efficient approaches to face retrieval are always required.
Generally , a face retrieval system consists of two principal steps .
The first step is extracting the appearance of faces in videos .
, The second step is matching the extracted appearances with a given query so as to return a rank list .
Whereas conventional approaches consider single face images as the basic units in extracting and matching \CITE , recently proposed approaches shifted toward the use of sets of face images called face tracks .
A face track contains multiple face images belonging to the same individual character within a video shot .
The face images in a face track may present the corresponding character from different viewpoints and with different facial expressions ( as shown in Figure 1 ) .
By exploiting the plenteous information from the multiple exemplar faces in the face tracks , face track-based approaches are expected to achieve a more robust and stable performance.
Once all the face tracks in the video shots are extracted , they are matched with the query to return a ranked list as the output of the face retrieval system .
Because each face track is a set of face images , matching face tracks can essentially be thought of as a problem of matching image sets .
Several approaches have been introduced to deal with this problem \CITE .
They differ in the ways in which the sets are modeled and the similarity between sets is computed .
Using these approaches , the image set has been modeled in different ways , including as distributions \CITE , subspaces \CITE , a convex geometric region in a feature space \CITE , or more general manifolds \CITE .
Although these approaches have shown promising results in benchmark datasets , they require high computational costs to characterize the representation of face tracks , such as computing the convex geometric region in \CITE , the probability in \CITE , and the eigenvectors in \CITE .
Their complexity in modeling face tracks and estimating the similarity between face tracks limits their practicability in large-scale datasets.
This paper provides a threefold contribution toward solving the above problems , .
Robust face-track extraction from news video .
To enhance the performance of face-track matching , face tracks should first be extracted accurately .
For this purpose , we introduce an approach .
motivated by a study of Everingham et al .
The basic idea is to use a point tracker ( Kanade-Lucas-Tomasi tracker \CITE ) to establish the connections between faces belonging to the same character in consecutive frames of a shot .
Our approach incorporates techniques to overcome specific problems with news video caused by sudden illumination change and partial occlusion , in contrast to the approach in \CITE , which failed to deal with , these problems .
Evaluations of a collection of real-world news videos showed that our proposed face-track extraction approach achieved approximately 95% accuracy , a significant improvement compared to the approach in \CITE .
Efficient face-track matching .
We introduce an approach that significantly reduces the computational cost for face-track matching while maintaining a competitive performance with state-of-the-art approaches .
Based on the observation that face tracks obtained by tracking provide highly similar faces in consecutive frames , we argue that it is redundant to use all the faces in a face track for learning the variation of faces .
Thus , a set of faces is sampled from the original face track for matching .
The size of the set is much smaller than that of the original face track .
The , mean face of the sampled faces in the set is then computed .
The similarity between two face tracks is the distance between their mean faces.
Large-scale face-track datasets from real-world news videos .
We investigated the problem of face retrieval in news video datasets whose scales have never been considered in the literature .
Our first dataset is from 370 hours of TRECVID news videos and contains 405,887 detected faces belonging to 41 individuals .
The second dataset includes 1.2 million faces of 111 individuals observed in the NHK News 7 program over 11 years .
, .
The total number of available face tracks is 5,567 .
The number of occurrences of each individual character varies from 4 to 550 .
Both datasets are published for the research community.
The remainder of this paper is organized as follows .
In Section 2 , we introduce related works in detail .
Sections 3 and 4 describe our approaches to face-track extraction and matching , respectively .
Section 5 presents our experimental settings , and Section 6 provides our .
conclusions.
Face-track extraction .
Face-track extraction is a key step in a video-based face retrieval system .
The existing studies on automatic face-track extraction follow a standard paradigm that consists of two basic steps , detecting faces in frames and grouping faces of the same character into face tracks .
In the first step , the Viola-Jones detector is usually used to detect near frontal faces in frames of videos .
, In the second step , the detected faces of the same character are grouped by using either clustering \CITE or tracking approaches \CITE .
In \CITE , Ramanan et al .
built a color histogram for the hair , face , and torso associated with each detected face in a frame .
A concatenated vector of the normalized color histogram represented the face .
They then clustered all vectors to obtain groups of similar faces , using agglomerative clustering .
The limitations of this approach include its high computational cost for constructing and clustering high-dimensional representation feature vectors and , its dependence on determining a reasonable threshold for the clustering algorithm to ensure that no group contains faces of multiple characters and that groups are not over-fragmented.
On the other hand , Everingham et al .
\CITE and Sivic et al .
In \CITE , an affine covariance tracker of \CITE is used .
This tracker can develop tracks on deforming objects , where the between-frame region deformation can be modeled by an affine geometric transformation plus perturbations .
The outcome is that a face can be tracked ( by the collection of regions on it ) through significant pose variations and expression changes , allowing the association of possibly distant face detections .
The disadvantage of this tracker is its high computational cost for locating and tracking affine covariance regions .
Another way of using a tracker was introduced by Everingham et al .
in \CITE , in which .
they used a Kanade-Lucas-Tomasi ( KLT ) tracker to create a set of point tracks starting at some frame in a shot and continuing until some later frame .
Grouping faces in different frames for one character is based on enumerating the track points shared between faces .
Although using tracking is an efficient solution , it may return poor tracking results because trackers are very sensitive to illumination changes and partial occlusions .
Face-track matching .
There are two major categories of approaches to using multiple exemplars of faces in face tracks ( i.e. , sets of face images ) for robust face matching and recognition .
The approaches in the first category \CITE make use of both face images and the temporal order of their appearances .
The face dynamics within the video sequence are modeled and exploited to improve recognition accuracy .
For instance , Li et al .
Edwards et al .
They then used the trained statistical face model to incorporate identity evidence over a sequence .
In \CITE , Liu and Chen used an adaptive hidden Markov model ( HMM ) for this face recognition problem .
In the training face , they created a HMM for each character to learn the statistics and temporal dynamics using the eigen-face image sequence .
The implicit constraint of these approaches is that the dynamics of faces should be temporally consecutive .
In general , this constraint is not always satisfied.
Without relying on temporal coherence between consecutive images , the approaches in the second category use multiple face images only and .
treat the problem as a set-matching problem .
These approaches are differentiated based on the ways in which the sets are modeled and the similarity between sets is computed .
Shakhnarovich et al .
However , to make the computation tractable , they made the assumption that faces are normally distributed , which may not be true \CITE .
Cevikalp and Triggs \CITE claimed that a face sequence is a set of points and discovered a convex geometric region expanded by these points .
The min-min approach \CITE considered a face sequence as a cluster of points and measured the distance between these clusters .
Subspace methods \CITE viewed a face sequence as points spread over a subspace .
Although these methods can be highly accurate , a lot of computation is needed to represent the distribution of the face sequence , such as computing the convex hulls in \CITE , the probability models in \CITE , and the eigenvectors in \CITE .
For this reason , they are not scalable to large-scale video datasets .
Face datasets .
In evaluating the performance of face-matching approaches , most of the recent works on face retrieval in video use two benchmark datasets: Mobo ( Motion of Body ) \CITE and Honda / UCSD \CITE .
The scales of these datasets are limited , varying from hundreds to thousands of face images of tens of individual characters .
Particularly , Honda / UCSD consists of 75 videos involving 20 individuals .
Each video contains approximately 300-500 frames .
Meanwhile , Mobo provides 96 image sets of 24 individuals .
Hence , there are only 4 image sets for each individual .
One of the largest face datasets recently available is the YouTube Faces dataset \CITE , which .
provides 3,425 videos of 1,595 individual characters .
However , each character has only around 2.15 videos .
Such a small number of samples for each character is not sufficient to stably evaluate a face-matching or recognition approach , which is an important part of a face retrieval system .
In addition , there is no face dataset related to real-world news videos , which is our targeted domain .
In view of all the above-mentioned considerations , we prepare new datasets for evaluating the approaches.
Figure 2 illustrates the overview of our framework .
In the off-line stage , the face tracks in all video shots are extracted using our face-track extraction approach ( described in Section 4 ) .
Each extracted face track contains multiple face images of one individual character , varied under different viewpoints , illumination conditions , and expressions within a shot .
Each single face image in a face track is represented by a feature vector .
The process consisting of face-track extraction and face image representation is performed once for the entire video dataset .
Our contribution here is making the face-track extraction approach robust to sudden illumination changes , scattered appearances of characters , and occlusions.
Given a face track as an input retrieval query , the online stage of our system starts by using our proposed face-track matching algorithm ( described in Section 5 ) to estimate the similarity between a query face track and each face track in the retrieved set containing all face tracks extracted from the dataset in the offline stage .
A ranked list of the evaluated face tracks is returned as the retrieval result of the online stage .
Because the retrieved set is huge , our approach targets an extremely efficient face-track matching strategy while maintaining a competitive performance with state-of-the-art approaches.
Given a video shot with occurrences of multiple characters , face-track extraction is the process of extracting sets of face images .
A set is supposed to contain the face images of only one character who appears in the shot .
Such sets of face images are called face tracks ( sometimes called face sequences ) .
A common strategy in the existing approaches to face-track extraction consists in detecting faces in frames and grouping detected faces of the same character .
Whereas detecting faces is done by using a standard face detector ( e.g. , Viola-Jones face detector ) \CITE , grouping detected faces requires comprehensive techniques to identify faces of the same character.
In this section , we first briefly introduce an approach to face-track extraction proposed by Everingham et al .
We then present the problems with this approach as applied to news video and our proposed solutions.
To group detected faces into face tracks , connections should be established between faces belonging to the same character in different frames .
Motion analysis can be used to investigate such connections .
If two faces in different frames are defined that they are translated faces of each other according to a motion , they are likely faces of the same character .
Everingham et al .
in \CITE proposed the use of a KLT tracker for this purpose .
Their algorithm starts by detecting interest points in the first frame of the shot and propagating them to the next frames based on local appearance matching .
Points that cannot be propagated from one frame to the next are eliminated and replaced with new points .
Given two faces in different frames , if the number of point tracks passing through both faces is larger than half of the total number of point tracks that are not common to both faces , the faces are grouped into one face track.
Although the approach by Everingham et al .
has shown its efficiency and robustness with drama videos \CITE , directly applying the approach to news videos results in poor performance due to the following issues.
Tracking errors due to sudden illumination change .
Because the KLT tracker uses intensity variance for computing the image motion to find the correspondence between points in different frames , it is unreliable when there is a sudden and significant change in illumination .
As shown in Figure 3 ( top ) , points are distracted when a flash occurs .
As a result , the points are badly tracked .
The flash breaks all connections between faces in the frames before and after its occurrence.
Unadaptive track point generation .
In \CITE , the track point generation is totally independent from face appearances .
New points are generated at the first frame of the shot or at a frame in which some existing points cannot be propagated .
As a result , a face that , does not appear in the aforementioned frames , may not contain any point .
Its connections with other faces in the shot cannot be established for grouping.
Tracking errors due to occlusion .
To successfully connect actual faces of the same character in different frames , the track points generated for the first face should be tracked and retained inside the latter faces for a sufficient number of shared points between faces .
However , when occlusion occurs , the points are distracted by occluded regions .
Thus , the number of shared points drops , .
resulting in face connection failure .
As shown in Figure 3 ( bottom ) , when the woman moves the paper , which partially occludes her face in several frames , some points in her facial region are drifted with the paper .
These points are not lost so they are not replaced by new points .
However , they become meaningless in determining the connection between faces.
Based on the observed limitations of the approach in \CITE when applied to news videos , we integrate techniques to bypass these restrictions in our proposed approach to face-track extraction in news videos.
First , unlike in \CITE , our approach does not compare all possible pairs of faces in a shot for face grouping\CITE; .
such pairwise comparison rapidly becomes intractable as the number of faces in a shot increases .
Instead , we group faces into face tracks according to the temporal order of their appearances .
A detected face in the current frame is considered for grouping into existing face tracks formed by previously detected faces only .
By doing this , we avoid greedy pairwise comparison.
Second , as described in our first observation , a sudden illumination change in any frame causes the KLT tracker to fail to track points properly .
Because such illumination changes are very common and mostly occur simultaneously with important characters in a news video , finding a solution to this problem is vital .
We learn that the occurrences of such illumination changes are usually very short ( less than 3 frames ) .
and that the , faces that appear in those frames are less informative for recognition because most of the facial identity characteristics are lost due to over-lighting .
Thus , the faces cannot enrich the information on its corresponding face track , but may only add noise .
Therefore , our solution is to detect and skip all frames containing sudden illumination changes , which .
we call flash frames.
To identify flash frames , we measure the brightness of the frames in the video shot .
If the brightness of a frame is significantly increased compared with its neighbors , the frame is declared a flash frame and skipped in processing .
Particularly , given a frame \SYM with t indicating its frame index , we compute the average luminosity L of the frame \SYM and its consecutive frames \SYM , where i = \SYM; t +W+ 1 , and W is the potential length of a sudden illumination change .
Then , we compare the average luminosity L of each frame \SYM in the set S = \SYM with s = t; t +W to those of \SYM and \SYM .
If L( \SYM ) > L( \SYM ) and L( \SYM ) > L( \SYM ) , \SYM is defined as flash frames according to a predefined brightness sensitive threshold \SYM .
In our experiments , we found that \SYM = 1:25 and W = {1; 2; 3} are optimal for detecting all flash frames with a low false alarm rate.
Given a video shot , our approach starts by finding the first frame in which faces are detected .
All point-tracking and face-grouping processes are initialized from this frame , not at the first frame of the shot as in \CITE .
This helps us to save on computational cost and avoid tracking errors caused by transition effects between shots .
Initial track points will be generated for all detected faces in the frame .
Each face now becomes the first face of a corresponding newly formed face track.
After the initialization , we sequentially process each frame , knowing all flash frames will be skipped .
In a given frame , the points from the previous frame are tracked by the KLT tracker to update their locations .
If there are faces detected , each face is checked against all the existing face tracks formed in the previous frames to find out to which face track the face belongs .
The checking between a face and a face track is based on enumerating the points shared by both the face and the last face that appeared on the face track .
If the enumerated number is larger than half of the total number of points that are not common to both faces , the face is grouped into the face track .
Our grouping criterion here is similar to that in \CITE .
A face that cannot be grouped into any face track is treated as the initial face of a new face track .
We then generate new track points within such faces for tracking and grouping its corresponding faces in latter frames .
In our approach , track points are generated in conjunction with face appearances .
We can ensure that there are track points for all faces that appear in the shot .
Consequently , our approach overcomes the second observed limitation in \CITE.
In other cases , when a face in the current frame is grouped into an existing face track , we prepare points for further tracking .
We remove all points that are inside the last face that appeared on the face track but are not inside the current face , and vice versa .
Because such points are likely tracked incorrectly , eliminating them prevents us from transferring tracking errors to latter frames .
Points that are shared by both faces are kept .
Besides , we generate additional points to replace the removed ones and to provide updated points .
By doing so , our tracking results over a long sequence of frames become more accurate and reliable .
As a result , we can partly bypass the third observed limitation of \CITE .
When a face is partly and slowly occluded , our approach can discard incorrectly tracked points and reproduce points for the face after it has been occluded .
Thus , the connection between faces before and after the occlusion is retained.
Our approach continuously processes the next frame until the end of the shot is reached .
The pseudo-code is presented in Algorithm 1 as follows.
Several approaches to matching face tracks have been proposed ( as presented in Section 2 ) .
However , although these approaches have shown high accuracy in benchmark datasets , their high computational costs limit their practical applications in large-scale datasets .
This motivates us to target a matching approach that provides a good balance between accuracy and computational cost .
The approach should be extremely efficient while achieving a competitive performance with state-of-the-art approaches.
To maintain competitive accuracy , we still use the plenteous information from the multiple faces of a face track to enrich the representation .
However , instead of using all the faces in a face track , we propose taking a subsample of faces .
In doing so , the required computational cost can be reduced while keeping the amount of information sufficient to improve accuracy .
We call our approach k-Faces.
Given a specific value of k , which indicates the expected size of the subsampled set of a face track , the approach starts by dividing each face track into k parts according to the temporal order of appearances .
For each part , one face is selected to represent all faces within the part .
The mean face of k selected faces is then computed .
The similarity between two face tracks is now the distance between their mean faces.
Let mA = {\SYM; \SYM; : :; \SYM} and mB = {\SYM ; \SYM; : :; \SYM} denote the mean faces of face tracks A and B , respectively , with N representing the number of dimensions of the feature space .
We use following standard distance types to compute the distance between mA and mB.
Figure 4 illustrates our k-Faces , with the following .
pseudo-code: .
Clearly , the higher the value of k selected , the more faces in each face track selected to compute the representative face and the .
, better the approximations , which may result in higher accuracies .
However , the computational cost can overly increases .
By using k as a predefined parameter , k-Faces provides users with flexibility in balancing the accuracy they expect and the cost they can afford ( or the time they can spend waiting for the result ).
Besides , because k-Faces averages multiple faces for the representative face of a face track , the effects of noisy or outlier faces on estimating the similarity of face tracks will be substantially reduced.
In this section , we present our experiments to evaluate the proposed approaches .
The experiments are divided into two parts; .
the first , evaluates the performance of the proposed approach in face-track extraction , and the second in .
face-track matching.
We tested our proposed approach to face-track extraction on 8 video sequences from different video broadcasting stations , including NHK News 7 , ABC News , and CNN News.
All shot boundaries are provided in advance .
A face detector based on the Viola-Jones approach \CITE is used to detect near frontal faces in every frame of the video sequences .
A conservative threshold is used to reduce the number of false positives ( i.e. , a non-face classified as a face ).
Ground-truth information on the face tracks in videos is manually prepared .
Each face track of a character appearing in a video shot is annotated by indexes of the frames in which the first face and the last face of that character occur .
An approach is considered as exactly extracting a face track if it provides precise starting and ending frame indexes of the face track , compared to ground-truth annotation .
Note that if a character moves out of the frame and then moves back into it again , annotators will divide the appearance of that character into two independent face tracks in ground-truth annotation .
Table 1 shows the number of frames , faces , and face tracks .
In this experiment , we directly compare our approach with that proposed by Everingham et al .
in \CITE.
As shown in Table 2 , by detecting flash frames , our approach successfully overcomes the problem of face-track fragmentation due to illumination changes .
Meanwhile , the approach by Everingham et al .
almost completely fails to do that .
In addition , the results also show that our approach is superior to that of Everingham et al .
in handling problems caused by partial occlusion and the appearance of a character in the middle of a shot .
The only face tracks that we could not extract exactly are those fully occluded in some frames during their occurrences .
In those cases , all points in the face regions are drifted to the background region .
After such full occlusions , there is no clue to regrouping the face of that person .
, Using only a tracker is not enough to handle this problem .
One can apply visual information-based clustering to group the fragmented face track , as in \CITE , but this .
obviously , requires extra cost .
Nevertheless , we observe that full occlusion rarely happens in news video because the characters featured in the news are recorded with care , especially the important and well-known ones .
This is a special characteristic of news videos .
The last column of the table shows the overall extraction performance of both approaches .
These facts clearly indicate that our approach is robust and outperforms that of Everingham et al .
in \CITE.
In terms of speed , our approach is approximately 2 times slower than that of Everingham et al .
However , our complexity is somehow linear to the total number of faces , because we consequently enlarge face tracks according to the temporal order by checking new faces with only the last face that appeared on each face track .
Meanwhile , Everingham et al .
compared all pairs of faces in the shot .
Their complexity is polynomial to the total number of faces .
If the number of faces increases , the gap in speed between our approach and that by Everingham et al .
will narrow rapidly.
Because all the problems presented here , such as those due to flash , occlusion , and in-the-middle face appearance , are practically observed , overcoming them is vital for the practical application of our approach .
In this experiment , we show that our proposed techniques and solutions to the problems are robust and efficient enough for extracting face tracks in real-world news videos by successfully extracting 94% of all face tracks .
Based on our observations , other complex techniques can be applied to handle the problems .
However , the trade-off between obtaining the 6% remaining face tracks and incurring an overly high computational cost should be considered with care.
Due to the limitations of existing public datasets , we prepared new datasets for the experiments .
Face tracks are extracted from videos of the datasets by using our proposed approach to face-track extraction ( see section 4.2 ) .
The identity of the character associated with each extracted face track is given by annotators .
Because our approach extracts face tracks in each video shot , the shot boundaries of videos are required .
A simple shot boundary detector based on a color histogram of frames is used .
The whole process , including shot boundary detection and face-track extraction , is fully automated.
TRECVID dataset .
We used TRECVID news videos from 2004 to 2006 .
This dataset contains 370 hours of videos in different languages , such as English , Chinese , and Arabic .
The total number of frames that we processed was approximately 35 million .
Among those , 20 million faces were grouped into 157,524 face tracks .
We filtered out short face tracks that had less than 10 faces , which .
resulted in 35,836 face tracks .
Finally , we annotated 1,497 face tracks containing 405,887 faces of 41 well-known individual characters .
NHKNews7 dataset .
This dataset consists of observations from the NHK News 7 program over 11 years .
After the annotation process , 1,259,320 faces of 111 individuals are provided .
The total number of face tracks is 5,567 .
Each character has from 4 to 550 face tracks .
In this dataset , we discard face tracks with fewer than 100 faces and more than 500 faces .
Compared to the TRECVID dataset , the NHKNews7 dataset is much more challenging.
Table 4 shows a , comparison between our datasets and some public benchmark datasets .
Based on the results , it is obvious that our datasets are superior over the other datasets , such as MoBo and Honda / UCSD , on all statistical terms , including number of videos , number of characters , and average face-track length .
Compared to the YouTube Faces dataset , , we provide much more face tracks ( or video shots ) per character , although our datasets have smaller numbers of characters ( or subjects ) .
Thus , our datasets are more relevant in evaluating a face retrieval system.
Figure 5 presents statistical information on our datasets .
The datasets can be downloaded from http: / / satohlab .
ex.nii.ac.jp / users / ndthanh / NIIFacetrackDatasets .
However , due to copyright issues , the face images in the face tracks cannot be published .
Instead , we provide a feature vector , used in \CITE , for each face image .
The feature vector of a face is extracted by computing the descriptors of the local appearance of the face around each of the located facial features .
Before extracting the descriptors , the face is geometrically normalized to reduce the effect of pose variation .
An affine transformation is estimated , which transforms the located facial feature points to a canonical set of feature positions .
Then , the appearance descriptors around each facial feature are computed .
The final feature representation of the face is formed by concatenating all the descriptors of its facial features.
We compared k-Faces with several approaches , including those based on pair-wise distances , MSM \CITE and CMSM \CITE.
Given two face tracks having multiple face images represented as feature vectors , pair-wise-based approaches compute the distances between each possible pair of feature vectors in two face tracks .
The maximum distance , the minimum distance , or the mean distance of the computed pair-wise distances is the used as the similarity measurement between two face tracks .
We refer to the approaches as pair:max , pair:min , and pair:mean , respectively ( see Figure 6 for the illustration ) .
The pair:min ( sometimes called min-min ) is a state-of-the-art approach widely used in other studies \CITE.
Regarding \CITE , if the pair-wise-based approaches are representative of nonparametric sample-based approaches , MSM and CMSM are representative of approaches based on a parametric model .
MSM , introduced by Yamaguchi et al .
The similarity between the sets is computed using the angle between subspaces .
CMSM is an extension of MSM , in which subspaces of the sets are projected onto a constraint subspace .
In doing so , the subspaces are expected to be more separable .
All of these approaches have shown their robustness in benchmark datasets , such as MoBo , HondaUCSD , and YouTube Faces .
Therefore , it is appealing to compare our k-Faces with them for a comprehensive evaluation.
Besides evaluating k-Faces with different values of k and different types of distance ( e.g. , Euclidean , L1 , and cosine ) , we try another criterion for selecting k representative faces in a face track .
In the original way , we proposed selecting these faces by partitioning the face track according to the temporal order and choosing the middle face of each partition .
However , another criterion that is based on clustering can be applied in selecting these representative faces .
In this new way , all the faces in a face track will be clustered to k groups by using a clustering algorithm .
The centroid of each group is selected .
Then , the mean of k centroids is used as the representative face for the face track .
In this experiment , we use the standard K-Means for clustering .
We refer to the former k-Faces as k-Faces.Temporal and to the latter k-Faces as k-Faces.KMeans.
We evaluate the performance of a face-track matching approach by computing the average precision of the rank list that it returned .
In particular , in each dataset , a face track is alternatively picked out as a query face track , while the remaining face tracks are used as the retrieved database .
Given a query , the average precision of the returned ranked list is computed , .
Finally , the mean of all average precision ( MAP ) values for all queries is reported as the overall evaluation metric for the approach with the given database.
Let r denote a rank in the returned face-track list , Pre( r ) the precision at rank r of the list , Nl the length of the list , Nhit the total number of face tracks matched with the query face track q , and I sMatched( k ) a binary function returning 1 if the face track at rank r is matched with q ( based on ground-truth annotations ) and , zero otherwise .
Then , the MAP of the evaluated approach can be computed as follows: \MATH
The MAP is a standard metric for evaluating retrieval and matching systems .
Besides the MAP , we record the processing times of the approaches in each dataset to compare their efficiency.
Figure 7 presents the mean average precision ( MAP ) of all the evaluated approaches in our two datasets , Trecvid and NHKNews7 .
Generally , all the MAPs vary from 64.61% to 76.54% in the Trecvid dataset .
Meanwhile , in the NHKNews7 dataset , the best MAP is 60.99% , and the worst is 42.75% .
The difference in the MAPs between the two datasets can be explained by following reasons .
First , the number of characters in NHKNews7 is larger than that in Trecvid , 111 characters in NHKNews7 compared to 41 characters in Trecvid .
This clearly increases the probability of mismatching face tracks .
Second , the videos in NHKNews7 were recorded over a long time ( i.e. , 11 years ) .
Thus , besides facial variations in each face track caused by the environmental conditions at the time of recording ( e.g. , illumination , pose , viewpoint ) , the face tracks of the character themselves also reflect the biological variations of the character over time; .
for instance , a character may look older after several years ( see Figure 8 , for example ) .
For these reasons , matching faces in NHKNews7 becomes more challenging , which .
resulted in decreased MAP( s ) for all the evaluated approaches.
A clear and consistent observation from both datasets is that pair:min ( i.e. , min-min ) always achieves the best MAPs , which are 76.54% and 60.99% in the two datasets , respectively .
Among the distance types , L1 is the optimal for use with pair:min .
A reasonable replacement is the Euclidean distance .
However , there is a minor accuracy gap between pair:min using L1 and pair:min using the Euclidean distance .
In addition , computing the Euclidean distance between two feature vectors is more expensive than computing their L1 distance .
The results also show that pair:min is better than pair:mean .
This is because pair:mean uses the mean of all pair-wise distances between two face tracks as the similarity score .
By computing the mean , pair:mean reduces the effect of noisy pairs .
At the same time , it eliminates the influence of pairs containing identical faces , which can help to instantly determine that the faces belong to the same character .
Thus , the discriminative power of the computed similarity score is reduced , compared to that computed by pair:min .
This causes the difference in MAPs between pair:min and pair:min .
More generally , this explains why such a gap between pair:min and pair:mean is larger in NHKNews7 than in Trecvid .
Because the average length of face tracks on NHKNews7 is longer ( i.e. , each face track contains more sample faces of a character ) , there is a greater chance that two face tracks of the same character contain identical faces.
Regarding our k-Faces , its MAP increases when k increases .
Between k-Faces.Temporal and k-Faces.KMeans , the impact of k on the MAP of k-Faces.KMeans is less significant .
Because k-Faces.KMeans always uses all the faces in a face track for clustering and selecting centroids for representative faces , the final mean face is less sensitive to k .
In contrast , k plays an important role in k-Faces.Temporal .
The higher the k set , the more representative faces of each face track selected .
Thus , the final mean face of each face track becomes more reliable and accurate .
The advantages of k-Faces.KMeans is that it can achieve high accuracy even when k is very small .
However , its disadvantage is the high computational cost of clustering faces on a high-dimensional feature space ( i.e. , 1,937 dimensions ) .
When k is large enough , there is no substantial difference in MAP between k-Faces.KMeans and k-Faces.Temporal.
In both datasets , when k increases from 2 to 20 , the MAPs of k-Faces approaches grow rapidly .
However , the MAPs become stable from k = 20 upward .
Because further increasing k does not help improve accuracy but increases the computational cost , we select k = 20 for investigating the trade-off between the accuracy and computational cost of k-Faces approaches in comparison to others .
Table 5 shows the MAP and processing time of each approach .
Processing time is divided into two parts , preprocessing and matching .
The preprocessing time refers to the time required to preprocess face tracks before matching .
In k-Faces approaches , the preprocessing of face tracks includes selecting representative faces and computing their mean face .
In MSM and CMSM , preprocessing includes computing subspaces for face tracks .
The matching time is averaged over one query run .
The time unit used is seconds.
As shown in Table 5 , k-Faces.KMeans and k- Faces.Temporal achieve almost equal accuracy and consume the same amount of time for one query in both datasets .
However , k-Faces.Temporal is hundreds of times ( 240 times in Trecvid and 360 times in NHKNews7 ) faster than k-Faces.Temporal in the preprocessing phase .
This suggests that in terms of both accuracy and efficiency , selecting representative faces based on temporal sampling is better than that based on clustering .
,
Compared to state-of-the-art approaches , our k- Faces.Temporal is thousands of times faster than the best approach , which is pair:min , and hundreds of times faster than MSM and CMSM in both datasets .
In terms of accuracy , k-Faces takes second place , with 73.65% in the Trevid dataset , after pair:min .
The difference in MAP between our approach and pair:min is 2.89% .
Meanwhile , k- Faces.Temporal is significantly better than MSM and CMSM , which respectively achieved 69.20% and 64.62% accuracy .
In the NHKNews7 dataset , k-Faces.Temporal is better than CMSM , but worse than pair:min and MSM .
One may question why MSM performed poorly in the Trecvid dataset , but was superior to k-Faces.Temporal in NHKNews7 .
The reason for this is the fact that the face tracks in the NHKNews7 dataset are larger than those in the Trecvid dataset .
Therefore , more sample faces in each face track can be used to obtain a reliable subspace .
As expected , the results of this experiment show that our proposed approach is extremely efficient while achieving comparable performance with state-of-the-art approaches .
In this paper , we investigate face retrieval in large-scale news video datasets .
Our contribution is threefold .
First , we present the practical problems encountered when a tracker is used to extract face tracks in news videos .
Based on these , we introduce techniques and solutions to overcome these problems to achieve robust face-track extraction .
Second , we present an approach for face-track matching that significantly reduces the computational cost while achieving competitive performance compared with state-of-the-art approaches .
Third , we prepare datasets , evaluate state-of-the-art face retrieval approaches , and publish real-world face-track datasets of such scales that have never been considered in the literature.
Recommend-Me : recommending query regions for image search
This paper presents a novel recommendation system , named Recommend-Me , to facilitate users in searching and exploring images in unknown image databases .
Given an initial query image , Recommend-Me automatically shows its recommendations to users .
The recommendations indicate which and how frequent items in the initial query image occur in the database .
In this way , users can make their own decisions before any actual search .
If there is a recommendation matching their search intention , relevant search results are ensured .
Otherwise , users should refine their initial query image for a better query sample .
Or , they can start exploring the database by using the recommended items as hints .
Recommend-Me helps users to avoid unnecessary trials and poor searching experiences .
We describe an efficient approach for Recommend-Me to deal with quantifying occurrences of multiple candidate items in the images of the database .
Instead of scanning the database for each candidate item , the approach enumerate occurrences of multiple candidate items simultaneously by investigating pairs of highly similar regions , knowing one pair is formed by a region in the initial image and a region in an image of the database .
We formulate the problem of finding such pairs as an optimization problem , which can be solved by a branch-and-bound algorithm .
Experiments conducted on a real-life and publicly available dataset demonstrate the efficiency , robustness , and promising application of our system .
Thanks to the advances of modern technology , a large amount of digital images can be easily created and stored nowadays .
The resulting exponential growth of image repositories , however , has created an urgent need for effective ways of searching images .
Moreover , image search has gained interest in recent years because of its importance and wide range of applications . In a typical scenario , users supply a query item , which is usually a region cropped from an image .
The search system then returns a list of relevant images retrieved from a database .
The images are expected to contain the query item .
Extensive studies have been conducted with an eye to improving the performance of this sort of search \CITE .
However , regardless of the powerfulness of state-of-the-art search techniques , there are still cases in which users are disappointed with their search results .
The reason is that relevant items are not in the database .
Under such circumstances , whatever the search technique is , results are obviously irrelevant and unexpected .
A normal user without prior knowledge about a database has no choice but to search it by trial-and-error .
We decided to tackle this problem to help users in searching and exploring images in unknown databases .
Our proposal is a novel recommendation system , named Recommend-Me .
The envisioned scheme can be described as follows ( see Figure \REF for an example ) .
Given an unknown database and an initial query image , Recommend-Me automatically presents its recommendations to the user .
One recommendation is one item , bounded by a rectangular region , in the initial query image .
Each recommended item is assigned a number to show in how many images of the database it occurs .
Items with larger assigned numbers will be more recommended .
By providing such recommendations , Recommend-Me helps users to :
- avoid unexpected search experience with poor queries that are subjectively ( and sometimes randomly ) selected ,
- rapidly refine the initial query image before any actual search , if the recommendations show that current search intention can not return relevant results ,
- explore the database using the recommendations as hints .
Recommend-Me is a pure visual recommendation system .
No extra information or knowledge is required for an input besides an initial query image and a database . //<" and the name of the database " ? ? Or " and the location and name of the database " ? ?>
To automatically generate recommendations , we need to address several issues .
First , there tends to be a huge pool of candidate items in the initial query image .
Basically , any rectangular region in the image can be considered as a candidate item .
Examining all of them would incur an enormous computational cost .
Second , even if a candidate item is known , enumerating its occurrences in the database is a not trivial task because it is subject to many variations in viewpoint , scale , rotation , occlusion , etc.
Furthermore , the cost of scanning all regions of the images of the database will inevitably be prohibitive for practical purposes .
In this paper , we employ state-of-the-art techniques such as SIFT and the Bag-of-Words ( BoW ) model to handle the task of matching regions with the above variations .
Our main focus is to devise an efficient approach for quantifying occurrences of candidate items in the database in order to generate recommendations .
The advantage in efficiency comes from our use of various methodologies .
Based on the observation that users are mostly interested in object-like items , we decided to use a selective search approach proposed by Van de Sande et al. \CITE to sample regions bounding object-like items in all images as a preprocessing step .
By applying this approach instead of a naive sampling approach such as sliding windows , we were able to dramatically reduce the number of items ( i.e. regions ) that need to be processed in each image .
Given two sets of regions , one containing regions of candidate items in the initial query image and the other containing regions of items in images of the database , our task is to find occurrences of all candidate items in the database .
This task can be equivalently treated as finding pairs of matched regions , knowing that a pair is formed by a region in one of the sets with a region in the other .
So , if the top region pairs are found with sufficiently high similarity scores , we can enumerate the occurrences of the items .
Based on this insight , we can boost efficiency yet again by formulating the problem as an optimization problem that can be solved by applying a branch-and-bound algorithm .
In order to do that , we introduce a novel representation based on a hierarchical structure describing a set of region pairs and a corresponding function bounding the similarity scores of pairs over such a set .
Related Work .
On the topic of discovering common items , Recommend-Me is related to recent studies on mining common items in image databases such as \CITE .
However , in contrast to these studies , Recommend-Me targets items which are shared by both an image database and the user 's particular interest inthe input initial image .
Meanwhile , \CITE only aims at finding common items within the database .
One can employ these techniques to solve our problem by first identifying common items among the images of the database , then looking them up in the initial query image again to make recommendations .
However , doing that incurs the extra cost of mining unnecessary items that appear in the database , but not in the initial query image .
One of the most related studies to ours is that of Zha et al in \CITE .
They introduced a system , called Visual Query Suggestion ( VQS ) , that simultaneously provides both keyword and image suggestions to users .
There are clear differences between Recommend-Me and VQS .
VQS requires an initial text query for formulating the suggestion , and its suggestions are both keywords and images .
On the other hand , Recommend-Me takes an image as input , and its outputs are regions in the image .
Recommend-Me is a query suggestion system based on pure visual information .
Above all , although both Recommend-Me and VQS aim at helping users search for images , their targeted problems are different .
VQS proposes to help users to overcome their tendency to formulate ambiguous queries by precisely expressing search intents , assuming the relevant items are always available .
Meanwhile , Recommend-Me helps users to select queries based on the existence of relevant items in the retrieved database .
To the best of our knowledge , Recommend-Me is the first attempt at this sort of targeted suggestion scheme .
From a technical point of view , our solution is motivated by recent work on object localization and subimage retrieval based on branch-and-bound optimization \CITE .
However , ours is differentiated from the other studies in that we represent sets of region pairs , instead of only sets of regions .
ESS and ESR \CITE use coordinate intervals for their presentation .
In contrast , we utilize hierarchical structures in order to do that , since our regions are discrete .
Although coordinate intervals as in ESS ( or ESR ) can be extended to represent sets of region pairs , such a criterion in the context of the branch-and-bound algorithm may suffer from the curse-of-dimensionality problem since the number of dimensions required at least doubles .
Finally , ESS , ESR and Recommend-Me differ in that they have different approaches to constructing a bounding quality function and to computing bounding values over the sets .
The rest of this paper is organized as follows .
Section 2 presents an overview of the system .
The details of how we find region pairs with the highest similarity scores are given in Section 3 .
Section 4 presents our experiments and evaluations .
Section 5 concludes the paper .
The framework of Recommend-Me consists of four main steps .
Figure \REF summarizes the pipeline .
Step 1 : Select candidate items in images .
Using all possible rectangular regions in images as candidate items is overly expensive in the subsequent processing .
More importantly , users are often attracted by object-like items .
Thus , we employ an approach proposed by Van de Sande et al. \CITE for item selection .
The approach starts by over-segmenting an image into disjoint regions .
Then , it performs a greedy search < ? ?> algorithm that iteratively merges the two most similar regions together until the whole image becomes a single region .
All regions throughout the hierarchy are considered to be candidate items .
Each item is represented by its rectangular bounding region .
Step 2 : Find top region pairs with the highest similarity scores .
There will be a pool of region pairs if we compare each region in the initial query image with each region in images of the database .
However , only region pairs with sufficiently high similarity scores are meaningful for identifying occurrences of candidate items .
In this step , we use the approach explained in Section 3 to find the top \MATH ( the expected number of returned region pairs ) of such pairs in the pool .
Step 3 : Group overlapping regions .
Given \MATH region pairs returned in Step 2 and assuming each region pair in the \MATH pairs is formed by a candidate item and its corresponding match , we can enumerate the number of occurrences of the items .
However , there are likely several regions that overlap each other due to the merging done in Step 1 .
These regions would be perceived as the same item by users .
Thus , we propose to use maximal clique analysis to group such regions so that the recommendations will be consistent .
One clique is one group of regions .
Step 4 : Formulate recommendations .
Finally , for each group of regions , we count the number of images containing at least one match of one member region of the group .
The number indicates how frequent the item , represented by the group , occurs in the database .
Using those numbers , we rank all groups and show them as recommendations to users .
A representative of each group is a rectangular region located by averaging the coordinates of all member regions of the group .
In this section , we describe our approach for efficiently finding the top \MATH similar region pairs in the pool of all possible region pairs .
Given two sets of regions \MATH and \MATH , the set of all possible region pairs can then be represented as \MATH .
By using the similarity function \MATH , we have to solve the following optimization problem in order to find the region pair \MATH with the highest similarity score .
Because \MATH elements , it is expensive to perform this maximization exhaustively .
We hence propose to use a branch-and-bound algorithm \CITE to solve the problem .
Once \MATH is found , we can obtain the other top region pairs by continuing the search process with the remaining search space , in which the found top pairs have been eliminated .
A general branch-and-bound algorithm works by hierarchically dividing the parameter space into disjoint parts ; this is called the branching step .
In the bounding step , each part is assigned an upper bound for which the quality function could take on any of the members of the part . //<The rewrite is grammatical but I don 't know what " the quality function could take on any of the members of the part " . Inparticular what are these members and can they be computed in a function ?>
Those parts of the parameter space with higher upper bound values are examined first .
Thus , many portions of the parameter space can be eliminated if their upper bound values imply that they cannot contain the maximum .
In our problem , the parameter space is the set of all region pairs \MATH , and the quality function is the similarity function \MATH .
Assuming we can organize regions in \MATH and \MATH into two hierarchical structures \MATH and \MATH respectively , so that :
- all regions are leaf nodes of the structures and non-leaf nodes are {\it virtual} nodes ,
- if each node is represented by a histogram \MATH with \MATH bins , the value in each bin of a child node is constrained to be equal or smaller than the value in the same bin of its parent node .
Given such structures , we show in what follows how the branch-and-bound algorithm can be used to solve our problem .
Let \MATH and \MATH denote two nodes on \MATH and \MATH .
And let \MATH denote the set containing all leaf nodes explored from \MATH .
If \MATH is a leaf node , \MATH .
Otherwise , given \MATH with \MATH being direct child nodes of \MATH , \MATH can be recursively defined as follows : \MATH
In a similar way , we have : \MATH
Letting \MATH indicate the set of node pairs formed by pairing nodes in \MATH with nodes in \MATH , we get : \MATH . //<the rewrite is a guess .>
Thus , if \MATH and \MATH are roots of \MATH and \MATH respectively , \MATH will be exactly the entire search space \MATH .
Branching Step .
Dividing up the search space ( i.e. set of region pairs ) covered by \MATH can be done straightforwardly by utilizing the hierarchical structures \MATH , \MATH at certain nodes \MATH , \MATH . //<The rewrite is better if it is correct .>
Regarding \REF , \REF and \REF , \MATH can be divided into disjoint parts as follows : \MATH
Or , \MATH
The way to divide can be based on the sizes of \MATH and \MATH .
We divide the larger one first .
The branching step is illustrated in Figure \REF .
Bounding Step .
An essential requirement for the branch-and-bound algorithm is the quality bounding function \MATH used to determine whether a part of the search space should be examined . //<Or " determine the extent that " ? ?>
In particular , \MATH bounds the upper values of \MATH over a set of node pairs ( i.e. region pairs ) .
Let us assume that we are evaluating the upper bound of \MATH over all region pairs in \MATH .
Among the several distance formulas for estimating the similarity of two regions , we will use the Normalized Histogram Intersection ( NHI ) distance since it is well-balanced between computational efficiency and robustness~\cite{ESR} .
We will then rely on NHI to define \MATH bounding the values of \MATH , with : \MATH
Referring to constraint ( b ) in constructing \MATH and \MATH , we have : \MATH
As a result , the bounding value \MATH over \MATH can be clearly observed as : \MATH . //<I 'm not sure what observed means in this context . Do you mean " can be derived as " ? ?>
We can efficiently evaluate \MATH for the set of region pairs \MATH because \MATH relies only on the histogram representation of single rectangular regions \MATH and \MATH .
Moreover , the normalization terms , which indicate the minimum number of visual words inside any member region of \MATH , \MATH , are computed once by using the integral image technique .
Inspired by \CITE , we devised the algorithm to work in a best-first manner . //<The original describes the way you decided to write the algorithm . In contrast , the rewrite describes the way the algorithm works .>
The algorithm examines the set having the highest bounding value \MATH . //<" next " is unclear . The rewrite is a guess .>
The algorithm stops if the set contain only one pair of region .
Otherwise , the set is then divided into disjoint subsets for further search .
Pseudo-code for the algorithm using a priority queue to store sets of region pairs , is given as follows .
To obtain more than one region pair , we simply repeat the loop in Algorithm 1 until the expected number of region pairs \MATH is reached .
So far , our approach is based on an assumption that the sets of regions are already organized into hierarchical structures which satisfy constraints ( a ) and ( b ) .
In the remaining of this section , we show how to organize such sets , given the initial query image and image database .
There are two type of region set .
One is a set containing regions of one image .
The other is a set containing regions of multiple images ( i.e. database ) .
With the first type of set , by applying the selective search approach introduced in \CITE for item selection , regions in each image are already organized into a binary tree .
Because such binary tree were constructed by bottom-up merging of regions , a parent region on the trees spatially covers its child regions in the image space ( see Figure \REF ) .
As a result , constraint ( b ) is satisfied .
However , because we want to use all regions corresponding to all nodes throughout the tree as candidate item regions , constraint ( a ) will be violated if we keep using the tree for the branch-and-bound algorithm .
In other words , all current non-leaf nodes of the tree will be treated as {\it vitual nodes} and will not be used as candidate item regions .
Our solution to this problem is straightforward .
We generate and attach a new leaf node to each non-leaf node of the current tree .
The generated node is exactly the same as the non-leaf node it is attached to , which now becomes a virtual node .
By doing that , we keep the spatial covering property of the original binary tree for the new hierarchical structure .
Moreover , all non-leaf nodes will be taken into account as candidate item regions via their attachments .
The new hierarchical structure therefore satisfies both constraints .
Figure X is an illustration of this organization .
With a set containing regions from multiple images , we perform a two-stage organization procedure .
In the first stage , regions in each image are organized into a hierarchical structure , as presented above .
If multiple hierarchical structures are returned by the first stage , we use their root nodes as the initial elements to construct an yet another hierarchical structure over them by divisive clustering . //<the rewrite is a guess .>
We start with the full set of the elements .
Then , we perform splits recursively as one moves down the hierarchy .
In each splitting step , the split set is divided into $k$ parts by using $k$-means clustering .
Once the hierarchical structure is completed , we compute a histogram representation for all of its non-leaf nodes .
The value at each histogram bin of a non-leaf node is the maximum of all values in the same bin of its child nodes .
This is to ensure constraint ( b ) is satisfied .
Finally , by unifying the results of both stages , we have a unique hierarchical structure over the set of regions of multiple images , which satisfies both constraints .
We illustratie this in Figure Y .
So , given the initial query image and a database , we now can construct two hierarchical structures .
One is for the regions of the initial query image .
The other is for the regions of all images in the database .
Both structures then become the input for our approach to find the top region pairs with the highest similarity scores for making recommendations .
Note that because the hierarchy of the regions of images in the database is independent of the query , we construct it only one time .
A recommendation is a good one if it exactly locates an item in the database .
We call such recommendations" hit recommendations " , and a good recommendation system should accurately provide them to users .
More importantly , users always expect that hit recommendations are ranked higher than false recommendations ( if there are a number of them ) on the list of the recommendations by the system .
Based on these insights , we evaluated the Recommend-Me system using two evaluation metrics : precision in pesenting recommendations and rank of the first hit recommendation on the list .
Given an initial query image with ground-truth annotations indicating the bounding box of an item known to existin the database , Recommend-Me will provide a recommendation if at least one of its recommendations is a hit recommendation .
We used an approach from the Pascal VOC challenge to clarify whether a recommendation is a hit recommendation or not .
In particular , the intersection area between a hit recommendation and an item should be larger than half their union area .
Because our target is not to improve search techniques but to facilitate query selection , the search simply relies on standard techniques if users use an recommendation as a search query .
To evaluate the efficiency of Recommend-Me in finding \MATH region pairs with the highest similarity scores , we computed the number of evaluations for the quality bounding function in the branch-and-bound algorithm .
This number was then divided by the size of all possible region pairs formed by regions in the initial query image and regions in images of the database . //< " the size of all possible region pairs " is unclear to me . Do you mean " the average size of all possible region pairs " or " the sizes of all possible region pairs " ?>
The fraction was taken to be the efficiency improvement of Recommend-Me .
Note that regions in images were pre-selected as in Step 1 of our framework .
Feature presentation .
We employed a BoF model to represent the features of images and regions in the images .
Visual words in the images were located by using dense grid sampling and a Different-of-Gaussian ( DoG ) detector .
A codebook of 2000 visual words was built using the standard K-Means algorithm .
%to cluster points on a set of random images .% Additionally , the set of points of interest obtained by the DoG in the query image was used to remove regions without any such points inside .
This helped us to eliminate less meaningful regions such as the sky , solid color regions , etc. , from the recommendations .
Region selection in images .
As mentioned above , we used the approach first introduced in \CITE on different color channels for the region selection .
In this experiment , we used two color channels , RGB and Hue , since the regions generated on those channels can cover 99 .72\% of the area of the annotated item regions in our dataset .
A virtual root node was created to compose two color-dependent binary trees into one unique binary tree for each image .
In addition , the rectangular regions which did not contain any visual word or were smaller than 40 x 40 pixels were discarded .% since they can form a meaningful recommendation .
Maximal clique analysis algorithm .
Given the set of regions in the initial query image , we built a graph in which two regions were connected if they nearly overlapped each other ( we use the approach of Pascal VOC with a tighter threshold , 0 .8 ) .
The Bron-Kerbosch algorithm was then applied to find all maximal cliques in the graph .
One clique was one group of regions .
Figure \REF shows the results of the evaluation .
The reported precision , rank of the first hit recommendation , and efficiency improvement are averages of Recommend-Me on 375 different initial query images and an individual value of \MATH .
The results show that Recommend-Me can make hit recommendations to users with high precision ( approximately 80 .27\% ) .
On the returned list of all recommendations , hit recommendations usually take the first two places on the list .
This help users to avoid choosing false recommendations ( if such false recommendations are highly ranked ) .
There were two types of false recommendation in the top places of the list .
The first type consisted of background regions ( e.g. trees , buildings , roads ) , which are easily found in many images .
The second type was items lacking manual annotations such as windows , cars , and humans .
Thus , recommendations about those items are not counted as hit recommendations .
However , if users are interested in using them as hints to explore the database , they may still be very helpful .
Clearly , one can realize that the performance of Recommend-Me is influenced by \MATH .
By increasing \MATH , we can obtain more region pairs with sufficiently high similarity scores .
Thisgives more chances to get region pairs of the annotated item , thus improving precision .
However , the trade-off is that more unexpected items are returned .
This results in a drop in the average rank of the first hit recommendation .
Figure 5( a ) demonstrates this circumstance .
When \MATH increases from 2000 to 10000 , the precision increases from 74 .67\% to 81 .97\% ; meanwhile , the average rank of the first hit recommendation drops to 2 .27 from 1 .78 .
It is worth noting that keeping increasing \MATH may not always give better precision , since precision relies on not only \MATH but also the robustness of the region comparison techniques .
Recommend-Me cannot provide any hit recommendation for around 20\% of the initial query images due to the fact that our region comparison technique cannot deal with significant variations in the items .
Figure 5( b ) shows another circumstance when we increase \MATH .
It is the decline in the efficiency improvement of Recommend-Me .
This is because the branch-and-bound algorithm has to visit more parts of the total search space in order to find extra local opitimals .
However , in all of our evaluations , Recommend-Me still performed around three times faster than the exhaustive search .
This advantage will be important for practical applications .
Figure \REF presents examples of hit recommendations returned byRecommend-Me .
We described oursystem , named Recommend-Me , for making visual query suggestions .
Given an initial query image and a retrieved database , Recommend-Me gives recommendations that impose conditions on which and how frequent items in the initial query image appear in the database .
Such recommendations help users to select the search query , to rapidly refine the initial query image or to explore the database .
An efficient solution to make Recommend-Me practical was also presented .
To the best of our knowledge , Recommend-Me is the first attempt at developing a targeted suggestion scheme .
